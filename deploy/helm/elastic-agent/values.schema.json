{
    "$schema": "http://json-schema.org/draft-07/schema",
    "type": "object",
    "title": "Elastic Agent Helm chart configuration.",
    "description": "Schema for managing the Elastic Agent Helm chart values.",
    "properties": {
        "outputs": {
            "type": "object",
            "description": "Object containing multiple output configurations.",
            "additionalProperties": {
                "$ref": "#/definitions/OutputObject"
            },
            "examples": [
                {
                    "outputNamePlain": {
                        "type": "ESPlainAuthBasic"
                    }
                }
            ]
        },
        "system": {
            "type": "object",
            "description": "Configuration for system integration.",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable system integration."
                },
                "output": {
                    "type": "string",
                    "description": "Name of the output used in system integration. Must be defined in outputs."
                },
                "namespace": {
                    "type": "string",
                    "description": "output namespace.",
                    "default": "default"
                },
                "authLogs": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable system auth logs stream."
                        },
                        "vars": {
                            "$ref": "#/definitions/SystemLogsStreamVars"
                        }
                    },
                    "required": [
                        "enabled"
                    ]
                },
                "syslog": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable system syslog stream."
                        },
                        "vars": {
                            "$ref": "#/definitions/SystemLogsStreamVars"
                        }
                    },
                    "required": [
                        "enabled"
                    ]
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable system metrics stream."
                        }
                    },
                    "required": [
                        "enabled"
                    ]
                }
            },
            "required": [
                "enabled",
                "output"
            ]
        },
        "kubernetes": {
            "type": "object",
            "description": "Configuration for Kubernetes integration.",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Kubernetes integration."
                },
                "onboardingID": {
                    "type": "string",
                    "description": "Onboarding ID for quick-start flow."
                },
                "output": {
                    "type": "string",
                    "description": "Name of the output used in Kubernetes integration. Must be defined in outputs."
                },
                "namespace": {
                    "type": "string",
                    "description": "Kubernetes namespace.",
                    "default": "default"
                },
                "hints": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable elastic-agent autodiscovery feature."
                        }
                    }
                },
                "state": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable state streams based on kube-state-metrics."
                        },
                        "host": {
                            "type": "string",
                            "description": "Host of the kube-state-metrics service, used when kube-state-metrics.enabled is set to false."
                        },
                        "vars": {
                            "type": "object",
                            "description": "State streams variables."
                        }
                    },
                    "required": [
                        "enabled"
                    ]
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable metric streams based on kubelet."
                        },
                        "vars": {
                            "type": "object",
                            "description": "Metric streams variables."
                        }
                    },
                    "required": [
                        "enabled"
                    ]
                },
                "apiserver": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable apiserver input."
                        },
                        "vars": {
                            "type": "object",
                            "description": "Apiserver variables."
                        }
                    },
                    "required": [
                        "enabled"
                    ]
                },
                "proxy": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable proxy input."
                        },
                        "vars": {
                            "type": "object",
                            "description": "Proxy stream variables."
                        }
                    },
                    "required": [
                        "enabled"
                    ]
                },
                "scheduler": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable scheduler input."
                        },
                        "vars": {
                            "type": "object",
                            "description": "Scheduler stream variables."
                        }
                    },
                    "required": [
                        "enabled"
                    ]
                },
                "controller_manager": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable controller_manager input."
                        },
                        "vars": {
                            "type": "object",
                            "description": "Controller manager stream variables."
                        }
                    },
                    "required": [
                        "enabled"
                    ]
                },
                "containers": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "$ref": "#/definitions/KubernetesStreamConfig"
                        },
                        "state": {
                            "$ref": "#/definitions/KubernetesStreamConfig"
                        },
                        "logs": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable containers logs stream."
                                },
                                "vars": {
                                    "type": "object",
                                    "description": "Stream variables.",
                                    "properties": {
                                        "enabledDefaultProcessors": {
                                            "type": "boolean",
                                            "description": "Enable container logs stream default processors.",
                                            "default": true
                                        },
                                        "symlinks": {
                                            "type": "boolean",
                                            "description": "Use Symlinks.",
                                            "default": true
                                        },
                                        "additionalParsersConfig": {
                                            "type": "array",
                                            "description": "Additional parsers configuration.",
                                            "items": {
                                                "type": "object"
                                            },
                                            "default": []
                                        },
                                        "containerParserStream": {
                                            "type": "string",
                                            "description": "Container parser's stream configuration.",
                                            "default": "all"
                                        },
                                        "containerParserFormat": {
                                            "type": "string",
                                            "description": "Container parser's format configuration.",
                                            "default": "auto"
                                        },
                                        "processors": {
                                            "type": "array",
                                            "description": "Additional processors to use on the container logs streams. Processors are used to reduce the number of fields in the exported event or to enhance the event with metadata. This executes in the agent before the events are shipped.",
                                            "items": {
                                                "type": "object"
                                            },
                                            "default": []
                                        }
                                    }
                                }
                            },
                            "required": [
                                "enabled"
                            ]
                        },
                        "audit_logs": {
                            "$ref": "#/definitions/KubernetesStreamConfig"
                        }
                    }
                },
                "pods": {
                    "$ref": "#/definitions/KubernetesMetricsAndStateConfig"
                },
                "deployments": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "statefulsets": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "daemonsets": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "replicasets": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "namespaces": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "volumes": {
                    "$ref": "#/definitions/KubernetesMetricsConfig"
                },
                "nodes": {
                    "$ref": "#/definitions/KubernetesMetricsAndStateConfig"
                },
                "storageclasses": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "jobs": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "cronjobs": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "persistentvolumes": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "persistentvolumeclaims": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "resourcequotas": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "services": {
                    "$ref": "#/definitions/KubernetesStateConfig"
                },
                "system": {
                    "$ref": "#/definitions/KubernetesMetricsConfig"
                }
            }
        },
        "extraIntegrations": {
            "type": "object",
            "description": "Configuration for extra integrations.",
            "additionalProperties": {
                "$ref": "#/definitions/CustomIntegrationConfig"
            }
        },
        "agent": {
            "type": "object",
            "description": "Configuration for the Elastic-Agent.",
            "properties": {
                "version": {
                    "type": "string",
                    "description": "Elastic-Agent version.",
                    "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+.*$"
                },
                "image": {
                    "$ref": "#/definitions/AgentImageConfig"
                },
                "imagePullSecrets": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "engine": {
                    "type": "string",
                    "enum": [
                        "k8s",
                        "eck"
                    ],
                    "description": "Engine to use for Kubernetes manifests or ECK CRDs.",
                    "examples": [
                        "k8s"
                    ],
                    "default": "k8s"
                },
                "unprivileged": {
                    "type": "boolean",
                    "description": "Enable unprivileged mode."
                },
                "fleet": {
                    "type": "object",
                    "description": "Elastic-Agent managed configuration.",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Elastic-Agent managed mode.",
                            "default": false
                        },
                        "ca": {
                            "$ref": "#/definitions/ValueFrom",
                            "description": "CA certificate to use when connecting to Fleet."
                        },
                        "force": {
                            "type": "boolean",
                            "description": "Elastic Agent client certificate to use with Fleet Server during mTLS authentication."
                        },
                        "agentCert": {
                            "$ref": "#/definitions/ValueFrom",
                            "description": "Elastic Agent client private key to use with Fleet Server during mTLS authentication."
                        },
                        "agentCertKey": {
                            "$ref": "#/definitions/ValueFrom",
                            "description": "Elastic Agent client private key to use with Fleet Server during mTLS authentication."
                        },
                        "kibanaCA" : {
                            "$ref": "#/definitions/ValueFrom",
                            "description": "CA certificate to use when connecting to Kibana if the enrollment token is not supplied."
                        },
                        "kibanaServiceToken" : {
                            "type": "string",
                            "description": "Service token to use when connecting to Kibana if the enrollment token is not supplied."
                        },
                        "tokenName": {
                            "type": "string",
                            "description": "Token name to use for fetching token from Kibana if the enrollment token is not supplied."
                        },
                        "policyName": {
                            "type": "string",
                            "description": "Token policy name to use for fetching token from Kibana if the enrollment token is not supplied."
                        },
                        "url": {
                            "type": "string",
                            "description": "Fleet server URL."
                        },
                        "token": {
                            "type": "string",
                            "description": "Fleet enrollment token."
                        },
                        "insecure": {
                            "type": "boolean",
                            "description": "Communicate with Fleet with either insecure HTTP or unverified HTTPS."
                        },
                        "kibanaHost": {
                            "type": "string",
                            "description": "Kibana host to fallback if enrollment token is not supplied."
                        },
                        "kibanaUser": {
                            "type": "string",
                            "description": "Kibana username to fallback if enrollment token is not supplied."
                        },
                        "kibanaPassword": {
                            "type": "string",
                            "description": "Kibana password to fallback if enrollment token is not supplied."
                        },
                        "preset": {
                            "type": "string",
                            "description": "Agent preset to deploy."
                        }
                    },
                    "required": [
                        "enabled"
                    ],
                    "if": {
                        "properties": {
                            "enabled": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "anyOf": [
                            {
                                "required": [
                                    "preset",
                                    "url",
                                    "token"
                                ],
                                "properties": {
                                    "preset": {
                                        "type": "string"
                                    },
                                    "url": {
                                        "type": "string",
                                        "format": "uri"
                                    },
                                    "token": {
                                        "type": "string",
                                        "minLength": 1
                                    }
                                }
                            },
                            {
                                "required": [
                                    "preset",
                                    "url",
                                    "tokenName",
                                    "policyName",
                                    "kibanaHost",
                                    "kibanaUser",
                                    "kibanaPassword"
                                ],
                                "properties": {
                                    "preset": {
                                        "type": "string"
                                    },
                                    "url": {
                                        "type": "string",
                                        "format": "uri"
                                    },
                                    "tokenName":  {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "policyName":  {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "kibanaHost": {
                                        "type": "string",
                                        "format": "uri"
                                    },
                                    "kibanaUser": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "kibanaPassword": {
                                        "type": "string",
                                        "minLength": 1
                                    }
                                }
                            }
                        ]
                    }
                },
                "presets": {
                    "type": "object",
                    "description": "Map of deployment presets for the Elastic Agent.",
                    "additionalProperties": {
                        "$ref": "#/definitions/AgentPreset"
                    },
                    "default": {
                        "presetName": {
                            "mode": "daemonset"
                        }
                    },
                    "examples": [
                        {
                            "presetName": {
                                "mode": "daemonset"
                            }
                        }
                    ]
                }
            },
            "required": [
                "version",
                "engine",
                "presets"
            ]
        }
    },
    "required": [
        "outputs",
        "agent"
    ],
    "allOf": [
        {
            "if": {
                "properties": {
                    "agent": {
                        "properties": {
                            "engine": {
                                "const": "k8s"
                            }
                        }
                    }
                }
            },
            "then": {
                "not": {
                    "properties": {
                        "outputs": {
                            "type": "object",
                            "additionalProperties": {
                                "properties": {
                                    "type": {
                                        "const": "ESECKRef"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "if": {
                "properties": {
                    "kube-state-metrics": {
                        "properties": {
                            "enabled": {
                                "const": true
                            }
                        }
                    },
                    "agent": {
                        "properties": {
                            "engine": {
                                "const": "eck"
                            }
                        }
                    }
                }
            },
            "then": {
                "properties": {
                    "kubernetes": {
                        "properties": {
                            "state": {
                                "properties": {
                                    "agentAsSidecar": {
                                        "properties": {
                                            "enabled": {
                                                "const": false
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "if": {
                "properties": {
                    "kube-state-metrics": {
                        "properties": {
                            "enabled": {
                                "const": true
                            }
                        }
                    },
                    "kubernetes": {
                        "properties": {
                            "state": {
                                "properties": {
                                    "agentAsSidecar": {
                                        "properties": {
                                            "enabled": {
                                                "const": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "agent": {
                        "fleet": {
                            "enabled": {
                                "const": true
                            }
                        }
                    }
                }
            },
            "then": {
                "properties": {
                    "agent": {
                        "fleet": {
                            "preset": {
                                "type": "string",
                                "minLength": 0
                            }
                        }
                    }
                }
            },
            "else": {
                "properties": {
                    "agent": {
                        "fleet": {
                            "preset": {
                                "type": "string",
                                "minLength": 1
                            }
                        }
                    }
                }
            }
        }
    ],
    "definitions": {
        "OutputObject": {
            "type": "object",
            "description": "Defines the configuration for an output.",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "ESPlainAuthBasic",
                        "ESPlainAuthAPI",
                        "ESSecretAuthBasic",
                        "ESSecretAuthAPI",
                        "ESECKRef",
                        "Logstash"
                    ],
                    "description": "Type of the output."
                },
                "hosts": {
                    "type": "array",
                    "description": "hosts of the output (required for Logstash type)."
                },
                "url": {
                    "type": "string",
                    "description": "URL of the output (required for ESPlainAuthBasic and ESPlainAuthAPI type).",
                    "example": "http://elasticsearch:9200"
                },
                "username": {
                    "type": "string",
                    "description": "Username to authenticate with the output (required for ESPlainAuthBasic).",
                    "example": "elastic"
                },
                "password": {
                    "type": "string",
                    "description": "Password to authenticate with the output (required for ESPlainAuthBasic).",
                    "example": "fantastic"
                },
                "api_key": {
                    "type": "string",
                    "description": "API key to authenticate with the output (required for ESPlainAuthAPI type)."
                },
                "secretName": {
                    "type": "string",
                    "description": "K8s secret to mount output connection details (required for ESSecretAuthBasic and ESSecretAuthAPI types)."
                },
                "name": {
                    "type": "string",
                    "description": "Name to reference an Elasticsearch cluster managed by ECK (required for ESECKRef type)."
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace to reference an Elasticsearch cluster managed by ECK (optional for ESECKRef type)."
                },
                "ssl": {
                    "$ref": "#/definitions/SSLConfigClient"
                },
                "loadbalance": {
                    "type": "boolean",
                    "description": "If true and multiple Logstash hosts are configured, the output plugin load balances published events onto all Logstash hosts. If false, the output plugin sends all events to one host (determined at random) and switches to another host if the selected one becomes unresponsive.",
                    "examples": [ true, false ]
                },
                "ttl": {
                    "type": "string",
                    "description": "Time to live for a connection to Logstash after which the connection will be reestablished. This setting is useful when Logstash hosts represent load balancers. Because connections to Logstash hosts are sticky, operating behind load balancers can lead to uneven load distribution across instances. Specify a TTL on the connection to achieve equal connection distribution across instances.",
                    "examples": [ "30s" ]
                },
                "slow_start": {
                    "type": "boolean",
                    "description": "If true, only a subset of events in a batch of events is transferred per transaction. The number of events to be sent increases up to bulk_max_size if no error is encountered. On error, the number of events per transaction is reduced again.",
                    "examples": [ false, true ]
                },
                "pipelining": {
                    "type": "integer",
                    "description": "The number of batches to send asynchronously to Logstash while waiting for an ACK from Logstash. The output becomes blocking after the specified number of batches are written. Specify 0 to turn off pipelining.",
                    "examples": [ 0, 2 ]
                },               
                "workers": {
                    "type": "integer",
                    "description": "Workers used to publish events. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ 1, 2 ]
                },
                "timeout": {
                    "type": "string",
                    "description": "The HTTP request timeout in seconds for the output request. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ "90s", "30s" ]
                },
                "queue.mem.flush.timeout": {
                    "type": "string",
                    "description": "The maximum wait time for queue.mem.flush.min_events to be fulfilled. If set to 0s, events are available to the output immediately. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ "10s", "30s" ]
                },
                "queue.mem.flush.min_events": {
                    "type": "integer",
                    "description": "flush.min_events is a legacy parameter, and new configurations should prefer to control batch size with bulk_max_size. As of 8.13, there is never a performance advantage to limiting batch size with flush.min_events instead of bulk_max_size. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ 3200, 1600 ]
                },
                "queue.mem.events": {
                    "type": "integer",
                    "description": "The number of events the queue can store. This value should be evenly divisible by the smaller of queue.mem.flush.min_events or bulk_max_size to avoid sending partial batches to the output. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ 3200, 1600 ]
                },
                "max_retries": {
                    "type": "integer",
                    "description": " The number of times to retry publishing an event after a publishing failure. After the specified number of retries, the events are typically dropped. Set max_retries to a value less than 0 to retry until all events are published. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ 3, 5 ]
                },
                "compression_level": {
                    "type": "integer",
                    "description": " The gzip compression level. Set this value to 0 to disable compression. The compression level must be in the range of 1 (best speed) to 9 (best compression). Increasing the compression level reduces network usage but increases CPU usage. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ 3, 5 ]
                },
                "bulk_max_size": {
                    "type": "integer",
                    "description": "The maximum number of events to bulk in a single Elasticsearch bulk API index request. Events can be collected into batches. Elastic Agent will split batches larger than bulk_max_size into multiple batches. Specifying a larger batch size can improve performance by lowering the overhead of sending events. However big batch sizes can also increase processing times, which might result in API errors, killed connections, timed-out publishing requests, and, ultimately, lower throughput. Setting bulk_max_size to values less than or equal to 0 turns off the splitting of batches. When splitting is disabled, the queue decides on the number of events to be contained in a batch. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ 3200, 1600 ]
                },
                "backoff.max": {
                    "type": "string",
                    "description": "The maximum number of seconds to wait before attempting to connect to Elasticsearch after a network error. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ "60s", "30s" ]
                },
                "backoff.init": {
                    "type": "string",
                    "description": "The number of seconds to wait before trying to reconnect to Elasticsearch after a network error. After waiting backoff.init seconds, Elastic Agent tries to reconnect. If the attempt fails, the backoff timer is increased exponentially up to backoff.max. After a successful connection, the backoff timer is reset. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ "1s", "5s" ]
                },
                "allow_older_versions": {
                    "type": "boolean",
                    "description": "Allow Elastic Agent to connect and send output to an Elasticsearch instance that is running an earlier version than the agent version. Note that this setting does not affect Elastic Agent's ability to connect to Fleet Server. Fleet Server will not accept a connection from an agent at a later major or minor version. It will accept a connection from an agent at a later patch version. For example, an Elastic Agent at version 8.14.3 can connect to a Fleet Server on version 8.14.0, but an agent at version 8.15.0 or later is not able to connect. If using Elasticsearch the Custom preset must be set to use this",
                    "examples": [ true, false ]
                }
            },
            "required": [
                "type"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "ESPlainAuthBasic"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "url": {
                                "type": "string",
                                "format": "uri"
                            },
                            "username": {
                                "type": "string",
                                "minLength": 1
                            },
                            "password": {
                                "type": "string",
                                "minLength": 1
                            }
                        },
                        "required": [
                            "url",
                            "username",
                            "password"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "ESPlainAuthAPI"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "url": {
                                "type": "string",
                                "format": "uri"
                            },
                            "api_key": {
                                "type": "string",
                                "minLength": 1
                            }
                        },
                        "required": [
                            "url",
                            "api_key"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "ESSecretAuthBasic"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "secretName": {
                                "type": "string",
                                "minLength": 1
                            }
                        },
                        "required": [
                            "secretName"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "ESSecretAuthAPI"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "secretName": {
                                "type": "string",
                                "minLength": 1
                            }
                        },
                        "required": [
                            "secretName"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "ESECKRef"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "name": {
                                "type": "string",
                                "minLength": 1
                            },
                            "namespace": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "type": {
                                "const": "Logstash"
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "hosts": {
                                "type": "array"
                            },
                            "loadbalance": {
                                "type": "boolean",
                                "description": "If true and multiple Logstash hosts are configured, the output plugin load balances published events onto all Logstash hosts. If false, the output plugin sends all events to one host (determined at random) and switches to another host if the selected one becomes unresponsive.",
                                "examples": [
                                    true,
                                    false
                                ]
                            },
                            "ttl": {
                                "type": "string",
                                "description": "Time to live for a connection to Logstash after which the connection will be reestablished. This setting is useful when Logstash hosts represent load balancers. Because connections to Logstash hosts are sticky, operating behind load balancers can lead to uneven load distribution across instances. Specify a TTL on the connection to achieve equal connection distribution across instances.",
                                "examples": [
                                    "30s"
                                ]
                            },
                            "slow_start": {
                                "type": "boolean",
                                "description": "If true, only a subset of events in a batch of events is transferred per transaction. The number of events to be sent increases up to bulk_max_size if no error is encountered. On error, the number of events per transaction is reduced again.",
                                "examples": [
                                    false,
                                    true
                                ]
                            },
                            "pipelining": {
                                "type": "integer",
                                "description": "The number of batches to send asynchronously to Logstash while waiting for an ACK from Logstash. The output becomes blocking after the specified number of batches are written. Specify 0 to turn off pipelining.",
                                "examples": [
                                    0,
                                    2
                                ]
                            },
                            "workers": {
                                "type": "integer"
                            },
                            "timeout": {
                                "type": "string"
                            },
                            "queue.mem.flush.timeout": {
                                "type": "string"
                            },
                            "queue.mem.flush.min_events": {
                                "type": "integer"
                            },
                            "queue.mem.events": {
                                "type": "integer"
                            },
                            "max_retries": {
                                "type": "integer"
                            },
                            "compression_level": {
                                "type": "integer"
                            },
                            "bulk_max_size": {
                                "type": "integer"
                            },
                            "backoff.max": {
                                "type": "string"
                            },
                            "backoff.init": {
                                "type": "string"
                            },
                            "allow_older_versions": {
                                "type": "boolean"
                            },
                            "ssl": {
                                "$ref": "#/definitions/SSLConfigClient"
                            }
                        },
                        "required": [
                            "hosts"
                        ]
                    }
                }
            ]
        },
        "SSLConfigClient": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables or disables the SSL configuration.",
                    "examples": [true, false]
                },
                "certificateAuthorities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ValueFrom"
                    },
                    "description": "The list of root certificates for verifications (required). If certificate_authorities is empty or not set, the system keystore is used. If certificate_authorities is self-signed, the host system needs to trust that CA cert as well."
                },
                "certificate": {
                    "type": "object",
                    "$ref": "#/definitions/ValueFrom",
                    "description": "The certificates for mtls verifications(Logstash Only)."
                },
                "key": {
                    "type": "object",
                    "$ref": "#/definitions/ValueFrom",
                    "description": "The key for mtls verifications(Logstash Only)."
                },
                "key_passphrase": {
                    "type": "object",
                    "$ref": "#/definitions/ValueFrom",
                    "description": "The key passphrase for mtls verifications(Logstash Only)."
                },
                "renegotiation": {
                    "type": "string",
                    "description": "Configures the type of TLS renegotiation to support.",
                    "enum": [
                      "never",
                      "once",
                      "freely"
                  ]
                },
                "verificationMode": {
                    "type": "string",
                    "description": "Controls the verification of server certificates.",
                    "default": "none",
                    "enum": [
                      "full",
                      "strict",
                      "certificate",
                      "none"
                  ]
                },
                "client_authentication": {
                    "type": "string",
                    "description": "Configures client authentication.",
                    "enum": [
                      "none",
                      "optional",
                      "required"
                  ]
                },
                "cipher_suites": {
                    "type": "array",
                    "description": "The list of cipher suites to use. The first entry has the highest priority. If this option is omitted, the Go crypto library’s default suites are used (recommended). Note that TLS 1.3 cipher suites are not individually configurable in Go, so they are not included in this list.",
                    "examples": [["ECDHE-ECDSA-AES-128-CBC-SHA", "ECDHE-ECDSA-AES-256-CBC-SHA"]]
                },
                "curve_types": {
                    "type": "array",
                    "description": "The list of curve types for ECDHE (Elliptic Curve Diffie-Hellman ephemeral key exchange).",
                    "examples": [["P-256", "P-384"]]
                },
                "supported_protocols": {
                    "type": "array",
                    "description": "List of allowed SSL/TLS versions. If the SSL/TLS server supports none of the specified versions, the connection will be dropped during or after the handshake. The list of allowed protocol versions include: TLSv1.1, TLSv1.2, and TLSv1.3.",
                    "examples": [["TLSv1.2", "TLSv1.3"]]
                },
                "ca_sha256": {
                    "type": "string",
                    "description": "This configures a certificate pin that you can use to ensure that a specific certificate is part of the verified chain."
                },
                "caTrustedFingerprint": {
                    "type": "string",
                    "description": "A HEX encoded SHA-256 of a CA certificate. If this certificate is present in the chain during the handshake, it will be added to the certificate_authorities list and the handshake will continue normally."
                }
            }
        },
        "KubernetesStreamConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable stream."
                },
                "vars": {
                    "type": "object",
                    "description": "Stream variables."
                }
            },
            "required": [
                "enabled"
            ]
        },
        "KubernetesMetricsConfig": {
            "type": "object",
            "properties": {
                "metrics": {
                    "$ref": "#/definitions/KubernetesStreamConfig"
                }
            }
        },
        "KubernetesStateConfig": {
            "type": "object",
            "properties": {
                "state": {
                    "$ref": "#/definitions/KubernetesStreamConfig"
                }
            }
        },
        "KubernetesMetricsAndStateConfig": {
            "type": "object",
            "properties": {
                "metrics": {
                    "$ref": "#/definitions/KubernetesStreamConfig"
                },
                "state": {
                    "$ref": "#/definitions/KubernetesStreamConfig"
                }
            }
        },
        "CustomIntegrationConfig": {
            "type": "object",
            "description": "Configuration for a single integration.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the integration.",
                    "minLength": 1
                },
                "preset": {
                    "type": "string",
                    "description": "Agent preset that this integration runs on.",
                    "minLength": 1
                },
                "use_output": {
                    "type": "string",
                    "description": "Name of the output to use.",
                    "minLength": 1
                }
            },
            "required": [
                "id",
                "preset",
                "use_output"
            ]
        },
        "AgentImageConfig": {
            "type": "object",
            "description": "Image configuration for the Elastic-Agent.",
            "properties": {
                "repository": {
                    "type": "string",
                    "description": "Docker image repository.",
                    "minLength": 1
                },
                "pullPolicy": {
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent",
                        "Never"
                    ],
                    "description": "Image pull policy."
                },
                "tag": {
                    "type": "string",
                    "description": "Image tag."
                }
            },
            "required": [
                "repository",
                "pullPolicy",
                "tag"
            ]
        },
        "AgentFleetConfig": {
            "type": "object",
            "description": "Elastic-Agent managed configuration.",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Elastic-Agent managed mode.",
                    "default": false
                },
                "url": {
                    "type": "string",
                    "description": "Fleet server URL."
                },
                "token": {
                    "type": "string",
                    "description": "Fleet enrollment token."
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Fleet insecure URL."
                },
                "kibanaHost": {
                    "type": "string",
                    "description": "Kibana host to fallback if enrollment token is not supplied."
                },
                "kibanaUser": {
                    "type": "string",
                    "description": "Kibana username to fallback if enrollment token is not supplied."
                },
                "kibanaPassword": {
                    "type": "string",
                    "description": "Kibana password to fallback if enrollment token is not supplied."
                },
                "preset": {
                    "type": "string",
                    "description": "Agent preset to deploy."
                }
            },
            "required": [
                "enabled"
            ],
            "if": {
                "properties": {
                    "enabled": {
                        "const": true
                    }
                }
            },
            "then": {
                "anyOf": [
                    {
                        "required": [
                            "preset",
                            "url",
                            "token"
                        ],
                        "properties": {
                            "preset": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string",
                                "format": "uri"
                            },
                            "token": {
                                "type": "string",
                                "minLength": 1
                            }
                        }
                    },
                    {
                        "required": [
                            "preset",
                            "url",
                            "kibanaHost",
                            "kibanaUser",
                            "kibanaPassword"
                        ],
                        "properties": {
                            "preset": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string",
                                "format": "uri"
                            },
                            "kibanaHost": {
                                "type": "string",
                                "format": "uri"
                            },
                            "kibanaUser": {
                                "type": "string",
                                "minLength": 1
                            },
                            "kibanaPassword": {
                                "type": "string",
                                "minLength": 1
                            }
                        }
                    }
                ]
            }
        },
        "ValueFrom": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                },
                "valueFromSecret": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "key": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "name",
                        "key"
                    ]
                }
            },
            "allOf": [
                {
                    "if": {
                        "required": ["value"],
                        "properties": {
                            "value": {
                                "type": "string",
                                "minLength": 1
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "valueFromSecret": {
                                "type": "object",
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "maxLength": 0
                                    },
                                    "name": {
                                        "type": "string",
                                        "maxLength": 0
                                    }
                                }
                            }
                        }
                    }
                },
                {
                    "if": {
                        "required": ["valueFromSecret"],
                        "properties": {
                            "valueFromSecret": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "minLength": 1
                                    }
                                }
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "valueFromSecret": {
                                "type": "object",
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "minLength": 1
                                    }
                                }
                            },
                            "value": {
                                "type": "string",
                                "maxLength": 0
                            }
                        }
                    }
                },
                {
                    "if": {
                        "required": ["valueFromSecret"],
                        "properties": {
                            "valueFromSecret": {
                                "type": "object",
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "minLength": 1
                                    }
                                }
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "valueFromSecret": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "minLength": 1
                                    }
                                }
                            },
                            "value": {
                                "type": "string",
                                "maxLength": 0
                            }
                        }
                    }
                }
            ]
        },
        "AgentPreset": {
            "type": "object",
            "description": "Configuration for an Agent preset.",
            "properties": {
                "mode": {
                    "type": "string",
                    "enum": [
                        "deployment",
                        "statefulset",
                        "daemonset"
                    ],
                    "description": "Mode of the Agent preset."
                },
                "replicaCount": {
                    "type": "integer",
                    "description": "Replica count for the preset.",
                    "examples": [
                        1
                    ]
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the deployment.",
                    "examples": [
                        {
                            "app": "elastic-agent"
                        }
                    ]
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the deployment.",
                    "examples": [
                        {
                            "annotationKey": "annotationValue"
                        }
                    ]
                },
                "command": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command for the container.",
                    "examples": [
                        [
                            "/usr/local/bin/elastic-agent"
                        ]
                    ]
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments for the container command.",
                    "examples": [
                        [
                            "run"
                        ]
                    ]
                },
                "otelConfig": {
                    "type": "object",
                    "description": "OpenTelemetry configuration."
                },
                "service": {
                    "type": "object",
                    "description": "Service configuration.",
                    "properties": {
                        "clusterIP": {
                            "type": "string",
                            "description": "The IP address of the service. Automatically assigned unless specified."
                        },
                        "clusterIPs": {
                            "type": "array",
                            "description": "A list of IP addresses assigned to this service, used for dual-stack services.",
                            "items": { "type": "string" }
                        },
                        "type": {
                            "type": "string",
                            "enum": ["ClusterIP", "NodePort", "LoadBalancer"],
                            "description": "Determines how the service is exposed. Defaults to ClusterIP."
                        },
                        "externalIPs": {
                            "type": "array",
                            "description": "A list of external IP addresses for the service to accept traffic on.",
                            "items": { "type": "string" }
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "enum": ["None", "ClientIP"],
                            "description": "Specifies session affinity. Defaults to None."
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "The load balancer IP address, if applicable and supported by the cloud provider."
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "CIDR ranges that allow access to the load balancer.",
                            "items": { "type": "string" }
                        },
                        "externalName": {
                            "type": "string",
                            "description": "The external reference name used by ExternalName services."
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "enum": ["Cluster", "Local"],
                            "description": "Specifies how nodes handle external traffic. Defaults to Cluster."
                        },
                        "healthCheckNodePort": {
                            "type": "integer",
                            "description": "The health check node port for LoadBalancer services with local traffic policy."
                        },
                        "publishNotReadyAddresses": {
                            "type": "boolean",
                            "description": "If true, publishes addresses even if the pods are not ready."
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Configuration for session affinity."
                        },
                        "ipFamilies": {
                            "type": "array",
                            "description": "The IP families (IPv4, IPv6) assigned to the service for dual-stack clusters.",
                            "items": { "type": "string", "enum": ["IPv4", "IPv6"] }
                        },
                        "ipFamilyPolicy": {
                            "type": "string",
                            "enum": ["SingleStack", "PreferDualStack", "RequireDualStack"],
                            "description": "Defines the dual-stack behavior of the service."
                        },
                        "allocateLoadBalancerNodePorts": {
                            "type": "boolean",
                            "description": "If true, allocates NodePorts for LoadBalancer services. Defaults to true."
                        },
                        "loadBalancerClass": {
                            "type": "string",
                            "description": "The class of the load balancer implementation for this service."
                        },
                        "internalTrafficPolicy": {
                            "type": "string",
                            "enum": ["Cluster", "Local"],
                            "description": "Describes how internal traffic is distributed. Defaults to Cluster."
                        },
                        "trafficDistribution": {
                            "type": "string",
                            "description": "Specifies traffic distribution preferences. This is an alpha feature."
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "examples": [
                        {
                            "type": "ClusterIP"
                        }
                    ]
                },
                "ports": {
                    "type": "array",
                    "description": "Port configuration.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the port."
                            },
                            "hostPort": {
                                "type": "integer",
                                "description": "Specifies the port on the node that the container ports is exposed."
                            },
                            "containerPort": {
                                "type": "integer",
                                "description": "The port number on which the service is exposed."
                            },
                            "protocol": {
                                "type": "string",
                                "description": "The protocol used by both the service and container ports. Defaults to TCP."
                            },
                            "hostIP": {
                                "type": "string",
                                "description": "Specifies the host IP to bind the external port to."
                            },
                            "servicePort": {
                                "type": "integer",
                                "description": "Specifies the port that the service should listen on."
                            },
                            "serviceNodePort": {
                                "type": "integer",
                                "description": "The port on each node to expose the service if the type is NodePort."
                            },
                            "appProtocol": {
                                "type": "string",
                                "description": "The application protocol for this port, such as HTTP, HTTPS, or GRPC."
                            },
                            "nodePort": {
                                "type": "integer",
                                "description": "The port on each node to expose the service if the type is NodePort."
                            }
                        },
                        "required": [
                            "containerPort"
                        ]
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity rules for the deployment.",
                    "examples": [
                        {
                            "nodeAffinity": {
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                    "nodeSelectorTerms": [
                                        {
                                            "matchExpressions": [
                                                {
                                                    "key": "kubernetes.io/e2e-az-name",
                                                    "operator": "In",
                                                    "values": [
                                                        "e2e-az1",
                                                        "e2e-az2"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                },
                "initContainers": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Init containers for the deployment.",
                    "examples": [
                        [
                            {
                                "name": "init-container",
                                "image": "busybox",
                                "command": [
                                    "sh",
                                    "-c",
                                    "echo Initializing..."
                                ]
                            }
                        ]
                    ]
                },
                "extraContainers": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Extra containers for the deployment.",
                    "examples": [
                        [
                            {
                                "name": "sidecar-container",
                                "image": "nginx",
                                "ports": [
                                    {
                                        "containerPort": 80
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the deployment.",
                    "examples": [
                        true
                    ],
                    "default": true
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Enable host networking for the deployment.",
                    "examples": [
                        true
                    ]
                },
                "hostPID": {
                    "type": "boolean",
                    "description": "Enable host PID namespace for the deployment.",
                    "examples": [
                        true
                    ]
                },
                "resources": {
                    "type": "object",
                    "description": "Resource limits and requests for the deployment.",
                    "examples": [
                        {
                            "limits": {
                                "cpu": "500m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "250m",
                                "memory": "64Mi"
                            }
                        }
                    ]
                },
                "securityContext": {
                    "type": "object",
                    "description": "Security context for the deployment.",
                    "examples": [
                        {
                            "runAsUser": 1000,
                            "runAsGroup": 3000,
                            "fsGroup": 2000
                        }
                    ]
                },
                "serviceAccount": {
                    "$ref": "#/definitions/AgentPresetServiceAccount"
                },
                "clusterRole": {
                    "$ref": "#/definitions/AgentPresetClusterRole"
                },
                "priorityClass": {
                    "$ref": "#/definitions/AgentPriorityClass"
                },
                "envFrom": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Environment variables for the deployment.",
                    "examples": [
                        [
                            {
                                "configMapRef": {
                                    "name": "my-config"
                                }
                            }
                        ]
                    ]
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Node selector for the deployment.",
                    "examples": [
                        {
                            "disktype": "ssd"
                        }
                    ]
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Tolerations for the deployment.",
                    "examples": [
                        [
                            {
                                "key": "key1",
                                "operator": "Exists",
                                "effect": "NoSchedule"
                            }
                        ]
                    ]
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Topology spread constraints for the deployment.",
                    "examples": [
                        [
                            {
                                "maxSkew": 1,
                                "topologyKey": "kubernetes.io/hostname",
                                "whenUnsatisfiable": "DoNotSchedule",
                                "labelSelector": {
                                    "matchLabels": {
                                        "app": "elastic-agent"
                                    }
                                }
                            }
                        ]
                    ]
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Extra environment variables for the deployment.",
                    "examples": [
                        [
                            {
                                "name": "ENV_VAR_NAME",
                                "value": "value"
                            }
                        ]
                    ]
                },
                "statePersistence": {
                    "type": "string",
                    "enum": [
                        "HostPath",
                        "EmptyDir",
                        "None"
                    ],
                    "description": "Volume type used for Agent state persistence."
                },
                "extraVolumes": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Extra volumes for the deployment.",
                    "examples": [
                        [
                            {
                                "name": "extra-volume",
                                "emptyDir": {}
                            }
                        ]
                    ]
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Extra volume mounts for the deployment.",
                    "examples": [
                        [
                            {
                                "name": "extra-volume",
                                "mountPath": "/mnt/extra"
                            }
                        ]
                    ]
                },
                "agent": {
                    "type": "object",
                    "properties": {
                        "monitoring": {
                            "type": "object",
                            "properties": {
                                "namespace": {
                                    "type": "string"
                                },
                                "use_output": {
                                    "type": "string"
                                },
                                "enabled": {
                                    "type": "boolean"
                                },
                                "logs": {
                                    "type": "boolean"
                                },
                                "metrics": {
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "namespace",
                                "use_output",
                                "enabled",
                                "logs",
                                "metrics"
                            ]
                        }
                    },
                    "examples": [
                        {
                            "monitoring": {
                                "namespace": "elastic-agent",
                                "use_output": "default",
                                "enabled": true,
                                "logs": true,
                                "metrics": true
                            }
                        }
                    ]
                },
                "providers": {
                    "type": "object",
                    "description": "Providers configuration for the deployment.",
                    "properties": {
                        "kubernetes_leaderelection": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "kubernetes": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean"
                                },
                                "node": {
                                    "type": "string"
                                },
                                "scope": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "examples": [
                        {
                            "kubernetes_leaderelection": {
                                "enabled": false
                            },
                            "kubernetes": {
                                "enabled": true,
                                "node": "node-1",
                                "scope": "cluster"
                            }
                        }
                    ]
                }
            },
            "required": [
                "mode",
                "serviceAccount",
                "clusterRole"
            ]
        },
        "AgentPriorityClass": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Create the priority class.",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the priority class to use if create is set to false."
                },
                "value": {
                    "type": "integer",
                    "description": "Value of the priority class."
                },
                "preemptionPolicy": {
                    "type": "string",
                    "enum": [
                        "Never",
                        "PreemptLowerPriority"
                    ],
                    "description": "Preemption policy for the priority class."
                },
                "globalDefault": {
                    "type": "boolean",
                    "description": "Set the priority class as the global default."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the priority class."
                }
            },
            "examples": [
                {
                    "create": true,
                    "value": 1000000,
                    "preemptionPolicy": "Never",
                    "globalDefault": true,
                    "description": "Elastic Agent priority class"
                }
            ],
            "required": [
                "create"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "create": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "value"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "maxLength": 0
                            }
                        }
                    }
                },
                {
                    "if": {
                        "properties": {
                            "create": {
                                "const": false
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "name"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "minLength": 1
                            }
                        }
                    }
                }
            ]
        },
        "AgentPresetClusterRole": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Create the cluster role.",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster role to use if create is set to false."
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for the cluster role if create is set to true."
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Rules for the cluster role to create if create is set to true.",
                    "examples": [
                        [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "pods"
                                ],
                                "verbs": [
                                    "get",
                                    "watch",
                                    "list"
                                ]
                            }
                        ]
                    ]
                }
            },
            "examples": [
                {
                    "create": true,
                    "name": ""
                }
            ],
            "required": [
                "create"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "create": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "name": {
                                "type": "string",
                                "maxLength": 0
                            }
                        }
                    }
                }
            ]
        },
        "AgentPresetServiceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Create the service account.",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account to use if create is set to false."
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for the service account if create is set to true."
                }
            },
            "examples": [
                {
                    "create": true,
                    "name": ""
                }
            ],
            "required": [
                "create"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "create": {
                                "const": true
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "name": {
                                "type": "string",
                                "maxLength": 0
                            }
                        },
                        "required": [
                            "create"
                        ]
                    }
                }
            ]
        },
        "SystemLogsStreamVars": {
            "type": "object",
            "description": "System integration log stream variables.",
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Paths to scan for logs."
                },
                "exclude_files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Files to exclude from logs."
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Processors for the system auth logs stream."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the logs stream."
                },
                "ignore_older": {
                    "type": "string",
                    "description": "If this option is specified, events that are older than the specified amount of time are ignored. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."
                }
            }
        }
    }
}