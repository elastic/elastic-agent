inputs:
    - name: filestream-crowdstrike
      id: filestream-crowdstrike-${kubernetes.hints.container_id}
      type: filestream
      use_output: default
      streams:
        - condition: ${kubernetes.hints.crowdstrike.falcon.enabled} == true or ${kubernetes.hints.crowdstrike.enabled} == true
          data_stream:
            dataset: crowdstrike.falcon
            type: logs
          exclude_files:
            - .gz$
          multiline.match: after
          multiline.max_lines: 5000
          multiline.negate: true
          multiline.pattern: ^{
          multiline.timeout: 10
          parsers:
            - container:
                format: auto
                stream: ${kubernetes.hints.crowdstrike.falcon.stream|'all'}
          paths:
            - /var/log/containers/*${kubernetes.hints.container_id}.log
          prospector:
            scanner:
                symlinks: true
          tags:
            - forwarded
            - crowdstrike-falcon
        - condition: ${kubernetes.hints.crowdstrike.fdr.enabled} == true or ${kubernetes.hints.crowdstrike.enabled} == true
          data_stream:
            dataset: crowdstrike.fdr
            type: logs
          exclude_files:
            - .gz$
          parsers:
            - container:
                format: auto
                stream: ${kubernetes.hints.crowdstrike.fdr.stream|'all'}
          paths:
            - /var/log/containers/*${kubernetes.hints.container_id}.log
          processors:
            - add_locale: null
          prospector:
            scanner:
                symlinks: true
          tags:
            - forwarded
            - crowdstrike-fdr
      data_stream.namespace: default
    - name: aws-s3-crowdstrike
      id: aws-s3-crowdstrike-${kubernetes.hints.container_id}
      type: aws-s3
      use_output: default
      streams:
        - condition: ${kubernetes.hints.crowdstrike.fdr.enabled} == true or ${kubernetes.hints.crowdstrike.enabled} == true
          data_stream:
            dataset: crowdstrike.fdr
            type: logs
          queue_url: null
          sqs.notification_parsing_script.source: |
            function parse(n) {
              var m = JSON.parse(n);
              var evts = [];
              var files = m.files;
              var bucket = m.bucket;
              if (!Array.isArray(files) || (files.length == 0) || bucket == null || bucket == "") {
                return evts;
              }
              files.forEach(function(f){
                var evt = new S3EventV2();
                evt.SetS3BucketName(bucket);
                evt.SetS3ObjectKey(f.path);
                evts.push(evt);
              });
              return evts;
            }
          tags:
            - forwarded
            - crowdstrike-fdr
      data_stream.namespace: default
