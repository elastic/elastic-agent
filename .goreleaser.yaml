# Make sure to check the documentation at https://goreleaser.com
before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
builds:
  - id: linux-amd64
    binary: '{{ .ProjectName }}-{{ .Os }}-{{ .Arch }}'
    goos:
      - linux
    goarch:
      - amd64
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    no_unique_dist_dir: true
dist: build1/golang-crossbuild
changelog:
  skip: true
nfpms:
  # note that this is an array of nfpm configs
  - id: linux-amd-deb
    file_name_template: "{{ .ConventionalFileName }}"
    builds:
      - linux-amd64
    replacements:
      amd64: 64-bit
      386: 32-bit
      darwin: macOS
      linux: Tux
    vendor: Elastic B.V.
    homepage: https://elastic.co/
    description: |-
      Elastic agent works.
    license: Elastic License
    formats:
      - deb
      - rpm
    # Template to the path that the binaries should be installed.
    # Defaults to `/usr/bin`.
    bindir: /usr/bin
    # Version Epoch.
    # Default is extracted from `version` if it is semver compatible.
    epoch: 2
    # Section.
    section: default
    # Contents to add to the package.
    # GoReleaser will automatically add the binaries.
    contents:
      # Basic file that applies to all packagers
      - src: LICENSE.txt
        dst: /usr/share/{{ .ProjectName }}/LICENSE.txt
        file_info:
          mode: 0644
      - src: NOTICE.txt
        dst: /usr/share/{{ .ProjectName }}/NOTICE.txt
        file_info:
          mode: 0644
      # Simple config file
      - src: elastic-agent.yml
        dst: /etc/{{ .ProjectName }}/elastic-agent.yml
        type: config
        file_info:
          mode: 0600
      - src: elastic-agent.reference.yml
        dst: /etc/{{ .ProjectName }}/elastic-agent.reference.yml
        file_info:
          mode: 0644
      - src: dev-tools/packaging/templates/common/README.md.tmpl
        dst: /usr/share/{{.BeatName}}/README.md.tmpl
        type: "template"
        file_info:
          mode: 0644
      - src: elastic-agent.reference.yml
        dst: /usr/bin/{{ .ProjectName }}
        file_info:
          mode: 0644
      # The src and dst attributes also supports name templates
      - src: /dev-tools/packaging/templates/linux/beatname.sh.tmpl
        dst: /usr/bin/{{ .ProjectName }}/beatname.sh.tmpl
        type: "template"
        file_info:
          mode: 0755
      - src: /dev-tools/packaging/templates/linux/systemd.unit.tmpl
        dst: lib/systemd/system/{{ .ProjectName }}.service/systemd.unit.tmpl
        type: "template"
        file_info:
          mode: 0644
      - src: /dev-tools/packaging/templates/{{.PackageType}}/init.sh.tmpl
        dst: /etc/init.d/{{ .ProjectName }}/init.sh.tmpl
        type: "template"
        file_info:
          mode: 0755
    # Scripts to execute during the installation of the package.
    # Keys are the possible targets during the installation process
    # Values are the paths to the scripts which will be executed
    scripts:
      postinstall: '/dev-tools/packaging/files/linux/systemd-daemon-reload.sh'
    # Custom configuration applied only to the RPM packager.
    rpm:
      # RPM specific scripts.
      signature:
        # Template to the PGP secret key file path (can also be ASCII-armored).
        # The passphrase is taken from the environment variable
        # `$NFPM_ID_RPM_PASSPHRASE` with a fallback to `$NFPM_ID_PASSPHRASE`,
        # where ID is the id of the current nfpm config.
        # The id will be transformed to uppercase.
        # E.g. If your nfpm id is 'default' then the rpm-specific passphrase
        # should be set as `$NFPM_DEFAULT_RPM_PASSPHRASE`
        key_file: '{{ .Env.GPG_KEY_PATH }}'

    # Custom configuration applied only to the Deb packager.
    deb:
      scripts:
        # Deb templates file, when using debconf.
        templates: templates
      # The package is signed if a key_file is set
      signature:
        # Template to the PGP secret key file path (can also be ASCII-armored).
        # The passphrase is taken from the environment variable
        # `$NFPM_ID_DEB_PASSPHRASE` with a fallback to `$NFPM_ID_PASSPHRASE`,
        # where ID is the id of the current nfpm config.
        # The id will be transformed to uppercase.
        # E.g. If your nfpm id is 'default' then the deb-specific passphrase
        # should be set as `$NFPM_DEFAULT_DEB_PASSPHRASE`
        key_file: '{{ .Env.GPG_KEY_PATH }}'

