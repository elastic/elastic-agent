// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

package licenses

import (
	"bytes"
	"flag"
	"go/format"
	"os"
	"text/template"
)

var Template = template.Must(template.New("licenseheader").Parse(`
{{ $t := "` + "`" + `" }}
{{ .License }}

// Code generated by beats/dev-tools/licenses/license_generate.go - DO NOT EDIT.

package license

import "fmt"

{{ range $key, $value := .Licenses }}
var {{ $key }} =  {{$t}}
{{ $value }}{{$t}}
{{ end -}}

func Find(name string) (string, error) {
	switch name {
{{ range $key, $value := .Licenses }}
	case "{{ $key }}":
		return {{ $key }}, nil
{{- end -}}
	}
	return "", fmt.Errorf("unknown license: %s", name)
}
`))

var output string

type data struct {
	License  string
	Licenses map[string]string
}

func init() {
	flag.StringVar(&output, "out", "license_header.go", "output file")
}

func main() {
	Headers := make(map[string]string)
	content, err := os.ReadFile("ELASTIC-LICENSE-2.0-header.txt")
	if err != nil {
		panic("could not read Elastic License 2.0 license.")
	}
	Headers["Elasticv2"] = string(content)

	var buf bytes.Buffer
	Template.Execute(&buf, data{
		Licenses: Headers,
	})

	bs, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}

	if output == "-" {
		os.Stdout.Write(bs)
	} else {
		os.WriteFile(output, bs, 0640)
	}
}
