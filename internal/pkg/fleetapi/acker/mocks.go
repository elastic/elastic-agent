// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package acker

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/elastic/elastic-agent/internal/pkg/fleetapi"
)

// NewMockAcker creates a new instance of MockAcker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAcker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAcker {
	mock := &MockAcker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAcker is an autogenerated mock type for the Acker type
type MockAcker struct {
	mock.Mock
}

type MockAcker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAcker) EXPECT() *MockAcker_Expecter {
	return &MockAcker_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function for the type MockAcker
func (_mock *MockAcker) Ack(ctx context.Context, action fleetapi.Action) error {
	ret := _mock.Called(ctx, action)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, fleetapi.Action) error); ok {
		r0 = returnFunc(ctx, action)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAcker_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockAcker_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - ctx context.Context
//   - action fleetapi.Action
func (_e *MockAcker_Expecter) Ack(ctx interface{}, action interface{}) *MockAcker_Ack_Call {
	return &MockAcker_Ack_Call{Call: _e.mock.On("Ack", ctx, action)}
}

func (_c *MockAcker_Ack_Call) Run(run func(ctx context.Context, action fleetapi.Action)) *MockAcker_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 fleetapi.Action
		if args[1] != nil {
			arg1 = args[1].(fleetapi.Action)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAcker_Ack_Call) Return(err error) *MockAcker_Ack_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAcker_Ack_Call) RunAndReturn(run func(ctx context.Context, action fleetapi.Action) error) *MockAcker_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockAcker
func (_mock *MockAcker) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAcker_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockAcker_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAcker_Expecter) Commit(ctx interface{}) *MockAcker_Commit_Call {
	return &MockAcker_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockAcker_Commit_Call) Run(run func(ctx context.Context)) *MockAcker_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAcker_Commit_Call) Return(err error) *MockAcker_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAcker_Commit_Call) RunAndReturn(run func(ctx context.Context) error) *MockAcker_Commit_Call {
	_c.Call.Return(run)
	return _c
}
