// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	"context"
	"io"
	"net/http"
	"net/url"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSender creates a new instance of MockSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSender {
	mock := &MockSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSender is an autogenerated mock type for the Sender type
type MockSender struct {
	mock.Mock
}

type MockSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSender) EXPECT() *MockSender_Expecter {
	return &MockSender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockSender
func (_mock *MockSender) Send(ctx context.Context, method string, path string, params url.Values, headers http.Header, body io.Reader) (*http.Response, error) {
	ret := _mock.Called(ctx, method, path, params, headers, body)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, url.Values, http.Header, io.Reader) (*http.Response, error)); ok {
		return returnFunc(ctx, method, path, params, headers, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, url.Values, http.Header, io.Reader) *http.Response); ok {
		r0 = returnFunc(ctx, method, path, params, headers, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, url.Values, http.Header, io.Reader) error); ok {
		r1 = returnFunc(ctx, method, path, params, headers, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - path string
//   - params url.Values
//   - headers http.Header
//   - body io.Reader
func (_e *MockSender_Expecter) Send(ctx interface{}, method interface{}, path interface{}, params interface{}, headers interface{}, body interface{}) *MockSender_Send_Call {
	return &MockSender_Send_Call{Call: _e.mock.On("Send", ctx, method, path, params, headers, body)}
}

func (_c *MockSender_Send_Call) Run(run func(ctx context.Context, method string, path string, params url.Values, headers http.Header, body io.Reader)) *MockSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 url.Values
		if args[3] != nil {
			arg3 = args[3].(url.Values)
		}
		var arg4 http.Header
		if args[4] != nil {
			arg4 = args[4].(http.Header)
		}
		var arg5 io.Reader
		if args[5] != nil {
			arg5 = args[5].(io.Reader)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockSender_Send_Call) Return(response *http.Response, err error) *MockSender_Send_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockSender_Send_Call) RunAndReturn(run func(ctx context.Context, method string, path string, params url.Values, headers http.Header, body io.Reader) (*http.Response, error)) *MockSender_Send_Call {
	_c.Call.Return(run)
	return _c
}

// URI provides a mock function for the type MockSender
func (_mock *MockSender) URI() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for URI")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSender_URI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URI'
type MockSender_URI_Call struct {
	*mock.Call
}

// URI is a helper method to define mock.On call
func (_e *MockSender_Expecter) URI() *MockSender_URI_Call {
	return &MockSender_URI_Call{Call: _e.mock.On("URI")}
}

func (_c *MockSender_URI_Call) Run(run func()) *MockSender_URI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSender_URI_Call) Return(s string) *MockSender_URI_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSender_URI_Call) RunAndReturn(run func() string) *MockSender_URI_Call {
	_c.Call.Return(run)
	return _c
}
