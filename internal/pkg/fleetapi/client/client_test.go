// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

package client

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/elastic/elastic-agent/internal/pkg/config"
	"github.com/elastic/elastic-agent/internal/pkg/remote"
	"github.com/elastic/elastic-agent/pkg/core/logger/loggertest"
)

func TestHTTPClient(t *testing.T) {
	ctx := context.Background()

	t.Run("API Key is valid", withServer(
		func(t *testing.T) *http.ServeMux {
			msg := `{ message: "hello" }`
			mux := http.NewServeMux()
			mux.HandleFunc("/echo-hello", authHandler(func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusOK)
				fmt.Fprint(w, msg)
			}, "abc123"))
			return mux
		}, func(t *testing.T, host string) {
			cfg := config.MustNewConfigFrom(map[string]interface{}{
				"host": host,
			})

			client, err := remote.NewWithRawConfig(nil, cfg, func(wrapped http.RoundTripper) (http.RoundTripper, error) {
				return NewFleetAuthRoundTripper(wrapped, "abc123")
			})

			require.NoError(t, err)
			resp, err := client.Send(ctx, "GET", "/echo-hello", nil, nil, nil)
			require.NoError(t, err)

			body, err := io.ReadAll(resp.Body)
			require.NoError(t, err)
			defer resp.Body.Close()
			assert.Equal(t, `{ message: "hello" }`, string(body))
		},
	))

	t.Run("API Key is not valid", withServer(
		func(t *testing.T) *http.ServeMux {
			msg := `{ message: "hello" }`
			mux := http.NewServeMux()
			mux.HandleFunc("/echo-hello", authHandler(func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusOK)
				fmt.Fprint(w, msg)
			}, "secret"))
			return mux
		}, func(t *testing.T, host string) {
			cfg := config.MustNewConfigFrom(map[string]interface{}{
				"host": host,
			})

			client, err := remote.NewWithRawConfig(nil, cfg, func(wrapped http.RoundTripper) (http.RoundTripper, error) {
				return NewFleetAuthRoundTripper(wrapped, "abc123")
			})

			require.NoError(t, err)
			resp, err := client.Send(ctx, "GET", "/echo-hello", nil, nil, nil)
			if err == nil {
				defer resp.Body.Close()
			}
			require.Error(t, err)
		},
	))

	t.Run("Elastic Agent User-Agent string", withServer(
		func(t *testing.T) *http.ServeMux {
			msg := `{ message: "hello" }`
			mux := http.NewServeMux()
			mux.HandleFunc("/echo-hello", func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusOK)
				fmt.Fprint(w, msg)
				require.Equal(t, r.Header.Get("User-Agent"), "Elastic Agent v8.0.0")
			})
			return mux
		}, func(t *testing.T, host string) {
			cfg := config.MustNewConfigFrom(map[string]interface{}{
				"host": host,
			})

			client, err := remote.NewWithRawConfig(nil, cfg, func(wrapped http.RoundTripper) (http.RoundTripper, error) {
				return NewFleetUserAgentRoundTripper(wrapped, "8.0.0"), nil
			})

			require.NoError(t, err)
			resp, err := client.Send(ctx, "GET", "/echo-hello", nil, nil, nil)
			require.NoError(t, err)

			body, err := io.ReadAll(resp.Body)
			require.NoError(t, err)
			defer resp.Body.Close()
			assert.Equal(t, `{ message: "hello" }`, string(body))
		},
	))

	t.Run("Fleet endpoint is not responding", func(t *testing.T) {
		cfg := config.MustNewConfigFrom(map[string]interface{}{
			"host": "127.0.0.0:7278",
		})

		timeoutCtx, cancel := context.WithTimeout(ctx, 3*time.Second)
		defer cancel()
		client, err := remote.NewWithRawConfig(nil, cfg, func(wrapped http.RoundTripper) (http.RoundTripper, error) {
			return NewFleetAuthRoundTripper(wrapped, "abc123")
		})
		require.NoError(t, err)

		resp, err := client.Send(timeoutCtx, "GET", "/echo-hello", nil, nil, nil)
		if err == nil {
			defer resp.Body.Close()
		}
		require.Error(t, err)
	})
}

// NOTE(ph): Usually I would be against testing private methods as much as possible but in this
// case since we might deal with different format or error I make sense to test this method in
// isolation.
func TestExtract(t *testing.T) {
	// The error before is returned when an exception or an internal occur in fleet-server, they
	// are not only generated by the Fleet app.
	t.Run("standard high level fleet-server errors", func(t *testing.T) {
		err := ExtractError(strings.NewReader(`{ "statusCode": 500, "Internal Server Error"}`))
		assert.True(t, strings.Index(err.Error(), "500") > 0)
		assert.True(t, strings.Index(err.Error(), "Internal Server Error") > 0)
	})

	t.Run("proxy or non json response", func(t *testing.T) {
		err := ExtractError(strings.NewReader("Bad Request"))
		assert.True(t, strings.Index(err.Error(), "Bad Request") > 0)
	})

	t.Run("Fleet generated errors", func(t *testing.T) {
		err := ExtractError(strings.NewReader(`{"statusCode":400,"error":"Bad Request","message":"child \"metadata\" fails because [\"cal\" is not allowed]","validation":{"source":"payload","keys":["metadata.cal"]}}`))
		assert.True(t, strings.Index(err.Error(), "400") > 0)
		assert.True(t, strings.Index(err.Error(), "Bad Request") > 0)
		assert.True(t, strings.Index(err.Error(), "fails because") > 0)
	})
}

func TestElasticApiVersion(t *testing.T) {
	t.Run("verify that Elastic-Api-Version header is present", func(t *testing.T) {
		ctx, cancel := context.WithCancel(context.Background())
		defer cancel()

		mux := http.NewServeMux()
		mux.HandleFunc("/", func(writer http.ResponseWriter, request *http.Request) {
			assert.Equal(t, request.Header.Get(elasticApiVersionHeaderKey), defaultFleetApiVersion)
			writer.WriteHeader(http.StatusOK)
		})

		ts := httptest.NewServer(mux)
		defer ts.Close()

		testLogger, _ := loggertest.New("testElasticApiVersion")

		clt, err := NewWithConfig(testLogger, remote.Config{
			Hosts: []string{ts.URL},
		})
		require.NoError(t, err)

		resp, err := clt.Send(ctx, http.MethodGet, "/", nil, nil, nil)
		if assert.NoError(t, err) {
			defer resp.Body.Close()
		}
	})

	t.Run("verify that we don't log a generic 400 status as a downgrade request", func(t *testing.T) {
		ctx, cancel := context.WithCancel(context.Background())
		defer cancel()

		mux := http.NewServeMux()
		mux.HandleFunc("/genericbadrequest", func(writer http.ResponseWriter, request *http.Request) {
			assert.Equal(t, request.Header.Get(elasticApiVersionHeaderKey), defaultFleetApiVersion)
			// request return a 400 with the defaultFleetApiVersion (just testing that we don't log that as a downgrade request)
			writer.Header().Add(elasticApiVersionHeaderKey, defaultFleetApiVersion)
			writer.WriteHeader(http.StatusBadRequest)
		})

		ts := httptest.NewServer(mux)
		defer ts.Close()

		testLogger, obsLogs := loggertest.New("testElasticApiVersion")

		clt, err := NewWithConfig(testLogger, remote.Config{
			Hosts: []string{ts.URL},
		})
		require.NoError(t, err)

		resp, err := clt.Send(ctx, http.MethodGet, "/genericbadrequest", nil, nil, nil)
		if assert.NoError(t, err) {
			defer resp.Body.Close()
		}
		logs := obsLogs.FilterMessageSnippet("fleet requested a different api version").All()
		t.Logf("retrieved logs: %v", logs)
		assert.Empty(t, logs, "downgrade response should not be logged when the fleet api version is the same as the request")
	})

	t.Run("verify that we log a downgrade request", func(t *testing.T) {
		ctx, cancel := context.WithCancel(context.Background())
		defer cancel()

		mux := http.NewServeMux()
		mux.HandleFunc("/downgrade", func(writer http.ResponseWriter, request *http.Request) {
			assert.Equal(t, request.Header.Get(elasticApiVersionHeaderKey), defaultFleetApiVersion)
			// request to downgrade to a completely fictitious version (just testing that we get a log for that)
			writer.Header().Add(elasticApiVersionHeaderKey, request.URL.Query().Get("version"))
			writer.WriteHeader(http.StatusBadRequest)
		})

		ts := httptest.NewServer(mux)
		defer ts.Close()

		testLogger, obsLogs := loggertest.New("testElasticApiVersion")

		clt, err := NewWithConfig(testLogger, remote.Config{
			Hosts: []string{ts.URL},
		})
		require.NoError(t, err)

		resp, err := clt.Send(ctx, http.MethodGet, "/downgrade", map[string][]string{"version": {"2020-01-01"}}, nil, nil)
		if assert.NoError(t, err) {
			defer resp.Body.Close()
		}
		logs := obsLogs.FilterMessageSnippet("fleet requested a different api version \"2020-01-01\"").All()
		t.Logf("retrieved logs: %v", logs)
		assert.NotEmptyf(t, logs, "downgrade response was not logged")
	})

	t.Run("verify that we log an incoming warning", func(t *testing.T) {
		ctx, cancel := context.WithCancel(context.Background())
		defer cancel()

		mux := http.NewServeMux()
		mux.HandleFunc("/warning", func(writer http.ResponseWriter, request *http.Request) {
			assert.Equal(t, request.Header.Get(elasticApiVersionHeaderKey), defaultFleetApiVersion)
			// send back a warning simulating an unsupported api version
			writer.Header().Add("Warning", request.URL.Query().Get("warning_msg"))
			writer.WriteHeader(http.StatusBadRequest)
		})

		ts := httptest.NewServer(mux)
		defer ts.Close()

		testLogger, obsLogs := loggertest.New("testElasticApiVersion")

		clt, err := NewWithConfig(testLogger, remote.Config{
			Hosts: []string{ts.URL},
		})
		require.NoError(t, err)

		warningText := "API version is no longer supported. Upgrade immediately!"
		resp, err := clt.Send(ctx, http.MethodGet, "/warning", map[string][]string{"warning_msg": {warningText}}, nil, nil)
		if assert.NoError(t, err) {
			defer resp.Body.Close()
		}
		logs := obsLogs.FilterMessageSnippet("API version is no longer supported. Upgrade immediately!").All()
		t.Logf("retrieved logs: %v", logs)
		assert.NotEmptyf(t, logs, "warning was not logged")
	})
}
