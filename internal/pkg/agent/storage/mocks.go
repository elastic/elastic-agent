// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockStorage
func (_mock *MockStorage) Exists() (bool, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (bool, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockStorage_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Exists() *MockStorage_Exists_Call {
	return &MockStorage_Exists_Call{Call: _e.mock.On("Exists")}
}

func (_c *MockStorage_Exists_Call) Run(run func()) *MockStorage_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Exists_Call) Return(b bool, err error) *MockStorage_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockStorage_Exists_Call) RunAndReturn(run func() (bool, error)) *MockStorage_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function for the type MockStorage
func (_mock *MockStorage) Load() (io.ReadCloser, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (io.ReadCloser, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockStorage_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Load() *MockStorage_Load_Call {
	return &MockStorage_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *MockStorage_Load_Call) Run(run func()) *MockStorage_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Load_Call) Return(readCloser io.ReadCloser, err error) *MockStorage_Load_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockStorage_Load_Call) RunAndReturn(run func() (io.ReadCloser, error)) *MockStorage_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockStorage
func (_mock *MockStorage) Save(reader io.Reader) error {
	ret := _mock.Called(reader)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = returnFunc(reader)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockStorage_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - reader io.Reader
func (_e *MockStorage_Expecter) Save(reader interface{}) *MockStorage_Save_Call {
	return &MockStorage_Save_Call{Call: _e.mock.On("Save", reader)}
}

func (_c *MockStorage_Save_Call) Run(run func(reader io.Reader)) *MockStorage_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Reader
		if args[0] != nil {
			arg0 = args[0].(io.Reader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_Save_Call) Return(err error) *MockStorage_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Save_Call) RunAndReturn(run func(reader io.Reader) error) *MockStorage_Save_Call {
	_c.Call.Return(run)
	return _c
}
