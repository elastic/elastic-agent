// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package cmd

import (
	context "context"

	client "github.com/elastic/elastic-agent/pkg/control/v2/client"

	logp "github.com/elastic/elastic-agent-libs/logp"

	mock "github.com/stretchr/testify/mock"
)

// mockInstallationModifier is an autogenerated mock type for the installationModifier type
type mockInstallationModifier struct {
	mock.Mock
}

type mockInstallationModifier_Expecter struct {
	mock *mock.Mock
}

func (_m *mockInstallationModifier) EXPECT() *mockInstallationModifier_Expecter {
	return &mockInstallationModifier_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields: log, topDirPath, currentVersionedHome, currentHash, removeMarker, keepLogs
func (_m *mockInstallationModifier) Cleanup(log *logp.Logger, topDirPath string, currentVersionedHome string, currentHash string, removeMarker bool, keepLogs bool) error {
	ret := _m.Called(log, topDirPath, currentVersionedHome, currentHash, removeMarker, keepLogs)

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*logp.Logger, string, string, string, bool, bool) error); ok {
		r0 = rf(log, topDirPath, currentVersionedHome, currentHash, removeMarker, keepLogs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockInstallationModifier_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type mockInstallationModifier_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - log *logp.Logger
//   - topDirPath string
//   - currentVersionedHome string
//   - currentHash string
//   - removeMarker bool
//   - keepLogs bool
func (_e *mockInstallationModifier_Expecter) Cleanup(log interface{}, topDirPath interface{}, currentVersionedHome interface{}, currentHash interface{}, removeMarker interface{}, keepLogs interface{}) *mockInstallationModifier_Cleanup_Call {
	return &mockInstallationModifier_Cleanup_Call{Call: _e.mock.On("Cleanup", log, topDirPath, currentVersionedHome, currentHash, removeMarker, keepLogs)}
}

func (_c *mockInstallationModifier_Cleanup_Call) Run(run func(log *logp.Logger, topDirPath string, currentVersionedHome string, currentHash string, removeMarker bool, keepLogs bool)) *mockInstallationModifier_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*logp.Logger), args[1].(string), args[2].(string), args[3].(string), args[4].(bool), args[5].(bool))
	})
	return _c
}

func (_c *mockInstallationModifier_Cleanup_Call) Return(_a0 error) *mockInstallationModifier_Cleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockInstallationModifier_Cleanup_Call) RunAndReturn(run func(*logp.Logger, string, string, string, bool, bool) error) *mockInstallationModifier_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx, log, c, topDirPath, prevVersionedHome, prevHash, preRestart
func (_m *mockInstallationModifier) Rollback(ctx context.Context, log *logp.Logger, c client.Client, topDirPath string, prevVersionedHome string, prevHash string, preRestart rollbackHook) error {
	ret := _m.Called(ctx, log, c, topDirPath, prevVersionedHome, prevHash, preRestart)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logp.Logger, client.Client, string, string, string, rollbackHook) error); ok {
		r0 = rf(ctx, log, c, topDirPath, prevVersionedHome, prevHash, preRestart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockInstallationModifier_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type mockInstallationModifier_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
//   - log *logp.Logger
//   - c client.Client
//   - topDirPath string
//   - prevVersionedHome string
//   - prevHash string
//   - preRestart rollbackHook
func (_e *mockInstallationModifier_Expecter) Rollback(ctx interface{}, log interface{}, c interface{}, topDirPath interface{}, prevVersionedHome interface{}, prevHash interface{}, preRestart interface{}) *mockInstallationModifier_Rollback_Call {
	return &mockInstallationModifier_Rollback_Call{Call: _e.mock.On("Rollback", ctx, log, c, topDirPath, prevVersionedHome, prevHash, preRestart)}
}

func (_c *mockInstallationModifier_Rollback_Call) Run(run func(ctx context.Context, log *logp.Logger, c client.Client, topDirPath string, prevVersionedHome string, prevHash string, preRestart rollbackHook)) *mockInstallationModifier_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*logp.Logger), args[2].(client.Client), args[3].(string), args[4].(string), args[5].(string), args[6].(rollbackHook))
	})
	return _c
}

func (_c *mockInstallationModifier_Rollback_Call) Return(_a0 error) *mockInstallationModifier_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockInstallationModifier_Rollback_Call) RunAndReturn(run func(context.Context, *logp.Logger, client.Client, string, string, string, rollbackHook) error) *mockInstallationModifier_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// newMockInstallationModifier creates a new instance of mockInstallationModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockInstallationModifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockInstallationModifier {
	mock := &mockInstallationModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
