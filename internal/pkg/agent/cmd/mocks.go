// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cmd

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"

	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade"
	"github.com/elastic/elastic-agent/pkg/control/v2/client"
	"github.com/elastic/elastic-agent/pkg/core/logger"
)

// newMockAgentWatcher creates a new instance of mockAgentWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAgentWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAgentWatcher {
	mock := &mockAgentWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockAgentWatcher is an autogenerated mock type for the agentWatcher type
type mockAgentWatcher struct {
	mock.Mock
}

type mockAgentWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAgentWatcher) EXPECT() *mockAgentWatcher_Expecter {
	return &mockAgentWatcher_Expecter{mock: &_m.Mock}
}

// Watch provides a mock function for the type mockAgentWatcher
func (_mock *mockAgentWatcher) Watch(ctx context.Context, tilGrace time.Duration, errorCheckInterval time.Duration, log *logp.Logger) error {
	ret := _mock.Called(ctx, tilGrace, errorCheckInterval, log)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration, time.Duration, *logp.Logger) error); ok {
		r0 = returnFunc(ctx, tilGrace, errorCheckInterval, log)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockAgentWatcher_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type mockAgentWatcher_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - tilGrace time.Duration
//   - errorCheckInterval time.Duration
//   - log *logp.Logger
func (_e *mockAgentWatcher_Expecter) Watch(ctx interface{}, tilGrace interface{}, errorCheckInterval interface{}, log interface{}) *mockAgentWatcher_Watch_Call {
	return &mockAgentWatcher_Watch_Call{Call: _e.mock.On("Watch", ctx, tilGrace, errorCheckInterval, log)}
}

func (_c *mockAgentWatcher_Watch_Call) Run(run func(ctx context.Context, tilGrace time.Duration, errorCheckInterval time.Duration, log *logp.Logger)) *mockAgentWatcher_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		var arg3 *logp.Logger
		if args[3] != nil {
			arg3 = args[3].(*logp.Logger)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mockAgentWatcher_Watch_Call) Return(err error) *mockAgentWatcher_Watch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockAgentWatcher_Watch_Call) RunAndReturn(run func(ctx context.Context, tilGrace time.Duration, errorCheckInterval time.Duration, log *logp.Logger) error) *mockAgentWatcher_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// newMockInstallationModifier creates a new instance of mockInstallationModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockInstallationModifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockInstallationModifier {
	mock := &mockInstallationModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockInstallationModifier is an autogenerated mock type for the installationModifier type
type mockInstallationModifier struct {
	mock.Mock
}

type mockInstallationModifier_Expecter struct {
	mock *mock.Mock
}

func (_m *mockInstallationModifier) EXPECT() *mockInstallationModifier_Expecter {
	return &mockInstallationModifier_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function for the type mockInstallationModifier
func (_mock *mockInstallationModifier) Cleanup(log *logger.Logger, topDirPath string, currentVersionedHome string, currentHash string, removeMarker bool, keepLogs bool) error {
	ret := _mock.Called(log, topDirPath, currentVersionedHome, currentHash, removeMarker, keepLogs)

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*logger.Logger, string, string, string, bool, bool) error); ok {
		r0 = returnFunc(log, topDirPath, currentVersionedHome, currentHash, removeMarker, keepLogs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockInstallationModifier_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type mockInstallationModifier_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - log *logger.Logger
//   - topDirPath string
//   - currentVersionedHome string
//   - currentHash string
//   - removeMarker bool
//   - keepLogs bool
func (_e *mockInstallationModifier_Expecter) Cleanup(log interface{}, topDirPath interface{}, currentVersionedHome interface{}, currentHash interface{}, removeMarker interface{}, keepLogs interface{}) *mockInstallationModifier_Cleanup_Call {
	return &mockInstallationModifier_Cleanup_Call{Call: _e.mock.On("Cleanup", log, topDirPath, currentVersionedHome, currentHash, removeMarker, keepLogs)}
}

func (_c *mockInstallationModifier_Cleanup_Call) Run(run func(log *logger.Logger, topDirPath string, currentVersionedHome string, currentHash string, removeMarker bool, keepLogs bool)) *mockInstallationModifier_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *logger.Logger
		if args[0] != nil {
			arg0 = args[0].(*logger.Logger)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		var arg5 bool
		if args[5] != nil {
			arg5 = args[5].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *mockInstallationModifier_Cleanup_Call) Return(err error) *mockInstallationModifier_Cleanup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockInstallationModifier_Cleanup_Call) RunAndReturn(run func(log *logger.Logger, topDirPath string, currentVersionedHome string, currentHash string, removeMarker bool, keepLogs bool) error) *mockInstallationModifier_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type mockInstallationModifier
func (_mock *mockInstallationModifier) Rollback(ctx context.Context, log *logger.Logger, c client.Client, topDirPath string, prevVersionedHome string, prevHash string, opts ...upgrade.RollbackOption) error {
	// upgrade.RollbackOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, log, c, topDirPath, prevVersionedHome, prevHash)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *logger.Logger, client.Client, string, string, string, ...upgrade.RollbackOption) error); ok {
		r0 = returnFunc(ctx, log, c, topDirPath, prevVersionedHome, prevHash, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockInstallationModifier_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type mockInstallationModifier_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
//   - log *logger.Logger
//   - c client.Client
//   - topDirPath string
//   - prevVersionedHome string
//   - prevHash string
//   - opts ...upgrade.RollbackOption
func (_e *mockInstallationModifier_Expecter) Rollback(ctx interface{}, log interface{}, c interface{}, topDirPath interface{}, prevVersionedHome interface{}, prevHash interface{}, opts ...interface{}) *mockInstallationModifier_Rollback_Call {
	return &mockInstallationModifier_Rollback_Call{Call: _e.mock.On("Rollback",
		append([]interface{}{ctx, log, c, topDirPath, prevVersionedHome, prevHash}, opts...)...)}
}

func (_c *mockInstallationModifier_Rollback_Call) Run(run func(ctx context.Context, log *logger.Logger, c client.Client, topDirPath string, prevVersionedHome string, prevHash string, opts ...upgrade.RollbackOption)) *mockInstallationModifier_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *logger.Logger
		if args[1] != nil {
			arg1 = args[1].(*logger.Logger)
		}
		var arg2 client.Client
		if args[2] != nil {
			arg2 = args[2].(client.Client)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 []upgrade.RollbackOption
		variadicArgs := make([]upgrade.RollbackOption, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(upgrade.RollbackOption)
			}
		}
		arg6 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6...,
		)
	})
	return _c
}

func (_c *mockInstallationModifier_Rollback_Call) Return(err error) *mockInstallationModifier_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockInstallationModifier_Rollback_Call) RunAndReturn(run func(ctx context.Context, log *logger.Logger, c client.Client, topDirPath string, prevVersionedHome string, prevHash string, opts ...upgrade.RollbackOption) error) *mockInstallationModifier_Rollback_Call {
	_c.Call.Return(run)
	return _c
}
