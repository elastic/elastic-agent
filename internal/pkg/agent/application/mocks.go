// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package application

import (
	mock "github.com/stretchr/testify/mock"

	"github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade"
)

// newMockRollbacksSource creates a new instance of mockRollbacksSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRollbacksSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRollbacksSource {
	mock := &mockRollbacksSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockRollbacksSource is an autogenerated mock type for the rollbacksSource type
type mockRollbacksSource struct {
	mock.Mock
}

type mockRollbacksSource_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRollbacksSource) EXPECT() *mockRollbacksSource_Expecter {
	return &mockRollbacksSource_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type mockRollbacksSource
func (_mock *mockRollbacksSource) Get() (map[string]upgrade.TTLMarker, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 map[string]upgrade.TTLMarker
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (map[string]upgrade.TTLMarker, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() map[string]upgrade.TTLMarker); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]upgrade.TTLMarker)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockRollbacksSource_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockRollbacksSource_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *mockRollbacksSource_Expecter) Get() *mockRollbacksSource_Get_Call {
	return &mockRollbacksSource_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *mockRollbacksSource_Get_Call) Run(run func()) *mockRollbacksSource_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockRollbacksSource_Get_Call) Return(stringToTTLMarker map[string]upgrade.TTLMarker, err error) *mockRollbacksSource_Get_Call {
	_c.Call.Return(stringToTTLMarker, err)
	return _c
}

func (_c *mockRollbacksSource_Get_Call) RunAndReturn(run func() (map[string]upgrade.TTLMarker, error)) *mockRollbacksSource_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type mockRollbacksSource
func (_mock *mockRollbacksSource) Set(stringToTTLMarker map[string]upgrade.TTLMarker) error {
	ret := _mock.Called(stringToTTLMarker)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[string]upgrade.TTLMarker) error); ok {
		r0 = returnFunc(stringToTTLMarker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockRollbacksSource_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mockRollbacksSource_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - stringToTTLMarker map[string]upgrade.TTLMarker
func (_e *mockRollbacksSource_Expecter) Set(stringToTTLMarker interface{}) *mockRollbacksSource_Set_Call {
	return &mockRollbacksSource_Set_Call{Call: _e.mock.On("Set", stringToTTLMarker)}
}

func (_c *mockRollbacksSource_Set_Call) Run(run func(stringToTTLMarker map[string]upgrade.TTLMarker)) *mockRollbacksSource_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]upgrade.TTLMarker
		if args[0] != nil {
			arg0 = args[0].(map[string]upgrade.TTLMarker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockRollbacksSource_Set_Call) Return(err error) *mockRollbacksSource_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockRollbacksSource_Set_Call) RunAndReturn(run func(stringToTTLMarker map[string]upgrade.TTLMarker) error) *mockRollbacksSource_Set_Call {
	_c.Call.Return(run)
	return _c
}
