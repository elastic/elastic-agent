// Code generated by mockery v2.23.1. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package fleet

import (
	coordinatorstate "github.com/elastic/elastic-agent/internal/pkg/agent/application/coordinator/state"
	mock "github.com/stretchr/testify/mock"
)

// StateUpdateSource is an autogenerated mock type for the StateUpdateSource type
type StateUpdateSource struct {
	mock.Mock
}

type StateUpdateSource_Expecter struct {
	mock *mock.Mock
}

func (_m *StateUpdateSource) EXPECT() *StateUpdateSource_Expecter {
	return &StateUpdateSource_Expecter{mock: &_m.Mock}
}

// Ch provides a mock function with given fields:
func (_m *StateUpdateSource) Ch() <-chan coordinatorstate.State {
	ret := _m.Called()

	var r0 <-chan coordinatorstate.State
	if rf, ok := ret.Get(0).(func() <-chan coordinatorstate.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan coordinatorstate.State)
		}
	}

	return r0
}

// StateUpdateSource_Ch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ch'
type StateUpdateSource_Ch_Call struct {
	*mock.Call
}

// Ch is a helper method to define mock.On call
func (_e *StateUpdateSource_Expecter) Ch() *StateUpdateSource_Ch_Call {
	return &StateUpdateSource_Ch_Call{Call: _e.mock.On("Ch")}
}

func (_c *StateUpdateSource_Ch_Call) Run(run func()) *StateUpdateSource_Ch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateUpdateSource_Ch_Call) Return(_a0 <-chan coordinatorstate.State) *StateUpdateSource_Ch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateUpdateSource_Ch_Call) RunAndReturn(run func() <-chan coordinatorstate.State) *StateUpdateSource_Ch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStateUpdateSource interface {
	mock.TestingT
	Cleanup(func())
}

// NewStateUpdateSource creates a new instance of StateUpdateSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStateUpdateSource(t mockConstructorTestingTNewStateUpdateSource) *StateUpdateSource {
	mock := &StateUpdateSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
