// Code generated by mockery v2.20.0. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package fleet

import (
	context "context"

	state "github.com/elastic/elastic-agent/internal/pkg/agent/application/coordinator/state"
	mock "github.com/stretchr/testify/mock"
)

// MockStateFetcher is an autogenerated mock type for the StateFetcher type
type MockStateFetcher struct {
	mock.Mock
}

type MockStateFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateFetcher) EXPECT() *MockStateFetcher_Expecter {
	return &MockStateFetcher_Expecter{mock: &_m.Mock}
}

// State provides a mock function with given fields:
func (_m *MockStateFetcher) State() state.State {
	ret := _m.Called()

	var r0 state.State
	if rf, ok := ret.Get(0).(func() state.State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(state.State)
	}

	return r0
}

// MockStateFetcher_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type MockStateFetcher_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *MockStateFetcher_Expecter) State() *MockStateFetcher_State_Call {
	return &MockStateFetcher_State_Call{Call: _e.mock.On("State")}
}

func (_c *MockStateFetcher_State_Call) Run(run func()) *MockStateFetcher_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateFetcher_State_Call) Return(_a0 state.State) *MockStateFetcher_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateFetcher_State_Call) RunAndReturn(run func() state.State) *MockStateFetcher_State_Call {
	_c.Call.Return(run)
	return _c
}

// StateSubscribe provides a mock function with given fields: ctx
func (_m *MockStateFetcher) StateSubscribe(ctx context.Context) state.StateUpdateSource {
	ret := _m.Called(ctx)

	var r0 state.StateUpdateSource
	if rf, ok := ret.Get(0).(func(context.Context) state.StateUpdateSource); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.StateUpdateSource)
		}
	}

	return r0
}

// MockStateFetcher_StateSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateSubscribe'
type MockStateFetcher_StateSubscribe_Call struct {
	*mock.Call
}

// StateSubscribe is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStateFetcher_Expecter) StateSubscribe(ctx interface{}) *MockStateFetcher_StateSubscribe_Call {
	return &MockStateFetcher_StateSubscribe_Call{Call: _e.mock.On("StateSubscribe", ctx)}
}

func (_c *MockStateFetcher_StateSubscribe_Call) Run(run func(ctx context.Context)) *MockStateFetcher_StateSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStateFetcher_StateSubscribe_Call) Return(_a0 state.StateUpdateSource) *MockStateFetcher_StateSubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateFetcher_StateSubscribe_Call) RunAndReturn(run func(context.Context) state.StateUpdateSource) *MockStateFetcher_StateSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockStateFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStateFetcher creates a new instance of MockStateFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStateFetcher(t mockConstructorTestingTNewMockStateFetcher) *MockStateFetcher {
	mock := &MockStateFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
