// Code generated by mockery v2.23.1. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package fleet

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockClock is an autogenerated mock type for the clock type
type mockClock struct {
	mock.Mock
}

type mockClock_Expecter struct {
	mock *mock.Mock
}

func (_m *mockClock) EXPECT() *mockClock_Expecter {
	return &mockClock_Expecter{mock: &_m.Mock}
}

// Now provides a mock function with given fields:
func (_m *mockClock) Now() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// mockClock_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type mockClock_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *mockClock_Expecter) Now() *mockClock_Now_Call {
	return &mockClock_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *mockClock_Now_Call) Run(run func()) *mockClock_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClock_Now_Call) Return(_a0 time.Time) *mockClock_Now_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClock_Now_Call) RunAndReturn(run func() time.Time) *mockClock_Now_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockClock interface {
	mock.TestingT
	Cleanup(func())
}

// newMockClock creates a new instance of mockClock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockClock(t mockConstructorTestingTnewMockClock) *mockClock {
	mock := &mockClock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
