// Code generated by mockery v2.20.0. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package coordinator

import (
	component "github.com/elastic/elastic-agent/pkg/component"
	mock "github.com/stretchr/testify/mock"
)

// MockComponentsModifier is an autogenerated mock type for the ComponentsModifier type
type MockComponentsModifier struct {
	mock.Mock
}

type MockComponentsModifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentsModifier) EXPECT() *MockComponentsModifier_Expecter {
	return &MockComponentsModifier_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: comps, cfg
func (_m *MockComponentsModifier) Execute(comps []component.Component, cfg map[string]interface{}) ([]component.Component, error) {
	ret := _m.Called(comps, cfg)

	var r0 []component.Component
	var r1 error
	if rf, ok := ret.Get(0).(func([]component.Component, map[string]interface{}) ([]component.Component, error)); ok {
		return rf(comps, cfg)
	}
	if rf, ok := ret.Get(0).(func([]component.Component, map[string]interface{}) []component.Component); ok {
		r0 = rf(comps, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]component.Component)
		}
	}

	if rf, ok := ret.Get(1).(func([]component.Component, map[string]interface{}) error); ok {
		r1 = rf(comps, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComponentsModifier_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockComponentsModifier_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - comps []component.Component
//   - cfg map[string]interface{}
func (_e *MockComponentsModifier_Expecter) Execute(comps interface{}, cfg interface{}) *MockComponentsModifier_Execute_Call {
	return &MockComponentsModifier_Execute_Call{Call: _e.mock.On("Execute", comps, cfg)}
}

func (_c *MockComponentsModifier_Execute_Call) Run(run func(comps []component.Component, cfg map[string]interface{})) *MockComponentsModifier_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]component.Component), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockComponentsModifier_Execute_Call) Return(_a0 []component.Component, _a1 error) *MockComponentsModifier_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComponentsModifier_Execute_Call) RunAndReturn(run func([]component.Component, map[string]interface{}) ([]component.Component, error)) *MockComponentsModifier_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockComponentsModifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockComponentsModifier creates a new instance of MockComponentsModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockComponentsModifier(t mockConstructorTestingTNewMockComponentsModifier) *MockComponentsModifier {
	mock := &MockComponentsModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
