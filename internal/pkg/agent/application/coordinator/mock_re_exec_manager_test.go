// Code generated by mockery v2.20.0. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package coordinator

import (
	reexec "github.com/elastic/elastic-agent/internal/pkg/agent/application/reexec"
	mock "github.com/stretchr/testify/mock"
)

// MockReExecManager is an autogenerated mock type for the ReExecManager type
type MockReExecManager struct {
	mock.Mock
}

type MockReExecManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReExecManager) EXPECT() *MockReExecManager_Expecter {
	return &MockReExecManager_Expecter{mock: &_m.Mock}
}

// ReExec provides a mock function with given fields: callback, argOverrides
func (_m *MockReExecManager) ReExec(callback reexec.ShutdownCallbackFn, argOverrides ...string) {
	_va := make([]interface{}, len(argOverrides))
	for _i := range argOverrides {
		_va[_i] = argOverrides[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, callback)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockReExecManager_ReExec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReExec'
type MockReExecManager_ReExec_Call struct {
	*mock.Call
}

// ReExec is a helper method to define mock.On call
//   - callback reexec.ShutdownCallbackFn
//   - argOverrides ...string
func (_e *MockReExecManager_Expecter) ReExec(callback interface{}, argOverrides ...interface{}) *MockReExecManager_ReExec_Call {
	return &MockReExecManager_ReExec_Call{Call: _e.mock.On("ReExec",
		append([]interface{}{callback}, argOverrides...)...)}
}

func (_c *MockReExecManager_ReExec_Call) Run(run func(callback reexec.ShutdownCallbackFn, argOverrides ...string)) *MockReExecManager_ReExec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(reexec.ShutdownCallbackFn), variadicArgs...)
	})
	return _c
}

func (_c *MockReExecManager_ReExec_Call) Return() *MockReExecManager_ReExec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReExecManager_ReExec_Call) RunAndReturn(run func(reexec.ShutdownCallbackFn, ...string)) *MockReExecManager_ReExec_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockReExecManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockReExecManager creates a new instance of MockReExecManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockReExecManager(t mockConstructorTestingTNewMockReExecManager) *MockReExecManager {
	mock := &MockReExecManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
