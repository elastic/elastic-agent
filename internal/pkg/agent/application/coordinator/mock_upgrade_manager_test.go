// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by mockery v2.20.0. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package coordinator

import (
	config "github.com/elastic/elastic-agent/internal/pkg/config"
	acker "github.com/elastic/elastic-agent/internal/pkg/fleetapi/acker"

	context "context"

	fleetapi "github.com/elastic/elastic-agent/internal/pkg/fleetapi"

	mock "github.com/stretchr/testify/mock"

	reexec "github.com/elastic/elastic-agent/internal/pkg/agent/application/reexec"
)

// MockUpgradeManager is an autogenerated mock type for the UpgradeManager type
type MockUpgradeManager struct {
	mock.Mock
}

type MockUpgradeManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpgradeManager) EXPECT() *MockUpgradeManager_Expecter {
	return &MockUpgradeManager_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields: ctx, _a1
func (_m *MockUpgradeManager) Ack(ctx context.Context, _a1 acker.Acker) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, acker.Acker) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUpgradeManager_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockUpgradeManager_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 acker.Acker
func (_e *MockUpgradeManager_Expecter) Ack(ctx interface{}, _a1 interface{}) *MockUpgradeManager_Ack_Call {
	return &MockUpgradeManager_Ack_Call{Call: _e.mock.On("Ack", ctx, _a1)}
}

func (_c *MockUpgradeManager_Ack_Call) Run(run func(ctx context.Context, _a1 acker.Acker)) *MockUpgradeManager_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(acker.Acker))
	})
	return _c
}

func (_c *MockUpgradeManager_Ack_Call) Return(_a0 error) *MockUpgradeManager_Ack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpgradeManager_Ack_Call) RunAndReturn(run func(context.Context, acker.Acker) error) *MockUpgradeManager_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Reload provides a mock function with given fields: rawConfig
func (_m *MockUpgradeManager) Reload(rawConfig *config.Config) error {
	ret := _m.Called(rawConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.Config) error); ok {
		r0 = rf(rawConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUpgradeManager_Reload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reload'
type MockUpgradeManager_Reload_Call struct {
	*mock.Call
}

// Reload is a helper method to define mock.On call
//   - rawConfig *config.Config
func (_e *MockUpgradeManager_Expecter) Reload(rawConfig interface{}) *MockUpgradeManager_Reload_Call {
	return &MockUpgradeManager_Reload_Call{Call: _e.mock.On("Reload", rawConfig)}
}

func (_c *MockUpgradeManager_Reload_Call) Run(run func(rawConfig *config.Config)) *MockUpgradeManager_Reload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.Config))
	})
	return _c
}

func (_c *MockUpgradeManager_Reload_Call) Return(_a0 error) *MockUpgradeManager_Reload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpgradeManager_Reload_Call) RunAndReturn(run func(*config.Config) error) *MockUpgradeManager_Reload_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function with given fields: ctx, version, sourceURI, action, skipVerifyOverride, pgpBytes
func (_m *MockUpgradeManager) Upgrade(ctx context.Context, version string, sourceURI string, action *fleetapi.ActionUpgrade, skipVerifyOverride bool, pgpBytes ...string) (reexec.ShutdownCallbackFn, error) {
	_va := make([]interface{}, len(pgpBytes))
	for _i := range pgpBytes {
		_va[_i] = pgpBytes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, version, sourceURI, action, skipVerifyOverride)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 reexec.ShutdownCallbackFn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *fleetapi.ActionUpgrade, bool, ...string) (reexec.ShutdownCallbackFn, error)); ok {
		return rf(ctx, version, sourceURI, action, skipVerifyOverride, pgpBytes...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *fleetapi.ActionUpgrade, bool, ...string) reexec.ShutdownCallbackFn); ok {
		r0 = rf(ctx, version, sourceURI, action, skipVerifyOverride, pgpBytes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reexec.ShutdownCallbackFn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *fleetapi.ActionUpgrade, bool, ...string) error); ok {
		r1 = rf(ctx, version, sourceURI, action, skipVerifyOverride, pgpBytes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpgradeManager_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type MockUpgradeManager_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - version string
//   - sourceURI string
//   - action *fleetapi.ActionUpgrade
//   - skipVerifyOverride bool
//   - pgpBytes ...string
func (_e *MockUpgradeManager_Expecter) Upgrade(ctx interface{}, version interface{}, sourceURI interface{}, action interface{}, skipVerifyOverride interface{}, pgpBytes ...interface{}) *MockUpgradeManager_Upgrade_Call {
	return &MockUpgradeManager_Upgrade_Call{Call: _e.mock.On("Upgrade",
		append([]interface{}{ctx, version, sourceURI, action, skipVerifyOverride}, pgpBytes...)...)}
}

func (_c *MockUpgradeManager_Upgrade_Call) Run(run func(ctx context.Context, version string, sourceURI string, action *fleetapi.ActionUpgrade, skipVerifyOverride bool, pgpBytes ...string)) *MockUpgradeManager_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*fleetapi.ActionUpgrade), args[4].(bool), variadicArgs...)
	})
	return _c
}

func (_c *MockUpgradeManager_Upgrade_Call) Return(_a0 reexec.ShutdownCallbackFn, err error) *MockUpgradeManager_Upgrade_Call {
	_c.Call.Return(_a0, err)
	return _c
}

func (_c *MockUpgradeManager_Upgrade_Call) RunAndReturn(run func(context.Context, string, string, *fleetapi.ActionUpgrade, bool, ...string) (reexec.ShutdownCallbackFn, error)) *MockUpgradeManager_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

// Upgradeable provides a mock function with given fields:
func (_m *MockUpgradeManager) Upgradeable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockUpgradeManager_Upgradeable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgradeable'
type MockUpgradeManager_Upgradeable_Call struct {
	*mock.Call
}

// Upgradeable is a helper method to define mock.On call
func (_e *MockUpgradeManager_Expecter) Upgradeable() *MockUpgradeManager_Upgradeable_Call {
	return &MockUpgradeManager_Upgradeable_Call{Call: _e.mock.On("Upgradeable")}
}

func (_c *MockUpgradeManager_Upgradeable_Call) Run(run func()) *MockUpgradeManager_Upgradeable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUpgradeManager_Upgradeable_Call) Return(_a0 bool) *MockUpgradeManager_Upgradeable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpgradeManager_Upgradeable_Call) RunAndReturn(run func() bool) *MockUpgradeManager_Upgradeable_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUpgradeManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUpgradeManager creates a new instance of MockUpgradeManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUpgradeManager(t mockConstructorTestingTNewMockUpgradeManager) *MockUpgradeManager {
	mock := &MockUpgradeManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
