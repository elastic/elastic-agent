// Code generated by mockery v2.20.0. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package mocks

import (
	coordinator "github.com/elastic/elastic-agent/internal/pkg/agent/application/coordinator"
	mock "github.com/stretchr/testify/mock"
)

// StateFetcher is an autogenerated mock type for the StateFetcher type
type StateFetcher struct {
	mock.Mock
}

type StateFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *StateFetcher) EXPECT() *StateFetcher_Expecter {
	return &StateFetcher_Expecter{mock: &_m.Mock}
}

// State provides a mock function with given fields: _a0
func (_m *StateFetcher) State(_a0 bool) coordinator.State {
	ret := _m.Called(_a0)

	var r0 coordinator.State
	if rf, ok := ret.Get(0).(func(bool) coordinator.State); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(coordinator.State)
	}

	return r0
}

// StateFetcher_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type StateFetcher_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
//   - _a0 bool
func (_e *StateFetcher_Expecter) State(_a0 interface{}) *StateFetcher_State_Call {
	return &StateFetcher_State_Call{Call: _e.mock.On("State", _a0)}
}

func (_c *StateFetcher_State_Call) Run(run func(_a0 bool)) *StateFetcher_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *StateFetcher_State_Call) Return(_a0 coordinator.State) *StateFetcher_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateFetcher_State_Call) RunAndReturn(run func(bool) coordinator.State) *StateFetcher_State_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStateFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewStateFetcher creates a new instance of StateFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStateFetcher(t mockConstructorTestingTNewStateFetcher) *StateFetcher {
	mock := &StateFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
