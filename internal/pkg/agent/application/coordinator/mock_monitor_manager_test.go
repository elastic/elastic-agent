// Code generated by mockery v2.20.0. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package coordinator

import (
	config "github.com/elastic/elastic-agent/internal/pkg/config"
	component "github.com/elastic/elastic-agent/pkg/component"

	mock "github.com/stretchr/testify/mock"
)

// MockMonitorManager is an autogenerated mock type for the MonitorManager type
type MockMonitorManager struct {
	mock.Mock
}

type MockMonitorManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMonitorManager) EXPECT() *MockMonitorManager_Expecter {
	return &MockMonitorManager_Expecter{mock: &_m.Mock}
}

// Enabled provides a mock function with given fields:
func (_m *MockMonitorManager) Enabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMonitorManager_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type MockMonitorManager_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *MockMonitorManager_Expecter) Enabled() *MockMonitorManager_Enabled_Call {
	return &MockMonitorManager_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *MockMonitorManager_Enabled_Call) Run(run func()) *MockMonitorManager_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonitorManager_Enabled_Call) Return(_a0 bool) *MockMonitorManager_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonitorManager_Enabled_Call) RunAndReturn(run func() bool) *MockMonitorManager_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// MonitoringConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockMonitorManager) MonitoringConfig(_a0 map[string]interface{}, _a1 []component.Component, _a2 map[string]string) (map[string]interface{}, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, []component.Component, map[string]string) (map[string]interface{}, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, []component.Component, map[string]string) map[string]interface{}); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, []component.Component, map[string]string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMonitorManager_MonitoringConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitoringConfig'
type MockMonitorManager_MonitoringConfig_Call struct {
	*mock.Call
}

// MonitoringConfig is a helper method to define mock.On call
//   - _a0 map[string]interface{}
//   - _a1 []component.Component
//   - _a2 map[string]string
func (_e *MockMonitorManager_Expecter) MonitoringConfig(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockMonitorManager_MonitoringConfig_Call {
	return &MockMonitorManager_MonitoringConfig_Call{Call: _e.mock.On("MonitoringConfig", _a0, _a1, _a2)}
}

func (_c *MockMonitorManager_MonitoringConfig_Call) Run(run func(_a0 map[string]interface{}, _a1 []component.Component, _a2 map[string]string)) *MockMonitorManager_MonitoringConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].([]component.Component), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockMonitorManager_MonitoringConfig_Call) Return(_a0 map[string]interface{}, _a1 error) *MockMonitorManager_MonitoringConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMonitorManager_MonitoringConfig_Call) RunAndReturn(run func(map[string]interface{}, []component.Component, map[string]string) (map[string]interface{}, error)) *MockMonitorManager_MonitoringConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Reload provides a mock function with given fields: rawConfig
func (_m *MockMonitorManager) Reload(rawConfig *config.Config) error {
	ret := _m.Called(rawConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.Config) error); ok {
		r0 = rf(rawConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMonitorManager_Reload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reload'
type MockMonitorManager_Reload_Call struct {
	*mock.Call
}

// Reload is a helper method to define mock.On call
//   - rawConfig *config.Config
func (_e *MockMonitorManager_Expecter) Reload(rawConfig interface{}) *MockMonitorManager_Reload_Call {
	return &MockMonitorManager_Reload_Call{Call: _e.mock.On("Reload", rawConfig)}
}

func (_c *MockMonitorManager_Reload_Call) Run(run func(rawConfig *config.Config)) *MockMonitorManager_Reload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.Config))
	})
	return _c
}

func (_c *MockMonitorManager_Reload_Call) Return(_a0 error) *MockMonitorManager_Reload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonitorManager_Reload_Call) RunAndReturn(run func(*config.Config) error) *MockMonitorManager_Reload_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMonitorManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMonitorManager creates a new instance of MockMonitorManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMonitorManager(t mockConstructorTestingTNewMockMonitorManager) *MockMonitorManager {
	mock := &MockMonitorManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
