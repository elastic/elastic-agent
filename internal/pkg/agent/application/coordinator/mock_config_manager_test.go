// Code generated by mockery v2.20.0. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package coordinator

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigManager is an autogenerated mock type for the ConfigManager type
type MockConfigManager struct {
	mock.Mock
}

type MockConfigManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigManager) EXPECT() *MockConfigManager_Expecter {
	return &MockConfigManager_Expecter{mock: &_m.Mock}
}

// ActionErrors provides a mock function with given fields:
func (_m *MockConfigManager) ActionErrors() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// MockConfigManager_ActionErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActionErrors'
type MockConfigManager_ActionErrors_Call struct {
	*mock.Call
}

// ActionErrors is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter) ActionErrors() *MockConfigManager_ActionErrors_Call {
	return &MockConfigManager_ActionErrors_Call{Call: _e.mock.On("ActionErrors")}
}

func (_c *MockConfigManager_ActionErrors_Call) Run(run func()) *MockConfigManager_ActionErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_ActionErrors_Call) Return(_a0 <-chan error) *MockConfigManager_ActionErrors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigManager_ActionErrors_Call) RunAndReturn(run func() <-chan error) *MockConfigManager_ActionErrors_Call {
	_c.Call.Return(run)
	return _c
}

// Errors provides a mock function with given fields:
func (_m *MockConfigManager) Errors() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// MockConfigManager_Errors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errors'
type MockConfigManager_Errors_Call struct {
	*mock.Call
}

// Errors is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter) Errors() *MockConfigManager_Errors_Call {
	return &MockConfigManager_Errors_Call{Call: _e.mock.On("Errors")}
}

func (_c *MockConfigManager_Errors_Call) Run(run func()) *MockConfigManager_Errors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_Errors_Call) Return(_a0 <-chan error) *MockConfigManager_Errors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigManager_Errors_Call) RunAndReturn(run func() <-chan error) *MockConfigManager_Errors_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: _a0
func (_m *MockConfigManager) Run(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigManager_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockConfigManager_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockConfigManager_Expecter) Run(_a0 interface{}) *MockConfigManager_Run_Call {
	return &MockConfigManager_Run_Call{Call: _e.mock.On("Run", _a0)}
}

func (_c *MockConfigManager_Run_Call) Run(run func(_a0 context.Context)) *MockConfigManager_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigManager_Run_Call) Return(_a0 error) *MockConfigManager_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigManager_Run_Call) RunAndReturn(run func(context.Context) error) *MockConfigManager_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields:
func (_m *MockConfigManager) Watch() <-chan ConfigChange {
	ret := _m.Called()

	var r0 <-chan ConfigChange
	if rf, ok := ret.Get(0).(func() <-chan ConfigChange); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan ConfigChange)
		}
	}

	return r0
}

// MockConfigManager_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockConfigManager_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter) Watch() *MockConfigManager_Watch_Call {
	return &MockConfigManager_Watch_Call{Call: _e.mock.On("Watch")}
}

func (_c *MockConfigManager_Watch_Call) Run(run func()) *MockConfigManager_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_Watch_Call) Return(_a0 <-chan ConfigChange) *MockConfigManager_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigManager_Watch_Call) RunAndReturn(run func() <-chan ConfigChange) *MockConfigManager_Watch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockConfigManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConfigManager creates a new instance of MockConfigManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConfigManager(t mockConstructorTestingTNewMockConfigManager) *MockConfigManager {
	mock := &MockConfigManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
