// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"

	"github.com/elastic/elastic-agent-libs/logp"
	"github.com/elastic/elastic-agent/internal/pkg/agent/application/coordinator"
	"github.com/elastic/elastic-agent/internal/pkg/diagnostics"
	"github.com/elastic/elastic-agent/internal/pkg/fleetapi"
	"github.com/elastic/elastic-agent/pkg/component"
	"github.com/elastic/elastic-agent/pkg/component/runtime"
	"github.com/elastic/elastic-agent/pkg/control/v2/cproto"
)

// NewMockUploader creates a new instance of MockUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUploader {
	mock := &MockUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUploader is an autogenerated mock type for the Uploader type
type MockUploader struct {
	mock.Mock
}

type MockUploader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUploader) EXPECT() *MockUploader_Expecter {
	return &MockUploader_Expecter{mock: &_m.Mock}
}

// UploadDiagnostics provides a mock function for the type MockUploader
func (_mock *MockUploader) UploadDiagnostics(context1 context.Context, s string, s1 string, n int64, reader io.Reader) (string, error) {
	ret := _mock.Called(context1, s, s1, n, reader)

	if len(ret) == 0 {
		panic("no return value specified for UploadDiagnostics")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int64, io.Reader) (string, error)); ok {
		return returnFunc(context1, s, s1, n, reader)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int64, io.Reader) string); ok {
		r0 = returnFunc(context1, s, s1, n, reader)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int64, io.Reader) error); ok {
		r1 = returnFunc(context1, s, s1, n, reader)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUploader_UploadDiagnostics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadDiagnostics'
type MockUploader_UploadDiagnostics_Call struct {
	*mock.Call
}

// UploadDiagnostics is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
//   - n int64
//   - reader io.Reader
func (_e *MockUploader_Expecter) UploadDiagnostics(context1 interface{}, s interface{}, s1 interface{}, n interface{}, reader interface{}) *MockUploader_UploadDiagnostics_Call {
	return &MockUploader_UploadDiagnostics_Call{Call: _e.mock.On("UploadDiagnostics", context1, s, s1, n, reader)}
}

func (_c *MockUploader_UploadDiagnostics_Call) Run(run func(context1 context.Context, s string, s1 string, n int64, reader io.Reader)) *MockUploader_UploadDiagnostics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		var arg4 io.Reader
		if args[4] != nil {
			arg4 = args[4].(io.Reader)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockUploader_UploadDiagnostics_Call) Return(s2 string, err error) *MockUploader_UploadDiagnostics_Call {
	_c.Call.Return(s2, err)
	return _c
}

func (_c *MockUploader_UploadDiagnostics_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string, n int64, reader io.Reader) (string, error)) *MockUploader_UploadDiagnostics_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDiagnosticsProvider creates a new instance of mockDiagnosticsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDiagnosticsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDiagnosticsProvider {
	mock := &mockDiagnosticsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockDiagnosticsProvider is an autogenerated mock type for the diagnosticsProvider type
type mockDiagnosticsProvider struct {
	mock.Mock
}

type mockDiagnosticsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDiagnosticsProvider) EXPECT() *mockDiagnosticsProvider_Expecter {
	return &mockDiagnosticsProvider_Expecter{mock: &_m.Mock}
}

// DiagnosticHooks provides a mock function for the type mockDiagnosticsProvider
func (_mock *mockDiagnosticsProvider) DiagnosticHooks() diagnostics.Hooks {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DiagnosticHooks")
	}

	var r0 diagnostics.Hooks
	if returnFunc, ok := ret.Get(0).(func() diagnostics.Hooks); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(diagnostics.Hooks)
		}
	}
	return r0
}

// mockDiagnosticsProvider_DiagnosticHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnosticHooks'
type mockDiagnosticsProvider_DiagnosticHooks_Call struct {
	*mock.Call
}

// DiagnosticHooks is a helper method to define mock.On call
func (_e *mockDiagnosticsProvider_Expecter) DiagnosticHooks() *mockDiagnosticsProvider_DiagnosticHooks_Call {
	return &mockDiagnosticsProvider_DiagnosticHooks_Call{Call: _e.mock.On("DiagnosticHooks")}
}

func (_c *mockDiagnosticsProvider_DiagnosticHooks_Call) Run(run func()) *mockDiagnosticsProvider_DiagnosticHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDiagnosticsProvider_DiagnosticHooks_Call) Return(hooks diagnostics.Hooks) *mockDiagnosticsProvider_DiagnosticHooks_Call {
	_c.Call.Return(hooks)
	return _c
}

func (_c *mockDiagnosticsProvider_DiagnosticHooks_Call) RunAndReturn(run func() diagnostics.Hooks) *mockDiagnosticsProvider_DiagnosticHooks_Call {
	_c.Call.Return(run)
	return _c
}

// PerformComponentDiagnostics provides a mock function for the type mockDiagnosticsProvider
func (_mock *mockDiagnosticsProvider) PerformComponentDiagnostics(ctx context.Context, additionalMetrics []cproto.AdditionalDiagnosticRequest, req ...component.Component) ([]runtime.ComponentDiagnostic, error) {
	// component.Component
	_va := make([]interface{}, len(req))
	for _i := range req {
		_va[_i] = req[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, additionalMetrics)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformComponentDiagnostics")
	}

	var r0 []runtime.ComponentDiagnostic
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []cproto.AdditionalDiagnosticRequest, ...component.Component) ([]runtime.ComponentDiagnostic, error)); ok {
		return returnFunc(ctx, additionalMetrics, req...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []cproto.AdditionalDiagnosticRequest, ...component.Component) []runtime.ComponentDiagnostic); ok {
		r0 = returnFunc(ctx, additionalMetrics, req...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]runtime.ComponentDiagnostic)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []cproto.AdditionalDiagnosticRequest, ...component.Component) error); ok {
		r1 = returnFunc(ctx, additionalMetrics, req...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockDiagnosticsProvider_PerformComponentDiagnostics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformComponentDiagnostics'
type mockDiagnosticsProvider_PerformComponentDiagnostics_Call struct {
	*mock.Call
}

// PerformComponentDiagnostics is a helper method to define mock.On call
//   - ctx context.Context
//   - additionalMetrics []cproto.AdditionalDiagnosticRequest
//   - req ...component.Component
func (_e *mockDiagnosticsProvider_Expecter) PerformComponentDiagnostics(ctx interface{}, additionalMetrics interface{}, req ...interface{}) *mockDiagnosticsProvider_PerformComponentDiagnostics_Call {
	return &mockDiagnosticsProvider_PerformComponentDiagnostics_Call{Call: _e.mock.On("PerformComponentDiagnostics",
		append([]interface{}{ctx, additionalMetrics}, req...)...)}
}

func (_c *mockDiagnosticsProvider_PerformComponentDiagnostics_Call) Run(run func(ctx context.Context, additionalMetrics []cproto.AdditionalDiagnosticRequest, req ...component.Component)) *mockDiagnosticsProvider_PerformComponentDiagnostics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []cproto.AdditionalDiagnosticRequest
		if args[1] != nil {
			arg1 = args[1].([]cproto.AdditionalDiagnosticRequest)
		}
		var arg2 []component.Component
		variadicArgs := make([]component.Component, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(component.Component)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mockDiagnosticsProvider_PerformComponentDiagnostics_Call) Return(componentDiagnostics []runtime.ComponentDiagnostic, err error) *mockDiagnosticsProvider_PerformComponentDiagnostics_Call {
	_c.Call.Return(componentDiagnostics, err)
	return _c
}

func (_c *mockDiagnosticsProvider_PerformComponentDiagnostics_Call) RunAndReturn(run func(ctx context.Context, additionalMetrics []cproto.AdditionalDiagnosticRequest, req ...component.Component) ([]runtime.ComponentDiagnostic, error)) *mockDiagnosticsProvider_PerformComponentDiagnostics_Call {
	_c.Call.Return(run)
	return _c
}

// PerformDiagnostics provides a mock function for the type mockDiagnosticsProvider
func (_mock *mockDiagnosticsProvider) PerformDiagnostics(ctx context.Context, req ...runtime.ComponentUnitDiagnosticRequest) []runtime.ComponentUnitDiagnostic {
	// runtime.ComponentUnitDiagnosticRequest
	_va := make([]interface{}, len(req))
	for _i := range req {
		_va[_i] = req[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformDiagnostics")
	}

	var r0 []runtime.ComponentUnitDiagnostic
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...runtime.ComponentUnitDiagnosticRequest) []runtime.ComponentUnitDiagnostic); ok {
		r0 = returnFunc(ctx, req...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]runtime.ComponentUnitDiagnostic)
		}
	}
	return r0
}

// mockDiagnosticsProvider_PerformDiagnostics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformDiagnostics'
type mockDiagnosticsProvider_PerformDiagnostics_Call struct {
	*mock.Call
}

// PerformDiagnostics is a helper method to define mock.On call
//   - ctx context.Context
//   - req ...runtime.ComponentUnitDiagnosticRequest
func (_e *mockDiagnosticsProvider_Expecter) PerformDiagnostics(ctx interface{}, req ...interface{}) *mockDiagnosticsProvider_PerformDiagnostics_Call {
	return &mockDiagnosticsProvider_PerformDiagnostics_Call{Call: _e.mock.On("PerformDiagnostics",
		append([]interface{}{ctx}, req...)...)}
}

func (_c *mockDiagnosticsProvider_PerformDiagnostics_Call) Run(run func(ctx context.Context, req ...runtime.ComponentUnitDiagnosticRequest)) *mockDiagnosticsProvider_PerformDiagnostics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []runtime.ComponentUnitDiagnosticRequest
		variadicArgs := make([]runtime.ComponentUnitDiagnosticRequest, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(runtime.ComponentUnitDiagnosticRequest)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockDiagnosticsProvider_PerformDiagnostics_Call) Return(componentUnitDiagnostics []runtime.ComponentUnitDiagnostic) *mockDiagnosticsProvider_PerformDiagnostics_Call {
	_c.Call.Return(componentUnitDiagnostics)
	return _c
}

func (_c *mockDiagnosticsProvider_PerformDiagnostics_Call) RunAndReturn(run func(ctx context.Context, req ...runtime.ComponentUnitDiagnosticRequest) []runtime.ComponentUnitDiagnostic) *mockDiagnosticsProvider_PerformDiagnostics_Call {
	_c.Call.Return(run)
	return _c
}

// newMockUpgradeCoordinator creates a new instance of mockUpgradeCoordinator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockUpgradeCoordinator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockUpgradeCoordinator {
	mock := &mockUpgradeCoordinator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockUpgradeCoordinator is an autogenerated mock type for the upgradeCoordinator type
type mockUpgradeCoordinator struct {
	mock.Mock
}

type mockUpgradeCoordinator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockUpgradeCoordinator) EXPECT() *mockUpgradeCoordinator_Expecter {
	return &mockUpgradeCoordinator_Expecter{mock: &_m.Mock}
}

// PerformAction provides a mock function for the type mockUpgradeCoordinator
func (_mock *mockUpgradeCoordinator) PerformAction(ctx context.Context, comp component.Component, unit component.Unit, name string, params map[string]interface{}) (map[string]interface{}, error) {
	ret := _mock.Called(ctx, comp, unit, name, params)

	if len(ret) == 0 {
		panic("no return value specified for PerformAction")
	}

	var r0 map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, component.Component, component.Unit, string, map[string]interface{}) (map[string]interface{}, error)); ok {
		return returnFunc(ctx, comp, unit, name, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, component.Component, component.Unit, string, map[string]interface{}) map[string]interface{}); ok {
		r0 = returnFunc(ctx, comp, unit, name, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, component.Component, component.Unit, string, map[string]interface{}) error); ok {
		r1 = returnFunc(ctx, comp, unit, name, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockUpgradeCoordinator_PerformAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformAction'
type mockUpgradeCoordinator_PerformAction_Call struct {
	*mock.Call
}

// PerformAction is a helper method to define mock.On call
//   - ctx context.Context
//   - comp component.Component
//   - unit component.Unit
//   - name string
//   - params map[string]interface{}
func (_e *mockUpgradeCoordinator_Expecter) PerformAction(ctx interface{}, comp interface{}, unit interface{}, name interface{}, params interface{}) *mockUpgradeCoordinator_PerformAction_Call {
	return &mockUpgradeCoordinator_PerformAction_Call{Call: _e.mock.On("PerformAction", ctx, comp, unit, name, params)}
}

func (_c *mockUpgradeCoordinator_PerformAction_Call) Run(run func(ctx context.Context, comp component.Component, unit component.Unit, name string, params map[string]interface{})) *mockUpgradeCoordinator_PerformAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 component.Component
		if args[1] != nil {
			arg1 = args[1].(component.Component)
		}
		var arg2 component.Unit
		if args[2] != nil {
			arg2 = args[2].(component.Unit)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 map[string]interface{}
		if args[4] != nil {
			arg4 = args[4].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *mockUpgradeCoordinator_PerformAction_Call) Return(stringToIfaceVal map[string]interface{}, err error) *mockUpgradeCoordinator_PerformAction_Call {
	_c.Call.Return(stringToIfaceVal, err)
	return _c
}

func (_c *mockUpgradeCoordinator_PerformAction_Call) RunAndReturn(run func(ctx context.Context, comp component.Component, unit component.Unit, name string, params map[string]interface{}) (map[string]interface{}, error)) *mockUpgradeCoordinator_PerformAction_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function for the type mockUpgradeCoordinator
func (_mock *mockUpgradeCoordinator) State() coordinator.State {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 coordinator.State
	if returnFunc, ok := ret.Get(0).(func() coordinator.State); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(coordinator.State)
	}
	return r0
}

// mockUpgradeCoordinator_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type mockUpgradeCoordinator_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *mockUpgradeCoordinator_Expecter) State() *mockUpgradeCoordinator_State_Call {
	return &mockUpgradeCoordinator_State_Call{Call: _e.mock.On("State")}
}

func (_c *mockUpgradeCoordinator_State_Call) Run(run func()) *mockUpgradeCoordinator_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockUpgradeCoordinator_State_Call) Return(state coordinator.State) *mockUpgradeCoordinator_State_Call {
	_c.Call.Return(state)
	return _c
}

func (_c *mockUpgradeCoordinator_State_Call) RunAndReturn(run func() coordinator.State) *mockUpgradeCoordinator_State_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function for the type mockUpgradeCoordinator
func (_mock *mockUpgradeCoordinator) Upgrade(ctx context.Context, version string, sourceURI string, action *fleetapi.ActionUpgrade, opts ...coordinator.UpgradeOpt) error {
	// coordinator.UpgradeOpt
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, version, sourceURI, action)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *fleetapi.ActionUpgrade, ...coordinator.UpgradeOpt) error); ok {
		r0 = returnFunc(ctx, version, sourceURI, action, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockUpgradeCoordinator_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type mockUpgradeCoordinator_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - version string
//   - sourceURI string
//   - action *fleetapi.ActionUpgrade
//   - opts ...coordinator.UpgradeOpt
func (_e *mockUpgradeCoordinator_Expecter) Upgrade(ctx interface{}, version interface{}, sourceURI interface{}, action interface{}, opts ...interface{}) *mockUpgradeCoordinator_Upgrade_Call {
	return &mockUpgradeCoordinator_Upgrade_Call{Call: _e.mock.On("Upgrade",
		append([]interface{}{ctx, version, sourceURI, action}, opts...)...)}
}

func (_c *mockUpgradeCoordinator_Upgrade_Call) Run(run func(ctx context.Context, version string, sourceURI string, action *fleetapi.ActionUpgrade, opts ...coordinator.UpgradeOpt)) *mockUpgradeCoordinator_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *fleetapi.ActionUpgrade
		if args[3] != nil {
			arg3 = args[3].(*fleetapi.ActionUpgrade)
		}
		var arg4 []coordinator.UpgradeOpt
		variadicArgs := make([]coordinator.UpgradeOpt, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(coordinator.UpgradeOpt)
			}
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *mockUpgradeCoordinator_Upgrade_Call) Return(err error) *mockUpgradeCoordinator_Upgrade_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockUpgradeCoordinator_Upgrade_Call) RunAndReturn(run func(ctx context.Context, version string, sourceURI string, action *fleetapi.ActionUpgrade, opts ...coordinator.UpgradeOpt) error) *mockUpgradeCoordinator_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLogLevelSetter creates a new instance of mockLogLevelSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogLevelSetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogLevelSetter {
	mock := &mockLogLevelSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockLogLevelSetter is an autogenerated mock type for the logLevelSetter type
type mockLogLevelSetter struct {
	mock.Mock
}

type mockLogLevelSetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogLevelSetter) EXPECT() *mockLogLevelSetter_Expecter {
	return &mockLogLevelSetter_Expecter{mock: &_m.Mock}
}

// SetLogLevel provides a mock function for the type mockLogLevelSetter
func (_mock *mockLogLevelSetter) SetLogLevel(ctx context.Context, lvl *logp.Level) error {
	ret := _mock.Called(ctx, lvl)

	if len(ret) == 0 {
		panic("no return value specified for SetLogLevel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *logp.Level) error); ok {
		r0 = returnFunc(ctx, lvl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockLogLevelSetter_SetLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogLevel'
type mockLogLevelSetter_SetLogLevel_Call struct {
	*mock.Call
}

// SetLogLevel is a helper method to define mock.On call
//   - ctx context.Context
//   - lvl *logp.Level
func (_e *mockLogLevelSetter_Expecter) SetLogLevel(ctx interface{}, lvl interface{}) *mockLogLevelSetter_SetLogLevel_Call {
	return &mockLogLevelSetter_SetLogLevel_Call{Call: _e.mock.On("SetLogLevel", ctx, lvl)}
}

func (_c *mockLogLevelSetter_SetLogLevel_Call) Run(run func(ctx context.Context, lvl *logp.Level)) *mockLogLevelSetter_SetLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *logp.Level
		if args[1] != nil {
			arg1 = args[1].(*logp.Level)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockLogLevelSetter_SetLogLevel_Call) Return(err error) *mockLogLevelSetter_SetLogLevel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockLogLevelSetter_SetLogLevel_Call) RunAndReturn(run func(ctx context.Context, lvl *logp.Level) error) *mockLogLevelSetter_SetLogLevel_Call {
	_c.Call.Return(run)
	return _c
}
