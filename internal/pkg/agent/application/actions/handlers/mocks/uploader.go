// Code generated by mockery v2.23.1. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Uploader is an autogenerated mock type for the Uploader type
type Uploader struct {
	mock.Mock
}

type Uploader_Expecter struct {
	mock *mock.Mock
}

func (_m *Uploader) EXPECT() *Uploader_Expecter {
	return &Uploader_Expecter{mock: &_m.Mock}
}

// UploadDiagnostics provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Uploader) UploadDiagnostics(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 io.Reader) (string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, io.Reader) (string, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, io.Reader) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, io.Reader) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uploader_UploadDiagnostics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadDiagnostics'
type Uploader_UploadDiagnostics_Call struct {
	*mock.Call
}

// UploadDiagnostics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 int64
//   - _a4 io.Reader
func (_e *Uploader_Expecter) UploadDiagnostics(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *Uploader_UploadDiagnostics_Call {
	return &Uploader_UploadDiagnostics_Call{Call: _e.mock.On("UploadDiagnostics", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *Uploader_UploadDiagnostics_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 int64, _a4 io.Reader)) *Uploader_UploadDiagnostics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(io.Reader))
	})
	return _c
}

func (_c *Uploader_UploadDiagnostics_Call) Return(_a0 string, _a1 error) *Uploader_UploadDiagnostics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Uploader_UploadDiagnostics_Call) RunAndReturn(run func(context.Context, string, string, int64, io.Reader) (string, error)) *Uploader_UploadDiagnostics_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUploader interface {
	mock.TestingT
	Cleanup(func())
}

// NewUploader creates a new instance of Uploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUploader(t mockConstructorTestingTNewUploader) *Uploader {
	mock := &Uploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
