// Code generated by mockery v2.23.1. DO NOT EDIT.

// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package mocks

import (
	context "context"

	fleetapi "github.com/elastic/elastic-agent/internal/pkg/fleetapi"
	mock "github.com/stretchr/testify/mock"
)

// Acker is an autogenerated mock type for the Acker type
type Acker struct {
	mock.Mock
}

type Acker_Expecter struct {
	mock *mock.Mock
}

func (_m *Acker) EXPECT() *Acker_Expecter {
	return &Acker_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields: ctx, action
func (_m *Acker) Ack(ctx context.Context, action fleetapi.Action) error {
	ret := _m.Called(ctx, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fleetapi.Action) error); ok {
		r0 = rf(ctx, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Acker_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type Acker_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - ctx context.Context
//   - action fleetapi.Action
func (_e *Acker_Expecter) Ack(ctx interface{}, action interface{}) *Acker_Ack_Call {
	return &Acker_Ack_Call{Call: _e.mock.On("Ack", ctx, action)}
}

func (_c *Acker_Ack_Call) Run(run func(ctx context.Context, action fleetapi.Action)) *Acker_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(fleetapi.Action))
	})
	return _c
}

func (_c *Acker_Ack_Call) Return(_a0 error) *Acker_Ack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Acker_Ack_Call) RunAndReturn(run func(context.Context, fleetapi.Action) error) *Acker_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *Acker) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Acker_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Acker_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Acker_Expecter) Commit(ctx interface{}) *Acker_Commit_Call {
	return &Acker_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *Acker_Commit_Call) Run(run func(ctx context.Context)) *Acker_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Acker_Commit_Call) Return(_a0 error) *Acker_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Acker_Commit_Call) RunAndReturn(run func(context.Context) error) *Acker_Commit_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAcker interface {
	mock.TestingT
	Cleanup(func())
}

// NewAcker creates a new instance of Acker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAcker(t mockConstructorTestingTNewAcker) *Acker {
	mock := &Acker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
