// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package info

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/elastic/elastic-agent/pkg/core/logger"
)

// NewMockAgent creates a new instance of MockAgent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgent {
	mock := &MockAgent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAgent is an autogenerated mock type for the Agent type
type MockAgent struct {
	mock.Mock
}

type MockAgent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgent) EXPECT() *MockAgent_Expecter {
	return &MockAgent_Expecter{mock: &_m.Mock}
}

// AgentID provides a mock function for the type MockAgent
func (_mock *MockAgent) AgentID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AgentID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAgent_AgentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AgentID'
type MockAgent_AgentID_Call struct {
	*mock.Call
}

// AgentID is a helper method to define mock.On call
func (_e *MockAgent_Expecter) AgentID() *MockAgent_AgentID_Call {
	return &MockAgent_AgentID_Call{Call: _e.mock.On("AgentID")}
}

func (_c *MockAgent_AgentID_Call) Run(run func()) *MockAgent_AgentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAgent_AgentID_Call) Return(s string) *MockAgent_AgentID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAgent_AgentID_Call) RunAndReturn(run func() string) *MockAgent_AgentID_Call {
	_c.Call.Return(run)
	return _c
}

// ECSMetadata provides a mock function for the type MockAgent
func (_mock *MockAgent) ECSMetadata(v *logger.Logger) (*ECSMeta, error) {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for ECSMetadata")
	}

	var r0 *ECSMeta
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*logger.Logger) (*ECSMeta, error)); ok {
		return returnFunc(v)
	}
	if returnFunc, ok := ret.Get(0).(func(*logger.Logger) *ECSMeta); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ECSMeta)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*logger.Logger) error); ok {
		r1 = returnFunc(v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAgent_ECSMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ECSMetadata'
type MockAgent_ECSMetadata_Call struct {
	*mock.Call
}

// ECSMetadata is a helper method to define mock.On call
//   - v *logger.Logger
func (_e *MockAgent_Expecter) ECSMetadata(v interface{}) *MockAgent_ECSMetadata_Call {
	return &MockAgent_ECSMetadata_Call{Call: _e.mock.On("ECSMetadata", v)}
}

func (_c *MockAgent_ECSMetadata_Call) Run(run func(v *logger.Logger)) *MockAgent_ECSMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *logger.Logger
		if args[0] != nil {
			arg0 = args[0].(*logger.Logger)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAgent_ECSMetadata_Call) Return(eCSMeta *ECSMeta, err error) *MockAgent_ECSMetadata_Call {
	_c.Call.Return(eCSMeta, err)
	return _c
}

func (_c *MockAgent_ECSMetadata_Call) RunAndReturn(run func(v *logger.Logger) (*ECSMeta, error)) *MockAgent_ECSMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Headers provides a mock function for the type MockAgent
func (_mock *MockAgent) Headers() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Headers")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockAgent_Headers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Headers'
type MockAgent_Headers_Call struct {
	*mock.Call
}

// Headers is a helper method to define mock.On call
func (_e *MockAgent_Expecter) Headers() *MockAgent_Headers_Call {
	return &MockAgent_Headers_Call{Call: _e.mock.On("Headers")}
}

func (_c *MockAgent_Headers_Call) Run(run func()) *MockAgent_Headers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAgent_Headers_Call) Return(stringToString map[string]string) *MockAgent_Headers_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockAgent_Headers_Call) RunAndReturn(run func() map[string]string) *MockAgent_Headers_Call {
	_c.Call.Return(run)
	return _c
}

// IsStandalone provides a mock function for the type MockAgent
func (_mock *MockAgent) IsStandalone() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStandalone")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockAgent_IsStandalone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStandalone'
type MockAgent_IsStandalone_Call struct {
	*mock.Call
}

// IsStandalone is a helper method to define mock.On call
func (_e *MockAgent_Expecter) IsStandalone() *MockAgent_IsStandalone_Call {
	return &MockAgent_IsStandalone_Call{Call: _e.mock.On("IsStandalone")}
}

func (_c *MockAgent_IsStandalone_Call) Run(run func()) *MockAgent_IsStandalone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAgent_IsStandalone_Call) Return(b bool) *MockAgent_IsStandalone_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockAgent_IsStandalone_Call) RunAndReturn(run func() bool) *MockAgent_IsStandalone_Call {
	_c.Call.Return(run)
	return _c
}

// LogLevel provides a mock function for the type MockAgent
func (_mock *MockAgent) LogLevel() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogLevel")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAgent_LogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogLevel'
type MockAgent_LogLevel_Call struct {
	*mock.Call
}

// LogLevel is a helper method to define mock.On call
func (_e *MockAgent_Expecter) LogLevel() *MockAgent_LogLevel_Call {
	return &MockAgent_LogLevel_Call{Call: _e.mock.On("LogLevel")}
}

func (_c *MockAgent_LogLevel_Call) Run(run func()) *MockAgent_LogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAgent_LogLevel_Call) Return(s string) *MockAgent_LogLevel_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAgent_LogLevel_Call) RunAndReturn(run func() string) *MockAgent_LogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// RawLogLevel provides a mock function for the type MockAgent
func (_mock *MockAgent) RawLogLevel() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RawLogLevel")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAgent_RawLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawLogLevel'
type MockAgent_RawLogLevel_Call struct {
	*mock.Call
}

// RawLogLevel is a helper method to define mock.On call
func (_e *MockAgent_Expecter) RawLogLevel() *MockAgent_RawLogLevel_Call {
	return &MockAgent_RawLogLevel_Call{Call: _e.mock.On("RawLogLevel")}
}

func (_c *MockAgent_RawLogLevel_Call) Run(run func()) *MockAgent_RawLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAgent_RawLogLevel_Call) Return(s string) *MockAgent_RawLogLevel_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAgent_RawLogLevel_Call) RunAndReturn(run func() string) *MockAgent_RawLogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// ReloadID provides a mock function for the type MockAgent
func (_mock *MockAgent) ReloadID(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReloadID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAgent_ReloadID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReloadID'
type MockAgent_ReloadID_Call struct {
	*mock.Call
}

// ReloadID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAgent_Expecter) ReloadID(ctx interface{}) *MockAgent_ReloadID_Call {
	return &MockAgent_ReloadID_Call{Call: _e.mock.On("ReloadID", ctx)}
}

func (_c *MockAgent_ReloadID_Call) Run(run func(ctx context.Context)) *MockAgent_ReloadID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAgent_ReloadID_Call) Return(err error) *MockAgent_ReloadID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAgent_ReloadID_Call) RunAndReturn(run func(ctx context.Context) error) *MockAgent_ReloadID_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogLevel provides a mock function for the type MockAgent
func (_mock *MockAgent) SetLogLevel(ctx context.Context, level string) error {
	ret := _mock.Called(ctx, level)

	if len(ret) == 0 {
		panic("no return value specified for SetLogLevel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, level)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAgent_SetLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogLevel'
type MockAgent_SetLogLevel_Call struct {
	*mock.Call
}

// SetLogLevel is a helper method to define mock.On call
//   - ctx context.Context
//   - level string
func (_e *MockAgent_Expecter) SetLogLevel(ctx interface{}, level interface{}) *MockAgent_SetLogLevel_Call {
	return &MockAgent_SetLogLevel_Call{Call: _e.mock.On("SetLogLevel", ctx, level)}
}

func (_c *MockAgent_SetLogLevel_Call) Run(run func(ctx context.Context, level string)) *MockAgent_SetLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAgent_SetLogLevel_Call) Return(err error) *MockAgent_SetLogLevel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAgent_SetLogLevel_Call) RunAndReturn(run func(ctx context.Context, level string) error) *MockAgent_SetLogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// Snapshot provides a mock function for the type MockAgent
func (_mock *MockAgent) Snapshot() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapshot")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockAgent_Snapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapshot'
type MockAgent_Snapshot_Call struct {
	*mock.Call
}

// Snapshot is a helper method to define mock.On call
func (_e *MockAgent_Expecter) Snapshot() *MockAgent_Snapshot_Call {
	return &MockAgent_Snapshot_Call{Call: _e.mock.On("Snapshot")}
}

func (_c *MockAgent_Snapshot_Call) Run(run func()) *MockAgent_Snapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAgent_Snapshot_Call) Return(b bool) *MockAgent_Snapshot_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockAgent_Snapshot_Call) RunAndReturn(run func() bool) *MockAgent_Snapshot_Call {
	_c.Call.Return(run)
	return _c
}

// Unprivileged provides a mock function for the type MockAgent
func (_mock *MockAgent) Unprivileged() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unprivileged")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockAgent_Unprivileged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unprivileged'
type MockAgent_Unprivileged_Call struct {
	*mock.Call
}

// Unprivileged is a helper method to define mock.On call
func (_e *MockAgent_Expecter) Unprivileged() *MockAgent_Unprivileged_Call {
	return &MockAgent_Unprivileged_Call{Call: _e.mock.On("Unprivileged")}
}

func (_c *MockAgent_Unprivileged_Call) Run(run func()) *MockAgent_Unprivileged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAgent_Unprivileged_Call) Return(b bool) *MockAgent_Unprivileged_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockAgent_Unprivileged_Call) RunAndReturn(run func() bool) *MockAgent_Unprivileged_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockAgent
func (_mock *MockAgent) Version() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAgent_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockAgent_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockAgent_Expecter) Version() *MockAgent_Version_Call {
	return &MockAgent_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockAgent_Version_Call) Run(run func()) *MockAgent_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAgent_Version_Call) Return(s string) *MockAgent_Version_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAgent_Version_Call) RunAndReturn(run func() string) *MockAgent_Version_Call {
	_c.Call.Return(run)
	return _c
}
