// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import (
	download "github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade/artifact/download"
	mock "github.com/stretchr/testify/mock"
)

// mock_upgradeCleaner is an autogenerated mock type for the upgradeCleaner type
type mock_upgradeCleaner struct {
	mock.Mock
}

type mock_upgradeCleaner_Expecter struct {
	mock *mock.Mock
}

func (_m *mock_upgradeCleaner) EXPECT() *mock_upgradeCleaner_Expecter {
	return &mock_upgradeCleaner_Expecter{mock: &_m.Mock}
}

// cleanup provides a mock function with given fields: err
func (_m *mock_upgradeCleaner) cleanup(err error) error {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for cleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_upgradeCleaner_cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'cleanup'
type mock_upgradeCleaner_cleanup_Call struct {
	*mock.Call
}

// cleanup is a helper method to define mock.On call
//   - err error
func (_e *mock_upgradeCleaner_Expecter) cleanup(err interface{}) *mock_upgradeCleaner_cleanup_Call {
	return &mock_upgradeCleaner_cleanup_Call{Call: _e.mock.On("cleanup", err)}
}

func (_c *mock_upgradeCleaner_cleanup_Call) Run(run func(err error)) *mock_upgradeCleaner_cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *mock_upgradeCleaner_cleanup_Call) Return(_a0 error) *mock_upgradeCleaner_cleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_upgradeCleaner_cleanup_Call) RunAndReturn(run func(error) error) *mock_upgradeCleaner_cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// setupArchiveCleanup provides a mock function with given fields: downloadResult
func (_m *mock_upgradeCleaner) setupArchiveCleanup(downloadResult download.DownloadResult) error {
	ret := _m.Called(downloadResult)

	if len(ret) == 0 {
		panic("no return value specified for setupArchiveCleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(download.DownloadResult) error); ok {
		r0 = rf(downloadResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_upgradeCleaner_setupArchiveCleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setupArchiveCleanup'
type mock_upgradeCleaner_setupArchiveCleanup_Call struct {
	*mock.Call
}

// setupArchiveCleanup is a helper method to define mock.On call
//   - downloadResult download.DownloadResult
func (_e *mock_upgradeCleaner_Expecter) setupArchiveCleanup(downloadResult interface{}) *mock_upgradeCleaner_setupArchiveCleanup_Call {
	return &mock_upgradeCleaner_setupArchiveCleanup_Call{Call: _e.mock.On("setupArchiveCleanup", downloadResult)}
}

func (_c *mock_upgradeCleaner_setupArchiveCleanup_Call) Run(run func(downloadResult download.DownloadResult)) *mock_upgradeCleaner_setupArchiveCleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(download.DownloadResult))
	})
	return _c
}

func (_c *mock_upgradeCleaner_setupArchiveCleanup_Call) Return(_a0 error) *mock_upgradeCleaner_setupArchiveCleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_upgradeCleaner_setupArchiveCleanup_Call) RunAndReturn(run func(download.DownloadResult) error) *mock_upgradeCleaner_setupArchiveCleanup_Call {
	_c.Call.Return(run)
	return _c
}

// setupSymlinkCleanup provides a mock function with given fields: symlinkFunc, topDirPath, oldVersionedHome, agentName
func (_m *mock_upgradeCleaner) setupSymlinkCleanup(symlinkFunc changeSymlinkFunc, topDirPath string, oldVersionedHome string, agentName string) error {
	ret := _m.Called(symlinkFunc, topDirPath, oldVersionedHome, agentName)

	if len(ret) == 0 {
		panic("no return value specified for setupSymlinkCleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(changeSymlinkFunc, string, string, string) error); ok {
		r0 = rf(symlinkFunc, topDirPath, oldVersionedHome, agentName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_upgradeCleaner_setupSymlinkCleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setupSymlinkCleanup'
type mock_upgradeCleaner_setupSymlinkCleanup_Call struct {
	*mock.Call
}

// setupSymlinkCleanup is a helper method to define mock.On call
//   - symlinkFunc changeSymlinkFunc
//   - topDirPath string
//   - oldVersionedHome string
//   - agentName string
func (_e *mock_upgradeCleaner_Expecter) setupSymlinkCleanup(symlinkFunc interface{}, topDirPath interface{}, oldVersionedHome interface{}, agentName interface{}) *mock_upgradeCleaner_setupSymlinkCleanup_Call {
	return &mock_upgradeCleaner_setupSymlinkCleanup_Call{Call: _e.mock.On("setupSymlinkCleanup", symlinkFunc, topDirPath, oldVersionedHome, agentName)}
}

func (_c *mock_upgradeCleaner_setupSymlinkCleanup_Call) Run(run func(symlinkFunc changeSymlinkFunc, topDirPath string, oldVersionedHome string, agentName string)) *mock_upgradeCleaner_setupSymlinkCleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(changeSymlinkFunc), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mock_upgradeCleaner_setupSymlinkCleanup_Call) Return(_a0 error) *mock_upgradeCleaner_setupSymlinkCleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_upgradeCleaner_setupSymlinkCleanup_Call) RunAndReturn(run func(changeSymlinkFunc, string, string, string) error) *mock_upgradeCleaner_setupSymlinkCleanup_Call {
	_c.Call.Return(run)
	return _c
}

// setupUnpackCleanup provides a mock function with given fields: newHomeDir, oldHomeDir
func (_m *mock_upgradeCleaner) setupUnpackCleanup(newHomeDir string, oldHomeDir string) error {
	ret := _m.Called(newHomeDir, oldHomeDir)

	if len(ret) == 0 {
		panic("no return value specified for setupUnpackCleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(newHomeDir, oldHomeDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_upgradeCleaner_setupUnpackCleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setupUnpackCleanup'
type mock_upgradeCleaner_setupUnpackCleanup_Call struct {
	*mock.Call
}

// setupUnpackCleanup is a helper method to define mock.On call
//   - newHomeDir string
//   - oldHomeDir string
func (_e *mock_upgradeCleaner_Expecter) setupUnpackCleanup(newHomeDir interface{}, oldHomeDir interface{}) *mock_upgradeCleaner_setupUnpackCleanup_Call {
	return &mock_upgradeCleaner_setupUnpackCleanup_Call{Call: _e.mock.On("setupUnpackCleanup", newHomeDir, oldHomeDir)}
}

func (_c *mock_upgradeCleaner_setupUnpackCleanup_Call) Run(run func(newHomeDir string, oldHomeDir string)) *mock_upgradeCleaner_setupUnpackCleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mock_upgradeCleaner_setupUnpackCleanup_Call) Return(_a0 error) *mock_upgradeCleaner_setupUnpackCleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_upgradeCleaner_setupUnpackCleanup_Call) RunAndReturn(run func(string, string) error) *mock_upgradeCleaner_setupUnpackCleanup_Call {
	_c.Call.Return(run)
	return _c
}

// newMock_upgradeCleaner creates a new instance of mock_upgradeCleaner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMock_upgradeCleaner(t interface {
	mock.TestingT
	Cleanup(func())
}) *mock_upgradeCleaner {
	mock := &mock_upgradeCleaner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
