// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import (
	logp "github.com/elastic/elastic-agent-libs/logp"
	mock "github.com/stretchr/testify/mock"
)

// mock_relinker is an autogenerated mock type for the relinker type
type mock_relinker struct {
	mock.Mock
}

type mock_relinker_Expecter struct {
	mock *mock.Mock
}

func (_m *mock_relinker) EXPECT() *mock_relinker_Expecter {
	return &mock_relinker_Expecter{mock: &_m.Mock}
}

// changeSymlink provides a mock function with given fields: log, topDirPath, symlinkPath, newTarget
func (_m *mock_relinker) changeSymlink(log *logp.Logger, topDirPath string, symlinkPath string, newTarget string) error {
	ret := _m.Called(log, topDirPath, symlinkPath, newTarget)

	if len(ret) == 0 {
		panic("no return value specified for changeSymlink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*logp.Logger, string, string, string) error); ok {
		r0 = rf(log, topDirPath, symlinkPath, newTarget)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_relinker_changeSymlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'changeSymlink'
type mock_relinker_changeSymlink_Call struct {
	*mock.Call
}

// changeSymlink is a helper method to define mock.On call
//   - log *logp.Logger
//   - topDirPath string
//   - symlinkPath string
//   - newTarget string
func (_e *mock_relinker_Expecter) changeSymlink(log interface{}, topDirPath interface{}, symlinkPath interface{}, newTarget interface{}) *mock_relinker_changeSymlink_Call {
	return &mock_relinker_changeSymlink_Call{Call: _e.mock.On("changeSymlink", log, topDirPath, symlinkPath, newTarget)}
}

func (_c *mock_relinker_changeSymlink_Call) Run(run func(log *logp.Logger, topDirPath string, symlinkPath string, newTarget string)) *mock_relinker_changeSymlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*logp.Logger), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mock_relinker_changeSymlink_Call) Return(_a0 error) *mock_relinker_changeSymlink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_relinker_changeSymlink_Call) RunAndReturn(run func(*logp.Logger, string, string, string) error) *mock_relinker_changeSymlink_Call {
	_c.Call.Return(run)
	return _c
}

// newMock_relinker creates a new instance of mock_relinker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMock_relinker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mock_relinker {
	mock := &mock_relinker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
