// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import (
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/elastic/elastic-agent/pkg/api/v1"
)

// mockInstallDescriptorSource is an autogenerated mock type for the installDescriptorSource type
type mockInstallDescriptorSource struct {
	mock.Mock
}

type mockInstallDescriptorSource_Expecter struct {
	mock *mock.Mock
}

func (_m *mockInstallDescriptorSource) EXPECT() *mockInstallDescriptorSource_Expecter {
	return &mockInstallDescriptorSource_Expecter{mock: &_m.Mock}
}

// AddInstallDesc provides a mock function with given fields: desc
func (_m *mockInstallDescriptorSource) AddInstallDesc(desc v1.AgentInstallDesc) (*v1.InstallDescriptor, error) {
	ret := _m.Called(desc)

	if len(ret) == 0 {
		panic("no return value specified for AddInstallDesc")
	}

	var r0 *v1.InstallDescriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(v1.AgentInstallDesc) (*v1.InstallDescriptor, error)); ok {
		return rf(desc)
	}
	if rf, ok := ret.Get(0).(func(v1.AgentInstallDesc) *v1.InstallDescriptor); ok {
		r0 = rf(desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.InstallDescriptor)
		}
	}

	if rf, ok := ret.Get(1).(func(v1.AgentInstallDesc) error); ok {
		r1 = rf(desc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockInstallDescriptorSource_AddInstallDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInstallDesc'
type mockInstallDescriptorSource_AddInstallDesc_Call struct {
	*mock.Call
}

// AddInstallDesc is a helper method to define mock.On call
//   - desc v1.AgentInstallDesc
func (_e *mockInstallDescriptorSource_Expecter) AddInstallDesc(desc interface{}) *mockInstallDescriptorSource_AddInstallDesc_Call {
	return &mockInstallDescriptorSource_AddInstallDesc_Call{Call: _e.mock.On("AddInstallDesc", desc)}
}

func (_c *mockInstallDescriptorSource_AddInstallDesc_Call) Run(run func(desc v1.AgentInstallDesc)) *mockInstallDescriptorSource_AddInstallDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1.AgentInstallDesc))
	})
	return _c
}

func (_c *mockInstallDescriptorSource_AddInstallDesc_Call) Return(_a0 *v1.InstallDescriptor, _a1 error) *mockInstallDescriptorSource_AddInstallDesc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockInstallDescriptorSource_AddInstallDesc_Call) RunAndReturn(run func(v1.AgentInstallDesc) (*v1.InstallDescriptor, error)) *mockInstallDescriptorSource_AddInstallDesc_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyInstallDesc provides a mock function with given fields: modifierFunc
func (_m *mockInstallDescriptorSource) ModifyInstallDesc(modifierFunc func(*v1.AgentInstallDesc) error) (*v1.InstallDescriptor, error) {
	ret := _m.Called(modifierFunc)

	if len(ret) == 0 {
		panic("no return value specified for ModifyInstallDesc")
	}

	var r0 *v1.InstallDescriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(func(*v1.AgentInstallDesc) error) (*v1.InstallDescriptor, error)); ok {
		return rf(modifierFunc)
	}
	if rf, ok := ret.Get(0).(func(func(*v1.AgentInstallDesc) error) *v1.InstallDescriptor); ok {
		r0 = rf(modifierFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.InstallDescriptor)
		}
	}

	if rf, ok := ret.Get(1).(func(func(*v1.AgentInstallDesc) error) error); ok {
		r1 = rf(modifierFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockInstallDescriptorSource_ModifyInstallDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyInstallDesc'
type mockInstallDescriptorSource_ModifyInstallDesc_Call struct {
	*mock.Call
}

// ModifyInstallDesc is a helper method to define mock.On call
//   - modifierFunc func(*v1.AgentInstallDesc) error
func (_e *mockInstallDescriptorSource_Expecter) ModifyInstallDesc(modifierFunc interface{}) *mockInstallDescriptorSource_ModifyInstallDesc_Call {
	return &mockInstallDescriptorSource_ModifyInstallDesc_Call{Call: _e.mock.On("ModifyInstallDesc", modifierFunc)}
}

func (_c *mockInstallDescriptorSource_ModifyInstallDesc_Call) Run(run func(modifierFunc func(*v1.AgentInstallDesc) error)) *mockInstallDescriptorSource_ModifyInstallDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*v1.AgentInstallDesc) error))
	})
	return _c
}

func (_c *mockInstallDescriptorSource_ModifyInstallDesc_Call) Return(_a0 *v1.InstallDescriptor, _a1 error) *mockInstallDescriptorSource_ModifyInstallDesc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockInstallDescriptorSource_ModifyInstallDesc_Call) RunAndReturn(run func(func(*v1.AgentInstallDesc) error) (*v1.InstallDescriptor, error)) *mockInstallDescriptorSource_ModifyInstallDesc_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAgentInstallDesc provides a mock function with given fields: versionedHome
func (_m *mockInstallDescriptorSource) RemoveAgentInstallDesc(versionedHome string) (*v1.InstallDescriptor, error) {
	ret := _m.Called(versionedHome)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAgentInstallDesc")
	}

	var r0 *v1.InstallDescriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*v1.InstallDescriptor, error)); ok {
		return rf(versionedHome)
	}
	if rf, ok := ret.Get(0).(func(string) *v1.InstallDescriptor); ok {
		r0 = rf(versionedHome)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.InstallDescriptor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(versionedHome)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockInstallDescriptorSource_RemoveAgentInstallDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAgentInstallDesc'
type mockInstallDescriptorSource_RemoveAgentInstallDesc_Call struct {
	*mock.Call
}

// RemoveAgentInstallDesc is a helper method to define mock.On call
//   - versionedHome string
func (_e *mockInstallDescriptorSource_Expecter) RemoveAgentInstallDesc(versionedHome interface{}) *mockInstallDescriptorSource_RemoveAgentInstallDesc_Call {
	return &mockInstallDescriptorSource_RemoveAgentInstallDesc_Call{Call: _e.mock.On("RemoveAgentInstallDesc", versionedHome)}
}

func (_c *mockInstallDescriptorSource_RemoveAgentInstallDesc_Call) Run(run func(versionedHome string)) *mockInstallDescriptorSource_RemoveAgentInstallDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockInstallDescriptorSource_RemoveAgentInstallDesc_Call) Return(_a0 *v1.InstallDescriptor, _a1 error) *mockInstallDescriptorSource_RemoveAgentInstallDesc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockInstallDescriptorSource_RemoveAgentInstallDesc_Call) RunAndReturn(run func(string) (*v1.InstallDescriptor, error)) *mockInstallDescriptorSource_RemoveAgentInstallDesc_Call {
	_c.Call.Return(run)
	return _c
}

// newMockInstallDescriptorSource creates a new instance of mockInstallDescriptorSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockInstallDescriptorSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockInstallDescriptorSource {
	mock := &mockInstallDescriptorSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
