// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import mock "github.com/stretchr/testify/mock"

// mock_unpacker is an autogenerated mock type for the unpacker type
type mock_unpacker struct {
	mock.Mock
}

type mock_unpacker_Expecter struct {
	mock *mock.Mock
}

func (_m *mock_unpacker) EXPECT() *mock_unpacker_Expecter {
	return &mock_unpacker_Expecter{mock: &_m.Mock}
}

// detectFlavor provides a mock function with given fields: topPath, flavor
func (_m *mock_unpacker) detectFlavor(topPath string, flavor string) (string, error) {
	ret := _m.Called(topPath, flavor)

	if len(ret) == 0 {
		panic("no return value specified for detectFlavor")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(topPath, flavor)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(topPath, flavor)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(topPath, flavor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mock_unpacker_detectFlavor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'detectFlavor'
type mock_unpacker_detectFlavor_Call struct {
	*mock.Call
}

// detectFlavor is a helper method to define mock.On call
//   - topPath string
//   - flavor string
func (_e *mock_unpacker_Expecter) detectFlavor(topPath interface{}, flavor interface{}) *mock_unpacker_detectFlavor_Call {
	return &mock_unpacker_detectFlavor_Call{Call: _e.mock.On("detectFlavor", topPath, flavor)}
}

func (_c *mock_unpacker_detectFlavor_Call) Run(run func(topPath string, flavor string)) *mock_unpacker_detectFlavor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mock_unpacker_detectFlavor_Call) Return(_a0 string, _a1 error) *mock_unpacker_detectFlavor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mock_unpacker_detectFlavor_Call) RunAndReturn(run func(string, string) (string, error)) *mock_unpacker_detectFlavor_Call {
	_c.Call.Return(run)
	return _c
}

// extractAgentVersion provides a mock function with given fields: metadata, version
func (_m *mock_unpacker) extractAgentVersion(metadata packageMetadata, version string) agentVersion {
	ret := _m.Called(metadata, version)

	if len(ret) == 0 {
		panic("no return value specified for extractAgentVersion")
	}

	var r0 agentVersion
	if rf, ok := ret.Get(0).(func(packageMetadata, string) agentVersion); ok {
		r0 = rf(metadata, version)
	} else {
		r0 = ret.Get(0).(agentVersion)
	}

	return r0
}

// mock_unpacker_extractAgentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'extractAgentVersion'
type mock_unpacker_extractAgentVersion_Call struct {
	*mock.Call
}

// extractAgentVersion is a helper method to define mock.On call
//   - metadata packageMetadata
//   - version string
func (_e *mock_unpacker_Expecter) extractAgentVersion(metadata interface{}, version interface{}) *mock_unpacker_extractAgentVersion_Call {
	return &mock_unpacker_extractAgentVersion_Call{Call: _e.mock.On("extractAgentVersion", metadata, version)}
}

func (_c *mock_unpacker_extractAgentVersion_Call) Run(run func(metadata packageMetadata, version string)) *mock_unpacker_extractAgentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(packageMetadata), args[1].(string))
	})
	return _c
}

func (_c *mock_unpacker_extractAgentVersion_Call) Return(_a0 agentVersion) *mock_unpacker_extractAgentVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_unpacker_extractAgentVersion_Call) RunAndReturn(run func(packageMetadata, string) agentVersion) *mock_unpacker_extractAgentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// getPackageMetadata provides a mock function with given fields: archivePath
func (_m *mock_unpacker) getPackageMetadata(archivePath string) (packageMetadata, error) {
	ret := _m.Called(archivePath)

	if len(ret) == 0 {
		panic("no return value specified for getPackageMetadata")
	}

	var r0 packageMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (packageMetadata, error)); ok {
		return rf(archivePath)
	}
	if rf, ok := ret.Get(0).(func(string) packageMetadata); ok {
		r0 = rf(archivePath)
	} else {
		r0 = ret.Get(0).(packageMetadata)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(archivePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mock_unpacker_getPackageMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getPackageMetadata'
type mock_unpacker_getPackageMetadata_Call struct {
	*mock.Call
}

// getPackageMetadata is a helper method to define mock.On call
//   - archivePath string
func (_e *mock_unpacker_Expecter) getPackageMetadata(archivePath interface{}) *mock_unpacker_getPackageMetadata_Call {
	return &mock_unpacker_getPackageMetadata_Call{Call: _e.mock.On("getPackageMetadata", archivePath)}
}

func (_c *mock_unpacker_getPackageMetadata_Call) Run(run func(archivePath string)) *mock_unpacker_getPackageMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mock_unpacker_getPackageMetadata_Call) Return(_a0 packageMetadata, _a1 error) *mock_unpacker_getPackageMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mock_unpacker_getPackageMetadata_Call) RunAndReturn(run func(string) (packageMetadata, error)) *mock_unpacker_getPackageMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// unpack provides a mock function with given fields: version, archivePath, topPath, flavor
func (_m *mock_unpacker) unpack(version string, archivePath string, topPath string, flavor string) (unpackResult, error) {
	ret := _m.Called(version, archivePath, topPath, flavor)

	if len(ret) == 0 {
		panic("no return value specified for unpack")
	}

	var r0 unpackResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (unpackResult, error)); ok {
		return rf(version, archivePath, topPath, flavor)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) unpackResult); ok {
		r0 = rf(version, archivePath, topPath, flavor)
	} else {
		r0 = ret.Get(0).(unpackResult)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(version, archivePath, topPath, flavor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mock_unpacker_unpack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'unpack'
type mock_unpacker_unpack_Call struct {
	*mock.Call
}

// unpack is a helper method to define mock.On call
//   - version string
//   - archivePath string
//   - topPath string
//   - flavor string
func (_e *mock_unpacker_Expecter) unpack(version interface{}, archivePath interface{}, topPath interface{}, flavor interface{}) *mock_unpacker_unpack_Call {
	return &mock_unpacker_unpack_Call{Call: _e.mock.On("unpack", version, archivePath, topPath, flavor)}
}

func (_c *mock_unpacker_unpack_Call) Run(run func(version string, archivePath string, topPath string, flavor string)) *mock_unpacker_unpack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mock_unpacker_unpack_Call) Return(_a0 unpackResult, _a1 error) *mock_unpacker_unpack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mock_unpacker_unpack_Call) RunAndReturn(run func(string, string, string, string) (unpackResult, error)) *mock_unpacker_unpack_Call {
	_c.Call.Return(run)
	return _c
}

// newMock_unpacker creates a new instance of mock_unpacker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMock_unpacker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mock_unpacker {
	mock := &mock_unpacker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
