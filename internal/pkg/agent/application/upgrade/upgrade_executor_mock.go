// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import (
	context "context"

	download "github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade/artifact/download"
	details "github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade/details"

	fleetapi "github.com/elastic/elastic-agent/internal/pkg/fleetapi"

	info "github.com/elastic/elastic-agent/internal/pkg/agent/application/info"

	mock "github.com/stretchr/testify/mock"

	time "time"

	version "github.com/elastic/elastic-agent/pkg/version"
)

// mock_upgradeExecutor is an autogenerated mock type for the upgradeExecutor type
type mock_upgradeExecutor struct {
	mock.Mock
}

type mock_upgradeExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *mock_upgradeExecutor) EXPECT() *mock_upgradeExecutor_Expecter {
	return &mock_upgradeExecutor_Expecter{mock: &_m.Mock}
}

// downloadArtifact provides a mock function with given fields: ctx, parsedTargetVersion, agentInfo, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp, pgpBytes
func (_m *mock_upgradeExecutor) downloadArtifact(ctx context.Context, parsedTargetVersion *version.ParsedSemVer, agentInfo info.Agent, sourceURI string, fleetServerURI string, upgradeDetails *details.Details, skipVerifyOverride bool, skipDefaultPgp bool, pgpBytes ...string) (download.DownloadResult, error) {
	_va := make([]interface{}, len(pgpBytes))
	for _i := range pgpBytes {
		_va[_i] = pgpBytes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, parsedTargetVersion, agentInfo, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for downloadArtifact")
	}

	var r0 download.DownloadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *version.ParsedSemVer, info.Agent, string, string, *details.Details, bool, bool, ...string) (download.DownloadResult, error)); ok {
		return rf(ctx, parsedTargetVersion, agentInfo, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp, pgpBytes...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *version.ParsedSemVer, info.Agent, string, string, *details.Details, bool, bool, ...string) download.DownloadResult); ok {
		r0 = rf(ctx, parsedTargetVersion, agentInfo, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp, pgpBytes...)
	} else {
		r0 = ret.Get(0).(download.DownloadResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *version.ParsedSemVer, info.Agent, string, string, *details.Details, bool, bool, ...string) error); ok {
		r1 = rf(ctx, parsedTargetVersion, agentInfo, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp, pgpBytes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mock_upgradeExecutor_downloadArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'downloadArtifact'
type mock_upgradeExecutor_downloadArtifact_Call struct {
	*mock.Call
}

// downloadArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - parsedTargetVersion *version.ParsedSemVer
//   - agentInfo info.Agent
//   - sourceURI string
//   - fleetServerURI string
//   - upgradeDetails *details.Details
//   - skipVerifyOverride bool
//   - skipDefaultPgp bool
//   - pgpBytes ...string
func (_e *mock_upgradeExecutor_Expecter) downloadArtifact(ctx interface{}, parsedTargetVersion interface{}, agentInfo interface{}, sourceURI interface{}, fleetServerURI interface{}, upgradeDetails interface{}, skipVerifyOverride interface{}, skipDefaultPgp interface{}, pgpBytes ...interface{}) *mock_upgradeExecutor_downloadArtifact_Call {
	return &mock_upgradeExecutor_downloadArtifact_Call{Call: _e.mock.On("downloadArtifact",
		append([]interface{}{ctx, parsedTargetVersion, agentInfo, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp}, pgpBytes...)...)}
}

func (_c *mock_upgradeExecutor_downloadArtifact_Call) Run(run func(ctx context.Context, parsedTargetVersion *version.ParsedSemVer, agentInfo info.Agent, sourceURI string, fleetServerURI string, upgradeDetails *details.Details, skipVerifyOverride bool, skipDefaultPgp bool, pgpBytes ...string)) *mock_upgradeExecutor_downloadArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-8)
		for i, a := range args[8:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(*version.ParsedSemVer), args[2].(info.Agent), args[3].(string), args[4].(string), args[5].(*details.Details), args[6].(bool), args[7].(bool), variadicArgs...)
	})
	return _c
}

func (_c *mock_upgradeExecutor_downloadArtifact_Call) Return(_a0 download.DownloadResult, _a1 error) *mock_upgradeExecutor_downloadArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mock_upgradeExecutor_downloadArtifact_Call) RunAndReturn(run func(context.Context, *version.ParsedSemVer, info.Agent, string, string, *details.Details, bool, bool, ...string) (download.DownloadResult, error)) *mock_upgradeExecutor_downloadArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// replaceOldWithNew provides a mock function with given fields: unpackStepResult0, currentVersionedHome, topPath, agentName, currentHome, oldRunPath, newRunPath, symlinkPath, newBinPath, upgradeDetails
func (_m *mock_upgradeExecutor) replaceOldWithNew(unpackStepResult0 unpackStepResult, currentVersionedHome string, topPath string, agentName string, currentHome string, oldRunPath string, newRunPath string, symlinkPath string, newBinPath string, upgradeDetails *details.Details) error {
	ret := _m.Called(unpackStepResult0, currentVersionedHome, topPath, agentName, currentHome, oldRunPath, newRunPath, symlinkPath, newBinPath, upgradeDetails)

	if len(ret) == 0 {
		panic("no return value specified for replaceOldWithNew")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(unpackStepResult, string, string, string, string, string, string, string, string, *details.Details) error); ok {
		r0 = rf(unpackStepResult0, currentVersionedHome, topPath, agentName, currentHome, oldRunPath, newRunPath, symlinkPath, newBinPath, upgradeDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_upgradeExecutor_replaceOldWithNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'replaceOldWithNew'
type mock_upgradeExecutor_replaceOldWithNew_Call struct {
	*mock.Call
}

// replaceOldWithNew is a helper method to define mock.On call
//   - unpackStepResult0 unpackStepResult
//   - currentVersionedHome string
//   - topPath string
//   - agentName string
//   - currentHome string
//   - oldRunPath string
//   - newRunPath string
//   - symlinkPath string
//   - newBinPath string
//   - upgradeDetails *details.Details
func (_e *mock_upgradeExecutor_Expecter) replaceOldWithNew(unpackStepResult0 interface{}, currentVersionedHome interface{}, topPath interface{}, agentName interface{}, currentHome interface{}, oldRunPath interface{}, newRunPath interface{}, symlinkPath interface{}, newBinPath interface{}, upgradeDetails interface{}) *mock_upgradeExecutor_replaceOldWithNew_Call {
	return &mock_upgradeExecutor_replaceOldWithNew_Call{Call: _e.mock.On("replaceOldWithNew", unpackStepResult0, currentVersionedHome, topPath, agentName, currentHome, oldRunPath, newRunPath, symlinkPath, newBinPath, upgradeDetails)}
}

func (_c *mock_upgradeExecutor_replaceOldWithNew_Call) Run(run func(unpackStepResult0 unpackStepResult, currentVersionedHome string, topPath string, agentName string, currentHome string, oldRunPath string, newRunPath string, symlinkPath string, newBinPath string, upgradeDetails *details.Details)) *mock_upgradeExecutor_replaceOldWithNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(unpackStepResult), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(*details.Details))
	})
	return _c
}

func (_c *mock_upgradeExecutor_replaceOldWithNew_Call) Return(_a0 error) *mock_upgradeExecutor_replaceOldWithNew_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_upgradeExecutor_replaceOldWithNew_Call) RunAndReturn(run func(unpackStepResult, string, string, string, string, string, string, string, string, *details.Details) error) *mock_upgradeExecutor_replaceOldWithNew_Call {
	_c.Call.Return(run)
	return _c
}

// unpackArtifact provides a mock function with given fields: downloadResult, _a1, archivePath, topPath, flavor, dataPath, currentHome, upgradeDetails, currentVersion, checkUpgradeFn9
func (_m *mock_upgradeExecutor) unpackArtifact(downloadResult download.DownloadResult, _a1 string, archivePath string, topPath string, flavor string, dataPath string, currentHome string, upgradeDetails *details.Details, currentVersion agentVersion, checkUpgradeFn9 checkUpgradeFn) (unpackStepResult, error) {
	ret := _m.Called(downloadResult, _a1, archivePath, topPath, flavor, dataPath, currentHome, upgradeDetails, currentVersion, checkUpgradeFn9)

	if len(ret) == 0 {
		panic("no return value specified for unpackArtifact")
	}

	var r0 unpackStepResult
	var r1 error
	if rf, ok := ret.Get(0).(func(download.DownloadResult, string, string, string, string, string, string, *details.Details, agentVersion, checkUpgradeFn) (unpackStepResult, error)); ok {
		return rf(downloadResult, _a1, archivePath, topPath, flavor, dataPath, currentHome, upgradeDetails, currentVersion, checkUpgradeFn9)
	}
	if rf, ok := ret.Get(0).(func(download.DownloadResult, string, string, string, string, string, string, *details.Details, agentVersion, checkUpgradeFn) unpackStepResult); ok {
		r0 = rf(downloadResult, _a1, archivePath, topPath, flavor, dataPath, currentHome, upgradeDetails, currentVersion, checkUpgradeFn9)
	} else {
		r0 = ret.Get(0).(unpackStepResult)
	}

	if rf, ok := ret.Get(1).(func(download.DownloadResult, string, string, string, string, string, string, *details.Details, agentVersion, checkUpgradeFn) error); ok {
		r1 = rf(downloadResult, _a1, archivePath, topPath, flavor, dataPath, currentHome, upgradeDetails, currentVersion, checkUpgradeFn9)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mock_upgradeExecutor_unpackArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'unpackArtifact'
type mock_upgradeExecutor_unpackArtifact_Call struct {
	*mock.Call
}

// unpackArtifact is a helper method to define mock.On call
//   - downloadResult download.DownloadResult
//   - _a1 string
//   - archivePath string
//   - topPath string
//   - flavor string
//   - dataPath string
//   - currentHome string
//   - upgradeDetails *details.Details
//   - currentVersion agentVersion
//   - checkUpgradeFn9 checkUpgradeFn
func (_e *mock_upgradeExecutor_Expecter) unpackArtifact(downloadResult interface{}, _a1 interface{}, archivePath interface{}, topPath interface{}, flavor interface{}, dataPath interface{}, currentHome interface{}, upgradeDetails interface{}, currentVersion interface{}, checkUpgradeFn9 interface{}) *mock_upgradeExecutor_unpackArtifact_Call {
	return &mock_upgradeExecutor_unpackArtifact_Call{Call: _e.mock.On("unpackArtifact", downloadResult, _a1, archivePath, topPath, flavor, dataPath, currentHome, upgradeDetails, currentVersion, checkUpgradeFn9)}
}

func (_c *mock_upgradeExecutor_unpackArtifact_Call) Run(run func(downloadResult download.DownloadResult, _a1 string, archivePath string, topPath string, flavor string, dataPath string, currentHome string, upgradeDetails *details.Details, currentVersion agentVersion, checkUpgradeFn9 checkUpgradeFn)) *mock_upgradeExecutor_unpackArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(download.DownloadResult), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(*details.Details), args[8].(agentVersion), args[9].(checkUpgradeFn))
	})
	return _c
}

func (_c *mock_upgradeExecutor_unpackArtifact_Call) Return(_a0 unpackStepResult, _a1 error) *mock_upgradeExecutor_unpackArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mock_upgradeExecutor_unpackArtifact_Call) RunAndReturn(run func(download.DownloadResult, string, string, string, string, string, string, *details.Details, agentVersion, checkUpgradeFn) (unpackStepResult, error)) *mock_upgradeExecutor_unpackArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// watchNewAgent provides a mock function with given fields: ctx, markerFilePath, topPath, dataPath, waitTime, createTimeoutContext, newAgentInstall, previousAgentInstall, action, upgradeDetails, upgradeOutcome
func (_m *mock_upgradeExecutor) watchNewAgent(ctx context.Context, markerFilePath string, topPath string, dataPath string, waitTime time.Duration, createTimeoutContext createContextWithTimeout, newAgentInstall agentInstall, previousAgentInstall agentInstall, action *fleetapi.ActionUpgrade, upgradeDetails *details.Details, upgradeOutcome UpgradeOutcome) error {
	ret := _m.Called(ctx, markerFilePath, topPath, dataPath, waitTime, createTimeoutContext, newAgentInstall, previousAgentInstall, action, upgradeDetails, upgradeOutcome)

	if len(ret) == 0 {
		panic("no return value specified for watchNewAgent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration, createContextWithTimeout, agentInstall, agentInstall, *fleetapi.ActionUpgrade, *details.Details, UpgradeOutcome) error); ok {
		r0 = rf(ctx, markerFilePath, topPath, dataPath, waitTime, createTimeoutContext, newAgentInstall, previousAgentInstall, action, upgradeDetails, upgradeOutcome)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_upgradeExecutor_watchNewAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'watchNewAgent'
type mock_upgradeExecutor_watchNewAgent_Call struct {
	*mock.Call
}

// watchNewAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - markerFilePath string
//   - topPath string
//   - dataPath string
//   - waitTime time.Duration
//   - createTimeoutContext createContextWithTimeout
//   - newAgentInstall agentInstall
//   - previousAgentInstall agentInstall
//   - action *fleetapi.ActionUpgrade
//   - upgradeDetails *details.Details
//   - upgradeOutcome UpgradeOutcome
func (_e *mock_upgradeExecutor_Expecter) watchNewAgent(ctx interface{}, markerFilePath interface{}, topPath interface{}, dataPath interface{}, waitTime interface{}, createTimeoutContext interface{}, newAgentInstall interface{}, previousAgentInstall interface{}, action interface{}, upgradeDetails interface{}, upgradeOutcome interface{}) *mock_upgradeExecutor_watchNewAgent_Call {
	return &mock_upgradeExecutor_watchNewAgent_Call{Call: _e.mock.On("watchNewAgent", ctx, markerFilePath, topPath, dataPath, waitTime, createTimeoutContext, newAgentInstall, previousAgentInstall, action, upgradeDetails, upgradeOutcome)}
}

func (_c *mock_upgradeExecutor_watchNewAgent_Call) Run(run func(ctx context.Context, markerFilePath string, topPath string, dataPath string, waitTime time.Duration, createTimeoutContext createContextWithTimeout, newAgentInstall agentInstall, previousAgentInstall agentInstall, action *fleetapi.ActionUpgrade, upgradeDetails *details.Details, upgradeOutcome UpgradeOutcome)) *mock_upgradeExecutor_watchNewAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(time.Duration), args[5].(createContextWithTimeout), args[6].(agentInstall), args[7].(agentInstall), args[8].(*fleetapi.ActionUpgrade), args[9].(*details.Details), args[10].(UpgradeOutcome))
	})
	return _c
}

func (_c *mock_upgradeExecutor_watchNewAgent_Call) Return(_a0 error) *mock_upgradeExecutor_watchNewAgent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_upgradeExecutor_watchNewAgent_Call) RunAndReturn(run func(context.Context, string, string, string, time.Duration, createContextWithTimeout, agentInstall, agentInstall, *fleetapi.ActionUpgrade, *details.Details, UpgradeOutcome) error) *mock_upgradeExecutor_watchNewAgent_Call {
	_c.Call.Return(run)
	return _c
}

// newMock_upgradeExecutor creates a new instance of mock_upgradeExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMock_upgradeExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *mock_upgradeExecutor {
	mock := &mock_upgradeExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
