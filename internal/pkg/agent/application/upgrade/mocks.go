// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package upgrade

import (
	"context"
	"os/exec"
	"time"

	mock "github.com/stretchr/testify/mock"

	"github.com/elastic/elastic-agent/internal/pkg/agent/application/filelock"
	"github.com/elastic/elastic-agent/pkg/core/logger"
)

// NewMockWatcherHelper creates a new instance of MockWatcherHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatcherHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatcherHelper {
	mock := &MockWatcherHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWatcherHelper is an autogenerated mock type for the WatcherHelper type
type MockWatcherHelper struct {
	mock.Mock
}

type MockWatcherHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWatcherHelper) EXPECT() *MockWatcherHelper_Expecter {
	return &MockWatcherHelper_Expecter{mock: &_m.Mock}
}

// InvokeWatcher provides a mock function for the type MockWatcherHelper
func (_mock *MockWatcherHelper) InvokeWatcher(log *logger.Logger, agentExecutable string, additionalWatchArgs ...string) (*exec.Cmd, error) {
	// string
	_va := make([]interface{}, len(additionalWatchArgs))
	for _i := range additionalWatchArgs {
		_va[_i] = additionalWatchArgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, log, agentExecutable)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeWatcher")
	}

	var r0 *exec.Cmd
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*logger.Logger, string, ...string) (*exec.Cmd, error)); ok {
		return returnFunc(log, agentExecutable, additionalWatchArgs...)
	}
	if returnFunc, ok := ret.Get(0).(func(*logger.Logger, string, ...string) *exec.Cmd); ok {
		r0 = returnFunc(log, agentExecutable, additionalWatchArgs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exec.Cmd)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*logger.Logger, string, ...string) error); ok {
		r1 = returnFunc(log, agentExecutable, additionalWatchArgs...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWatcherHelper_InvokeWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeWatcher'
type MockWatcherHelper_InvokeWatcher_Call struct {
	*mock.Call
}

// InvokeWatcher is a helper method to define mock.On call
//   - log *logger.Logger
//   - agentExecutable string
//   - additionalWatchArgs ...string
func (_e *MockWatcherHelper_Expecter) InvokeWatcher(log interface{}, agentExecutable interface{}, additionalWatchArgs ...interface{}) *MockWatcherHelper_InvokeWatcher_Call {
	return &MockWatcherHelper_InvokeWatcher_Call{Call: _e.mock.On("InvokeWatcher",
		append([]interface{}{log, agentExecutable}, additionalWatchArgs...)...)}
}

func (_c *MockWatcherHelper_InvokeWatcher_Call) Run(run func(log *logger.Logger, agentExecutable string, additionalWatchArgs ...string)) *MockWatcherHelper_InvokeWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *logger.Logger
		if args[0] != nil {
			arg0 = args[0].(*logger.Logger)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockWatcherHelper_InvokeWatcher_Call) Return(cmd *exec.Cmd, err error) *MockWatcherHelper_InvokeWatcher_Call {
	_c.Call.Return(cmd, err)
	return _c
}

func (_c *MockWatcherHelper_InvokeWatcher_Call) RunAndReturn(run func(log *logger.Logger, agentExecutable string, additionalWatchArgs ...string) (*exec.Cmd, error)) *MockWatcherHelper_InvokeWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// SelectWatcherExecutable provides a mock function for the type MockWatcherHelper
func (_mock *MockWatcherHelper) SelectWatcherExecutable(topDir string, previous agentInstall, current agentInstall) string {
	ret := _mock.Called(topDir, previous, current)

	if len(ret) == 0 {
		panic("no return value specified for SelectWatcherExecutable")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, agentInstall, agentInstall) string); ok {
		r0 = returnFunc(topDir, previous, current)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockWatcherHelper_SelectWatcherExecutable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectWatcherExecutable'
type MockWatcherHelper_SelectWatcherExecutable_Call struct {
	*mock.Call
}

// SelectWatcherExecutable is a helper method to define mock.On call
//   - topDir string
//   - previous agentInstall
//   - current agentInstall
func (_e *MockWatcherHelper_Expecter) SelectWatcherExecutable(topDir interface{}, previous interface{}, current interface{}) *MockWatcherHelper_SelectWatcherExecutable_Call {
	return &MockWatcherHelper_SelectWatcherExecutable_Call{Call: _e.mock.On("SelectWatcherExecutable", topDir, previous, current)}
}

func (_c *MockWatcherHelper_SelectWatcherExecutable_Call) Run(run func(topDir string, previous agentInstall, current agentInstall)) *MockWatcherHelper_SelectWatcherExecutable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 agentInstall
		if args[1] != nil {
			arg1 = args[1].(agentInstall)
		}
		var arg2 agentInstall
		if args[2] != nil {
			arg2 = args[2].(agentInstall)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockWatcherHelper_SelectWatcherExecutable_Call) Return(s string) *MockWatcherHelper_SelectWatcherExecutable_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockWatcherHelper_SelectWatcherExecutable_Call) RunAndReturn(run func(topDir string, previous agentInstall, current agentInstall) string) *MockWatcherHelper_SelectWatcherExecutable_Call {
	_c.Call.Return(run)
	return _c
}

// TakeOverWatcher provides a mock function for the type MockWatcherHelper
func (_mock *MockWatcherHelper) TakeOverWatcher(ctx context.Context, log *logger.Logger, topDir string) (*filelock.AppLocker, error) {
	ret := _mock.Called(ctx, log, topDir)

	if len(ret) == 0 {
		panic("no return value specified for TakeOverWatcher")
	}

	var r0 *filelock.AppLocker
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) (*filelock.AppLocker, error)); ok {
		return returnFunc(ctx, log, topDir)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) *filelock.AppLocker); ok {
		r0 = returnFunc(ctx, log, topDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filelock.AppLocker)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *logger.Logger, string) error); ok {
		r1 = returnFunc(ctx, log, topDir)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWatcherHelper_TakeOverWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeOverWatcher'
type MockWatcherHelper_TakeOverWatcher_Call struct {
	*mock.Call
}

// TakeOverWatcher is a helper method to define mock.On call
//   - ctx context.Context
//   - log *logger.Logger
//   - topDir string
func (_e *MockWatcherHelper_Expecter) TakeOverWatcher(ctx interface{}, log interface{}, topDir interface{}) *MockWatcherHelper_TakeOverWatcher_Call {
	return &MockWatcherHelper_TakeOverWatcher_Call{Call: _e.mock.On("TakeOverWatcher", ctx, log, topDir)}
}

func (_c *MockWatcherHelper_TakeOverWatcher_Call) Run(run func(ctx context.Context, log *logger.Logger, topDir string)) *MockWatcherHelper_TakeOverWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *logger.Logger
		if args[1] != nil {
			arg1 = args[1].(*logger.Logger)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockWatcherHelper_TakeOverWatcher_Call) Return(appLocker *filelock.AppLocker, err error) *MockWatcherHelper_TakeOverWatcher_Call {
	_c.Call.Return(appLocker, err)
	return _c
}

func (_c *MockWatcherHelper_TakeOverWatcher_Call) RunAndReturn(run func(ctx context.Context, log *logger.Logger, topDir string) (*filelock.AppLocker, error)) *MockWatcherHelper_TakeOverWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForWatcher provides a mock function for the type MockWatcherHelper
func (_mock *MockWatcherHelper) WaitForWatcher(ctx context.Context, log *logger.Logger, markerFilePath string, waitTime time.Duration) error {
	ret := _mock.Called(ctx, log, markerFilePath, waitTime)

	if len(ret) == 0 {
		panic("no return value specified for WaitForWatcher")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *logger.Logger, string, time.Duration) error); ok {
		r0 = returnFunc(ctx, log, markerFilePath, waitTime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWatcherHelper_WaitForWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForWatcher'
type MockWatcherHelper_WaitForWatcher_Call struct {
	*mock.Call
}

// WaitForWatcher is a helper method to define mock.On call
//   - ctx context.Context
//   - log *logger.Logger
//   - markerFilePath string
//   - waitTime time.Duration
func (_e *MockWatcherHelper_Expecter) WaitForWatcher(ctx interface{}, log interface{}, markerFilePath interface{}, waitTime interface{}) *MockWatcherHelper_WaitForWatcher_Call {
	return &MockWatcherHelper_WaitForWatcher_Call{Call: _e.mock.On("WaitForWatcher", ctx, log, markerFilePath, waitTime)}
}

func (_c *MockWatcherHelper_WaitForWatcher_Call) Run(run func(ctx context.Context, log *logger.Logger, markerFilePath string, waitTime time.Duration)) *MockWatcherHelper_WaitForWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *logger.Logger
		if args[1] != nil {
			arg1 = args[1].(*logger.Logger)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockWatcherHelper_WaitForWatcher_Call) Return(err error) *MockWatcherHelper_WaitForWatcher_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWatcherHelper_WaitForWatcher_Call) RunAndReturn(run func(ctx context.Context, log *logger.Logger, markerFilePath string, waitTime time.Duration) error) *MockWatcherHelper_WaitForWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAvailableRollbacksSource creates a new instance of mockAvailableRollbacksSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAvailableRollbacksSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAvailableRollbacksSource {
	mock := &mockAvailableRollbacksSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockAvailableRollbacksSource is an autogenerated mock type for the availableRollbacksSource type
type mockAvailableRollbacksSource struct {
	mock.Mock
}

type mockAvailableRollbacksSource_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAvailableRollbacksSource) EXPECT() *mockAvailableRollbacksSource_Expecter {
	return &mockAvailableRollbacksSource_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type mockAvailableRollbacksSource
func (_mock *mockAvailableRollbacksSource) Get() (map[string]TTLMarker, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 map[string]TTLMarker
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (map[string]TTLMarker, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() map[string]TTLMarker); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]TTLMarker)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockAvailableRollbacksSource_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockAvailableRollbacksSource_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *mockAvailableRollbacksSource_Expecter) Get() *mockAvailableRollbacksSource_Get_Call {
	return &mockAvailableRollbacksSource_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *mockAvailableRollbacksSource_Get_Call) Run(run func()) *mockAvailableRollbacksSource_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockAvailableRollbacksSource_Get_Call) Return(stringToTTLMarker map[string]TTLMarker, err error) *mockAvailableRollbacksSource_Get_Call {
	_c.Call.Return(stringToTTLMarker, err)
	return _c
}

func (_c *mockAvailableRollbacksSource_Get_Call) RunAndReturn(run func() (map[string]TTLMarker, error)) *mockAvailableRollbacksSource_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type mockAvailableRollbacksSource
func (_mock *mockAvailableRollbacksSource) Set(stringToTTLMarker map[string]TTLMarker) error {
	ret := _mock.Called(stringToTTLMarker)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[string]TTLMarker) error); ok {
		r0 = returnFunc(stringToTTLMarker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockAvailableRollbacksSource_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mockAvailableRollbacksSource_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - stringToTTLMarker map[string]TTLMarker
func (_e *mockAvailableRollbacksSource_Expecter) Set(stringToTTLMarker interface{}) *mockAvailableRollbacksSource_Set_Call {
	return &mockAvailableRollbacksSource_Set_Call{Call: _e.mock.On("Set", stringToTTLMarker)}
}

func (_c *mockAvailableRollbacksSource_Set_Call) Run(run func(stringToTTLMarker map[string]TTLMarker)) *mockAvailableRollbacksSource_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]TTLMarker
		if args[0] != nil {
			arg0 = args[0].(map[string]TTLMarker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockAvailableRollbacksSource_Set_Call) Return(err error) *mockAvailableRollbacksSource_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockAvailableRollbacksSource_Set_Call) RunAndReturn(run func(stringToTTLMarker map[string]TTLMarker) error) *mockAvailableRollbacksSource_Set_Call {
	_c.Call.Return(run)
	return _c
}

// newMockWatcherGrappler creates a new instance of mockWatcherGrappler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockWatcherGrappler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockWatcherGrappler {
	mock := &mockWatcherGrappler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockWatcherGrappler is an autogenerated mock type for the watcherGrappler type
type mockWatcherGrappler struct {
	mock.Mock
}

type mockWatcherGrappler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockWatcherGrappler) EXPECT() *mockWatcherGrappler_Expecter {
	return &mockWatcherGrappler_Expecter{mock: &_m.Mock}
}

// TakeDownWatcher provides a mock function for the type mockWatcherGrappler
func (_mock *mockWatcherGrappler) TakeDownWatcher(ctx context.Context, log *logger.Logger) error {
	ret := _mock.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for TakeDownWatcher")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *logger.Logger) error); ok {
		r0 = returnFunc(ctx, log)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockWatcherGrappler_TakeDownWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeDownWatcher'
type mockWatcherGrappler_TakeDownWatcher_Call struct {
	*mock.Call
}

// TakeDownWatcher is a helper method to define mock.On call
//   - ctx context.Context
//   - log *logger.Logger
func (_e *mockWatcherGrappler_Expecter) TakeDownWatcher(ctx interface{}, log interface{}) *mockWatcherGrappler_TakeDownWatcher_Call {
	return &mockWatcherGrappler_TakeDownWatcher_Call{Call: _e.mock.On("TakeDownWatcher", ctx, log)}
}

func (_c *mockWatcherGrappler_TakeDownWatcher_Call) Run(run func(ctx context.Context, log *logger.Logger)) *mockWatcherGrappler_TakeDownWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *logger.Logger
		if args[1] != nil {
			arg1 = args[1].(*logger.Logger)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockWatcherGrappler_TakeDownWatcher_Call) Return(err error) *mockWatcherGrappler_TakeDownWatcher_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockWatcherGrappler_TakeDownWatcher_Call) RunAndReturn(run func(ctx context.Context, log *logger.Logger) error) *mockWatcherGrappler_TakeDownWatcher_Call {
	_c.Call.Return(run)
	return _c
}
