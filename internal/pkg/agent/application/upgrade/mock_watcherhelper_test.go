// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import (
	context "context"
	exec "os/exec"

	logp "github.com/elastic/elastic-agent-libs/logp"
	filelock "github.com/elastic/elastic-agent/internal/pkg/agent/application/filelock"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockWatcherHelper is an autogenerated mock type for the WatcherHelper type
type MockWatcherHelper struct {
	mock.Mock
}

type MockWatcherHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWatcherHelper) EXPECT() *MockWatcherHelper_Expecter {
	return &MockWatcherHelper_Expecter{mock: &_m.Mock}
}

// InvokeWatcher provides a mock function with given fields: log, agentExecutable, additionalWatchArgs
func (_m *MockWatcherHelper) InvokeWatcher(log *logp.Logger, agentExecutable string, additionalWatchArgs ...string) (*exec.Cmd, error) {
	_va := make([]interface{}, len(additionalWatchArgs))
	for _i := range additionalWatchArgs {
		_va[_i] = additionalWatchArgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, log, agentExecutable)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeWatcher")
	}

	var r0 *exec.Cmd
	var r1 error
	if rf, ok := ret.Get(0).(func(*logp.Logger, string, ...string) (*exec.Cmd, error)); ok {
		return rf(log, agentExecutable, additionalWatchArgs...)
	}
	if rf, ok := ret.Get(0).(func(*logp.Logger, string, ...string) *exec.Cmd); ok {
		r0 = rf(log, agentExecutable, additionalWatchArgs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exec.Cmd)
		}
	}

	if rf, ok := ret.Get(1).(func(*logp.Logger, string, ...string) error); ok {
		r1 = rf(log, agentExecutable, additionalWatchArgs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWatcherHelper_InvokeWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeWatcher'
type MockWatcherHelper_InvokeWatcher_Call struct {
	*mock.Call
}

// InvokeWatcher is a helper method to define mock.On call
//   - log *logp.Logger
//   - agentExecutable string
//   - additionalWatchArgs ...string
func (_e *MockWatcherHelper_Expecter) InvokeWatcher(log interface{}, agentExecutable interface{}, additionalWatchArgs ...interface{}) *MockWatcherHelper_InvokeWatcher_Call {
	return &MockWatcherHelper_InvokeWatcher_Call{Call: _e.mock.On("InvokeWatcher",
		append([]interface{}{log, agentExecutable}, additionalWatchArgs...)...)}
}

func (_c *MockWatcherHelper_InvokeWatcher_Call) Run(run func(log *logp.Logger, agentExecutable string, additionalWatchArgs ...string)) *MockWatcherHelper_InvokeWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(*logp.Logger), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockWatcherHelper_InvokeWatcher_Call) Return(_a0 *exec.Cmd, _a1 error) *MockWatcherHelper_InvokeWatcher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWatcherHelper_InvokeWatcher_Call) RunAndReturn(run func(*logp.Logger, string, ...string) (*exec.Cmd, error)) *MockWatcherHelper_InvokeWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// SelectWatcherExecutable provides a mock function with given fields: topDir, previous, current
func (_m *MockWatcherHelper) SelectWatcherExecutable(topDir string, previous agentInstall, current agentInstall) string {
	ret := _m.Called(topDir, previous, current)

	if len(ret) == 0 {
		panic("no return value specified for SelectWatcherExecutable")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, agentInstall, agentInstall) string); ok {
		r0 = rf(topDir, previous, current)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockWatcherHelper_SelectWatcherExecutable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectWatcherExecutable'
type MockWatcherHelper_SelectWatcherExecutable_Call struct {
	*mock.Call
}

// SelectWatcherExecutable is a helper method to define mock.On call
//   - topDir string
//   - previous agentInstall
//   - current agentInstall
func (_e *MockWatcherHelper_Expecter) SelectWatcherExecutable(topDir interface{}, previous interface{}, current interface{}) *MockWatcherHelper_SelectWatcherExecutable_Call {
	return &MockWatcherHelper_SelectWatcherExecutable_Call{Call: _e.mock.On("SelectWatcherExecutable", topDir, previous, current)}
}

func (_c *MockWatcherHelper_SelectWatcherExecutable_Call) Run(run func(topDir string, previous agentInstall, current agentInstall)) *MockWatcherHelper_SelectWatcherExecutable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(agentInstall), args[2].(agentInstall))
	})
	return _c
}

func (_c *MockWatcherHelper_SelectWatcherExecutable_Call) Return(_a0 string) *MockWatcherHelper_SelectWatcherExecutable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatcherHelper_SelectWatcherExecutable_Call) RunAndReturn(run func(string, agentInstall, agentInstall) string) *MockWatcherHelper_SelectWatcherExecutable_Call {
	_c.Call.Return(run)
	return _c
}

// TakeOverWatcher provides a mock function with given fields: ctx, log, topDir
func (_m *MockWatcherHelper) TakeOverWatcher(ctx context.Context, log *logp.Logger, topDir string) (*filelock.AppLocker, error) {
	ret := _m.Called(ctx, log, topDir)

	if len(ret) == 0 {
		panic("no return value specified for TakeOverWatcher")
	}

	var r0 *filelock.AppLocker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logp.Logger, string) (*filelock.AppLocker, error)); ok {
		return rf(ctx, log, topDir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logp.Logger, string) *filelock.AppLocker); ok {
		r0 = rf(ctx, log, topDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filelock.AppLocker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logp.Logger, string) error); ok {
		r1 = rf(ctx, log, topDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWatcherHelper_TakeOverWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeOverWatcher'
type MockWatcherHelper_TakeOverWatcher_Call struct {
	*mock.Call
}

// TakeOverWatcher is a helper method to define mock.On call
//   - ctx context.Context
//   - log *logp.Logger
//   - topDir string
func (_e *MockWatcherHelper_Expecter) TakeOverWatcher(ctx interface{}, log interface{}, topDir interface{}) *MockWatcherHelper_TakeOverWatcher_Call {
	return &MockWatcherHelper_TakeOverWatcher_Call{Call: _e.mock.On("TakeOverWatcher", ctx, log, topDir)}
}

func (_c *MockWatcherHelper_TakeOverWatcher_Call) Run(run func(ctx context.Context, log *logp.Logger, topDir string)) *MockWatcherHelper_TakeOverWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*logp.Logger), args[2].(string))
	})
	return _c
}

func (_c *MockWatcherHelper_TakeOverWatcher_Call) Return(_a0 *filelock.AppLocker, _a1 error) *MockWatcherHelper_TakeOverWatcher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWatcherHelper_TakeOverWatcher_Call) RunAndReturn(run func(context.Context, *logp.Logger, string) (*filelock.AppLocker, error)) *MockWatcherHelper_TakeOverWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForWatcher provides a mock function with given fields: ctx, log, markerFilePath, waitTime
func (_m *MockWatcherHelper) WaitForWatcher(ctx context.Context, log *logp.Logger, markerFilePath string, waitTime time.Duration) error {
	ret := _m.Called(ctx, log, markerFilePath, waitTime)

	if len(ret) == 0 {
		panic("no return value specified for WaitForWatcher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logp.Logger, string, time.Duration) error); ok {
		r0 = rf(ctx, log, markerFilePath, waitTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatcherHelper_WaitForWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForWatcher'
type MockWatcherHelper_WaitForWatcher_Call struct {
	*mock.Call
}

// WaitForWatcher is a helper method to define mock.On call
//   - ctx context.Context
//   - log *logp.Logger
//   - markerFilePath string
//   - waitTime time.Duration
func (_e *MockWatcherHelper_Expecter) WaitForWatcher(ctx interface{}, log interface{}, markerFilePath interface{}, waitTime interface{}) *MockWatcherHelper_WaitForWatcher_Call {
	return &MockWatcherHelper_WaitForWatcher_Call{Call: _e.mock.On("WaitForWatcher", ctx, log, markerFilePath, waitTime)}
}

func (_c *MockWatcherHelper_WaitForWatcher_Call) Run(run func(ctx context.Context, log *logp.Logger, markerFilePath string, waitTime time.Duration)) *MockWatcherHelper_WaitForWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*logp.Logger), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockWatcherHelper_WaitForWatcher_Call) Return(_a0 error) *MockWatcherHelper_WaitForWatcher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatcherHelper_WaitForWatcher_Call) RunAndReturn(run func(context.Context, *logp.Logger, string, time.Duration) error) *MockWatcherHelper_WaitForWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWatcherHelper creates a new instance of MockWatcherHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatcherHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatcherHelper {
	mock := &MockWatcherHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
