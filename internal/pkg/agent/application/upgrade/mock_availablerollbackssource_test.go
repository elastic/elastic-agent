// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import mock "github.com/stretchr/testify/mock"

// mockAvailableRollbacksSource is an autogenerated mock type for the availableRollbacksSource type
type mockAvailableRollbacksSource struct {
	mock.Mock
}

type mockAvailableRollbacksSource_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAvailableRollbacksSource) EXPECT() *mockAvailableRollbacksSource_Expecter {
	return &mockAvailableRollbacksSource_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with no fields
func (_m *mockAvailableRollbacksSource) Get() (map[string]TTLMarker, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 map[string]TTLMarker
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]TTLMarker, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]TTLMarker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]TTLMarker)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAvailableRollbacksSource_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockAvailableRollbacksSource_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *mockAvailableRollbacksSource_Expecter) Get() *mockAvailableRollbacksSource_Get_Call {
	return &mockAvailableRollbacksSource_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *mockAvailableRollbacksSource_Get_Call) Run(run func()) *mockAvailableRollbacksSource_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockAvailableRollbacksSource_Get_Call) Return(_a0 map[string]TTLMarker, _a1 error) *mockAvailableRollbacksSource_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAvailableRollbacksSource_Get_Call) RunAndReturn(run func() (map[string]TTLMarker, error)) *mockAvailableRollbacksSource_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: _a0
func (_m *mockAvailableRollbacksSource) Set(_a0 map[string]TTLMarker) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]TTLMarker) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAvailableRollbacksSource_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mockAvailableRollbacksSource_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - _a0 map[string]TTLMarker
func (_e *mockAvailableRollbacksSource_Expecter) Set(_a0 interface{}) *mockAvailableRollbacksSource_Set_Call {
	return &mockAvailableRollbacksSource_Set_Call{Call: _e.mock.On("Set", _a0)}
}

func (_c *mockAvailableRollbacksSource_Set_Call) Run(run func(_a0 map[string]TTLMarker)) *mockAvailableRollbacksSource_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]TTLMarker))
	})
	return _c
}

func (_c *mockAvailableRollbacksSource_Set_Call) Return(_a0 error) *mockAvailableRollbacksSource_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAvailableRollbacksSource_Set_Call) RunAndReturn(run func(map[string]TTLMarker) error) *mockAvailableRollbacksSource_Set_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAvailableRollbacksSource creates a new instance of mockAvailableRollbacksSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAvailableRollbacksSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAvailableRollbacksSource {
	mock := &mockAvailableRollbacksSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
