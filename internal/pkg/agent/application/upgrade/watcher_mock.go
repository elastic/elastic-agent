// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import (
	context "context"
	exec "os/exec"

	details "github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade/details"

	fleetapi "github.com/elastic/elastic-agent/internal/pkg/fleetapi"

	logp "github.com/elastic/elastic-agent-libs/logp"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mock_watcher is an autogenerated mock type for the watcher type
type mock_watcher struct {
	mock.Mock
}

type mock_watcher_Expecter struct {
	mock *mock.Mock
}

func (_m *mock_watcher) EXPECT() *mock_watcher_Expecter {
	return &mock_watcher_Expecter{mock: &_m.Mock}
}

// invokeWatcher provides a mock function with given fields: log, agentExecutable
func (_m *mock_watcher) invokeWatcher(log *logp.Logger, agentExecutable string) (*exec.Cmd, error) {
	ret := _m.Called(log, agentExecutable)

	if len(ret) == 0 {
		panic("no return value specified for invokeWatcher")
	}

	var r0 *exec.Cmd
	var r1 error
	if rf, ok := ret.Get(0).(func(*logp.Logger, string) (*exec.Cmd, error)); ok {
		return rf(log, agentExecutable)
	}
	if rf, ok := ret.Get(0).(func(*logp.Logger, string) *exec.Cmd); ok {
		r0 = rf(log, agentExecutable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exec.Cmd)
		}
	}

	if rf, ok := ret.Get(1).(func(*logp.Logger, string) error); ok {
		r1 = rf(log, agentExecutable)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mock_watcher_invokeWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'invokeWatcher'
type mock_watcher_invokeWatcher_Call struct {
	*mock.Call
}

// invokeWatcher is a helper method to define mock.On call
//   - log *logp.Logger
//   - agentExecutable string
func (_e *mock_watcher_Expecter) invokeWatcher(log interface{}, agentExecutable interface{}) *mock_watcher_invokeWatcher_Call {
	return &mock_watcher_invokeWatcher_Call{Call: _e.mock.On("invokeWatcher", log, agentExecutable)}
}

func (_c *mock_watcher_invokeWatcher_Call) Run(run func(log *logp.Logger, agentExecutable string)) *mock_watcher_invokeWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*logp.Logger), args[1].(string))
	})
	return _c
}

func (_c *mock_watcher_invokeWatcher_Call) Return(_a0 *exec.Cmd, _a1 error) *mock_watcher_invokeWatcher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mock_watcher_invokeWatcher_Call) RunAndReturn(run func(*logp.Logger, string) (*exec.Cmd, error)) *mock_watcher_invokeWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// markUpgrade provides a mock function with given fields: log, dataDir, current, previous, action, det, outcome
func (_m *mock_watcher) markUpgrade(log *logp.Logger, dataDir string, current agentInstall, previous agentInstall, action *fleetapi.ActionUpgrade, det *details.Details, outcome UpgradeOutcome) error {
	ret := _m.Called(log, dataDir, current, previous, action, det, outcome)

	if len(ret) == 0 {
		panic("no return value specified for markUpgrade")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*logp.Logger, string, agentInstall, agentInstall, *fleetapi.ActionUpgrade, *details.Details, UpgradeOutcome) error); ok {
		r0 = rf(log, dataDir, current, previous, action, det, outcome)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_watcher_markUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'markUpgrade'
type mock_watcher_markUpgrade_Call struct {
	*mock.Call
}

// markUpgrade is a helper method to define mock.On call
//   - log *logp.Logger
//   - dataDir string
//   - current agentInstall
//   - previous agentInstall
//   - action *fleetapi.ActionUpgrade
//   - det *details.Details
//   - outcome UpgradeOutcome
func (_e *mock_watcher_Expecter) markUpgrade(log interface{}, dataDir interface{}, current interface{}, previous interface{}, action interface{}, det interface{}, outcome interface{}) *mock_watcher_markUpgrade_Call {
	return &mock_watcher_markUpgrade_Call{Call: _e.mock.On("markUpgrade", log, dataDir, current, previous, action, det, outcome)}
}

func (_c *mock_watcher_markUpgrade_Call) Run(run func(log *logp.Logger, dataDir string, current agentInstall, previous agentInstall, action *fleetapi.ActionUpgrade, det *details.Details, outcome UpgradeOutcome)) *mock_watcher_markUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*logp.Logger), args[1].(string), args[2].(agentInstall), args[3].(agentInstall), args[4].(*fleetapi.ActionUpgrade), args[5].(*details.Details), args[6].(UpgradeOutcome))
	})
	return _c
}

func (_c *mock_watcher_markUpgrade_Call) Return(_a0 error) *mock_watcher_markUpgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_watcher_markUpgrade_Call) RunAndReturn(run func(*logp.Logger, string, agentInstall, agentInstall, *fleetapi.ActionUpgrade, *details.Details, UpgradeOutcome) error) *mock_watcher_markUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// selectWatcherExecutable provides a mock function with given fields: topDir, previous, current
func (_m *mock_watcher) selectWatcherExecutable(topDir string, previous agentInstall, current agentInstall) string {
	ret := _m.Called(topDir, previous, current)

	if len(ret) == 0 {
		panic("no return value specified for selectWatcherExecutable")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, agentInstall, agentInstall) string); ok {
		r0 = rf(topDir, previous, current)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mock_watcher_selectWatcherExecutable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'selectWatcherExecutable'
type mock_watcher_selectWatcherExecutable_Call struct {
	*mock.Call
}

// selectWatcherExecutable is a helper method to define mock.On call
//   - topDir string
//   - previous agentInstall
//   - current agentInstall
func (_e *mock_watcher_Expecter) selectWatcherExecutable(topDir interface{}, previous interface{}, current interface{}) *mock_watcher_selectWatcherExecutable_Call {
	return &mock_watcher_selectWatcherExecutable_Call{Call: _e.mock.On("selectWatcherExecutable", topDir, previous, current)}
}

func (_c *mock_watcher_selectWatcherExecutable_Call) Run(run func(topDir string, previous agentInstall, current agentInstall)) *mock_watcher_selectWatcherExecutable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(agentInstall), args[2].(agentInstall))
	})
	return _c
}

func (_c *mock_watcher_selectWatcherExecutable_Call) Return(_a0 string) *mock_watcher_selectWatcherExecutable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_watcher_selectWatcherExecutable_Call) RunAndReturn(run func(string, agentInstall, agentInstall) string) *mock_watcher_selectWatcherExecutable_Call {
	_c.Call.Return(run)
	return _c
}

// waitForWatcher provides a mock function with given fields: ctx, log, markerFilePath, waitTime, createTimeoutContext
func (_m *mock_watcher) waitForWatcher(ctx context.Context, log *logp.Logger, markerFilePath string, waitTime time.Duration, createTimeoutContext createContextWithTimeout) error {
	ret := _m.Called(ctx, log, markerFilePath, waitTime, createTimeoutContext)

	if len(ret) == 0 {
		panic("no return value specified for waitForWatcher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logp.Logger, string, time.Duration, createContextWithTimeout) error); ok {
		r0 = rf(ctx, log, markerFilePath, waitTime, createTimeoutContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_watcher_waitForWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'waitForWatcher'
type mock_watcher_waitForWatcher_Call struct {
	*mock.Call
}

// waitForWatcher is a helper method to define mock.On call
//   - ctx context.Context
//   - log *logp.Logger
//   - markerFilePath string
//   - waitTime time.Duration
//   - createTimeoutContext createContextWithTimeout
func (_e *mock_watcher_Expecter) waitForWatcher(ctx interface{}, log interface{}, markerFilePath interface{}, waitTime interface{}, createTimeoutContext interface{}) *mock_watcher_waitForWatcher_Call {
	return &mock_watcher_waitForWatcher_Call{Call: _e.mock.On("waitForWatcher", ctx, log, markerFilePath, waitTime, createTimeoutContext)}
}

func (_c *mock_watcher_waitForWatcher_Call) Run(run func(ctx context.Context, log *logp.Logger, markerFilePath string, waitTime time.Duration, createTimeoutContext createContextWithTimeout)) *mock_watcher_waitForWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*logp.Logger), args[2].(string), args[3].(time.Duration), args[4].(createContextWithTimeout))
	})
	return _c
}

func (_c *mock_watcher_waitForWatcher_Call) Return(_a0 error) *mock_watcher_waitForWatcher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_watcher_waitForWatcher_Call) RunAndReturn(run func(context.Context, *logp.Logger, string, time.Duration, createContextWithTimeout) error) *mock_watcher_waitForWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// newMock_watcher creates a new instance of mock_watcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMock_watcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *mock_watcher {
	mock := &mock_watcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
