// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	logp "github.com/elastic/elastic-agent-libs/logp"
)

// mockWatcherGrappler is an autogenerated mock type for the watcherGrappler type
type mockWatcherGrappler struct {
	mock.Mock
}

type mockWatcherGrappler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockWatcherGrappler) EXPECT() *mockWatcherGrappler_Expecter {
	return &mockWatcherGrappler_Expecter{mock: &_m.Mock}
}

// TakeDownWatcher provides a mock function with given fields: ctx, log
func (_m *mockWatcherGrappler) TakeDownWatcher(ctx context.Context, log *logp.Logger) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for TakeDownWatcher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logp.Logger) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockWatcherGrappler_TakeDownWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeDownWatcher'
type mockWatcherGrappler_TakeDownWatcher_Call struct {
	*mock.Call
}

// TakeDownWatcher is a helper method to define mock.On call
//   - ctx context.Context
//   - log *logp.Logger
func (_e *mockWatcherGrappler_Expecter) TakeDownWatcher(ctx interface{}, log interface{}) *mockWatcherGrappler_TakeDownWatcher_Call {
	return &mockWatcherGrappler_TakeDownWatcher_Call{Call: _e.mock.On("TakeDownWatcher", ctx, log)}
}

func (_c *mockWatcherGrappler_TakeDownWatcher_Call) Run(run func(ctx context.Context, log *logp.Logger)) *mockWatcherGrappler_TakeDownWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*logp.Logger))
	})
	return _c
}

func (_c *mockWatcherGrappler_TakeDownWatcher_Call) Return(_a0 error) *mockWatcherGrappler_TakeDownWatcher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockWatcherGrappler_TakeDownWatcher_Call) RunAndReturn(run func(context.Context, *logp.Logger) error) *mockWatcherGrappler_TakeDownWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// newMockWatcherGrappler creates a new instance of mockWatcherGrappler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockWatcherGrappler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockWatcherGrappler {
	mock := &mockWatcherGrappler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
