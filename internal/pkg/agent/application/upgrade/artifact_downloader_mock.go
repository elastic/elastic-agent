// Code generated by mockery v2.53.4. DO NOT EDIT.

package upgrade

import (
	context "context"

	download "github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade/artifact/download"
	details "github.com/elastic/elastic-agent/internal/pkg/agent/application/upgrade/details"

	logp "github.com/elastic/elastic-agent-libs/logp"

	mock "github.com/stretchr/testify/mock"

	version "github.com/elastic/elastic-agent/pkg/version"
)

// mock_artifactDownloader is an autogenerated mock type for the artifactDownloader type
type mock_artifactDownloader struct {
	mock.Mock
}

type mock_artifactDownloader_Expecter struct {
	mock *mock.Mock
}

func (_m *mock_artifactDownloader) EXPECT() *mock_artifactDownloader_Expecter {
	return &mock_artifactDownloader_Expecter{mock: &_m.Mock}
}

// cleanNonMatchingVersionsFromDownloads provides a mock function with given fields: log, _a1
func (_m *mock_artifactDownloader) cleanNonMatchingVersionsFromDownloads(log *logp.Logger, _a1 string) error {
	ret := _m.Called(log, _a1)

	if len(ret) == 0 {
		panic("no return value specified for cleanNonMatchingVersionsFromDownloads")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*logp.Logger, string) error); ok {
		r0 = rf(log, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'cleanNonMatchingVersionsFromDownloads'
type mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call struct {
	*mock.Call
}

// cleanNonMatchingVersionsFromDownloads is a helper method to define mock.On call
//   - log *logp.Logger
//   - _a1 string
func (_e *mock_artifactDownloader_Expecter) cleanNonMatchingVersionsFromDownloads(log interface{}, _a1 interface{}) *mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call {
	return &mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call{Call: _e.mock.On("cleanNonMatchingVersionsFromDownloads", log, _a1)}
}

func (_c *mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call) Run(run func(log *logp.Logger, _a1 string)) *mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*logp.Logger), args[1].(string))
	})
	return _c
}

func (_c *mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call) Return(_a0 error) *mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call) RunAndReturn(run func(*logp.Logger, string) error) *mock_artifactDownloader_cleanNonMatchingVersionsFromDownloads_Call {
	_c.Call.Return(run)
	return _c
}

// downloadArtifact provides a mock function with given fields: ctx, parsedVersion, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp, pgpBytes
func (_m *mock_artifactDownloader) downloadArtifact(ctx context.Context, parsedVersion *version.ParsedSemVer, sourceURI string, fleetServerURI string, upgradeDetails *details.Details, skipVerifyOverride bool, skipDefaultPgp bool, pgpBytes ...string) (download.DownloadResult, error) {
	_va := make([]interface{}, len(pgpBytes))
	for _i := range pgpBytes {
		_va[_i] = pgpBytes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, parsedVersion, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for downloadArtifact")
	}

	var r0 download.DownloadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *version.ParsedSemVer, string, string, *details.Details, bool, bool, ...string) (download.DownloadResult, error)); ok {
		return rf(ctx, parsedVersion, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp, pgpBytes...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *version.ParsedSemVer, string, string, *details.Details, bool, bool, ...string) download.DownloadResult); ok {
		r0 = rf(ctx, parsedVersion, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp, pgpBytes...)
	} else {
		r0 = ret.Get(0).(download.DownloadResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *version.ParsedSemVer, string, string, *details.Details, bool, bool, ...string) error); ok {
		r1 = rf(ctx, parsedVersion, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp, pgpBytes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mock_artifactDownloader_downloadArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'downloadArtifact'
type mock_artifactDownloader_downloadArtifact_Call struct {
	*mock.Call
}

// downloadArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - parsedVersion *version.ParsedSemVer
//   - sourceURI string
//   - fleetServerURI string
//   - upgradeDetails *details.Details
//   - skipVerifyOverride bool
//   - skipDefaultPgp bool
//   - pgpBytes ...string
func (_e *mock_artifactDownloader_Expecter) downloadArtifact(ctx interface{}, parsedVersion interface{}, sourceURI interface{}, fleetServerURI interface{}, upgradeDetails interface{}, skipVerifyOverride interface{}, skipDefaultPgp interface{}, pgpBytes ...interface{}) *mock_artifactDownloader_downloadArtifact_Call {
	return &mock_artifactDownloader_downloadArtifact_Call{Call: _e.mock.On("downloadArtifact",
		append([]interface{}{ctx, parsedVersion, sourceURI, fleetServerURI, upgradeDetails, skipVerifyOverride, skipDefaultPgp}, pgpBytes...)...)}
}

func (_c *mock_artifactDownloader_downloadArtifact_Call) Run(run func(ctx context.Context, parsedVersion *version.ParsedSemVer, sourceURI string, fleetServerURI string, upgradeDetails *details.Details, skipVerifyOverride bool, skipDefaultPgp bool, pgpBytes ...string)) *mock_artifactDownloader_downloadArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-7)
		for i, a := range args[7:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(*version.ParsedSemVer), args[2].(string), args[3].(string), args[4].(*details.Details), args[5].(bool), args[6].(bool), variadicArgs...)
	})
	return _c
}

func (_c *mock_artifactDownloader_downloadArtifact_Call) Return(_a0 download.DownloadResult, _a1 error) *mock_artifactDownloader_downloadArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mock_artifactDownloader_downloadArtifact_Call) RunAndReturn(run func(context.Context, *version.ParsedSemVer, string, string, *details.Details, bool, bool, ...string) (download.DownloadResult, error)) *mock_artifactDownloader_downloadArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// newMock_artifactDownloader creates a new instance of mock_artifactDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMock_artifactDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *mock_artifactDownloader {
	mock := &mock_artifactDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
