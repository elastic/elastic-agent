// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by elastic-agent/internals/dev-tools/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/elastic-agent/internal/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// internal/spec/apm-server.yml
	// internal/spec/endpoint.yml
	// internal/spec/filebeat.yml
	// internal/spec/fleet-server.yml
	// internal/spec/heartbeat.yml
	// internal/spec/metricbeat.yml
	// internal/spec/osquerybeat.yml
	// internal/spec/packetbeat.yml
	unpacked := packer.MustUnpack("eJzEWklz4ziTvc/P6OssHxfL3ZyI7yDJzU0yXaJsAMSNACRSEkipLWohJ+a/TwBcRFK0q8pdM3NwVBkGsSQyX758wH/9tkmz1Xsa8n8cDyv6j/CQ/Ptx9X5evf9HnvDf/vM3kpgZft1HCzDx5sDjNMWcRoctgYtHxzIvZKkWGLkaRs4sQK4SQhwH+uDfUlrsI3jZR87Uyfylc3SmbhbAUYw1kGE4UuYJOAXQPWK4MJjtqnjpHKebceRsVNPZXCInYVukTzhNPE7SheHa2eTtT/XVBy70gbv2FcNeFPvr89PEcKIDmybggVpGziywQ5rKme0eAv350TGPM2c63gRoks1RtaeNc5xyZUZTcMTo+VHMO19OtkSfjJDun5F2PVB9Idud6ThyLK5gqDw6Fj5iCJSm3fbPL5vJgaQTldnPM9k2HUdEG60DzTjh5Hoo7TM6E30s/p45lhrTp33Tl1qmEj7tI5xcOUaLW3trbXXbfDnJMVTPLAHrUAOjl2jf/K38mbxjtBPnsQ00UFDViKnFZd8vjWO7vLQpP+FLu48S0QRkRMccaRlfvd72U//IcTcTcd4nNt7Lb3DCH5DuKTQBMXndRytdqWyCD8T2OeWGFsCr2tm37XFigS2zjHzI1tU8ygpN+O0bHBMbcFp01pVJP100azkyC+S3vU8KDK880P0zTe/sfjdvOZ6hMnuilvu72aZ1lplj8VOYgC0zjT2G5g4jt3jZTH5fLw56aIHTy2ZyxHCUMivau3ZWzeMZs+X4X52ncRTA0c6x4pgqGV8to91Kq+a0laMzZZxYZsEsvqUaiGni7d38Erm6y7HFCze/iDWkoWYmofZnOp+OU2IZKdX9mGpROlvs//nbv/VQYZWyw36TZj1M8OFoRy3jQNJF9KaBLUPugdm7WaCpu5fNhJPEvxCNn9hULTD0VJpwZbU4xDT1Dzgxt0z4+G2MDFtAm6YyHg+B9vboPAX6y1M0C6CnhNA4IY2fqA0UpPsjaoHiJdpnjgVO2J6cQzhSpsn1jFXjEiB/X57zZBcgVw/hw6Mzdc6vFt/QxMxXS8OsbTRXbt/PdU8JkM/n2vWMc6O1fuWvuRg7d8SYxxCO1NXTPnI2xpnai7MPrzHV/UOQG+btG6NglqngpXEkGj239znbjETbRvgT0/gJW4YusNHZPT8i87qgiZHSxMycP/GBWKBA5rVZr/x/PYd5peLcmAUossTer3RwnsTbY+i9S/vpfkysy+N0o0QYxTxQjSSEV177fI09TtKyC/J4oIM8RP7IqfpVeD6r/dsRGJrwZLV0bm0bJRO+VX8zX443VPeFv+d1G7N4hqGhCl94LsYzahkFM8X6PSWA12N1xg8YemsRn7jGFXsSMyt6dKbusJ/V67DMHOtN7GbO1G3Gbq9rvlSbM6n6FczyOU2dVpuTzRG4YN2NsfXWa3c51QxV5Caat2zwgR27/UePIRpX402UEKqc6EB52Yy156fxjNouRzo4hXAkfOpInvaz+XLCVxbYIk34yFu1v4n0/ZfNeNP2A3qLzXqOmCasaGG82K9KksY/Njesuz/HYfsMrLvJV8M4X7VLzEV6D58/w3hL5peI2fyCF5UfJeaRQdDsSdin8YuxtJfwcwUjd93vSzVwxNBTiO48CmwWGEOr3FblEk4Sc0MssKv22s9JmWP7OYNvck8Empd+PHVyue2qxOqs9ePcW+2VaiBnCcinMh6q3Li9t1U7Jrv8QYlCOLow5BfNmnu5Sq4D4QPV+JlE+xnTYk62+4gIjNX9/Wzq/16O6fdy0ZWThCnhVOSiyn66cnCeHqLn6SQmySIKLbNYamAkxhA+Ivqsl5fI1cAxQALfvQJDMw+0aCAnHbZEGxXMdmMRRwIrSWIojphPd1WS+gcC304BcrehrUTfXpXI1cycvAaKm5fzu3aWMziSPjpPcEwgP65Q1VfmxjhmU1ruZ+r/TlNwkti0HGUBPJxpWvUtaDpbjmd3OXK94SuyCu9ypMAs6PIALeq8KPE2SEDMxocyDjcT0uG5qceZDS7zhB/JctT43jcoYsTjzkbm8M387W0zn443VAMKQ+MTs0BGrWvMrLcThqM4EGf1pCYBvBb3XFqNSWKmWMRsumj3V2gK7uYQ54FFrspHR4wwJ0/qDkNXxfl3Obq1fLuaix2YANOwXxX29LL98/JsK5v5uFML3OwyHYnzTkJITwQaOwavAiPv7SA5vim4aCI4wstmssHQVGhutG2cYyTyuqsgTXCIyudNYxta5gkLnlHF7vfwSnK+5CD44DqEox1GUY27kmsK3kY0VpQx2nA84bc8gOqa2u5ZcnDNaDjmfV3ATzLWTSPGqc9pnScF1r2KWDRSepF4lgVo3MP9Hk7e40xZz2jmkZiGQlTjGCJP6eBNWb/Uay7anPeTGqbmy3xleZzaC1FjiVyfY2hmNJfne8BT+W9zjqWvT3KieZzqnuDYG7TorXWo9hK4jHwuzqVtU3r56j4am28wxGealDhOZT2qNtwIp+5ZzNnF0YlCiltbs+dLlaNtPxe+We7BX8t1N3mjf25eb72Tg4jp+3105yz9rVVD1tyol8t69aPMWQEcFUTw1E691qyrW0MJ20HzQjs1UtUu8KHkZ/L/7W+EX7AECE5cck0ZJ7RbH1pAwxUHxxY/yT1b/oH05pHYky7OzPIuYn1Bx//a44AdfdpHDPqX3lpKPm4Z21ADglvsiOa9Y+T0xpE1QI6hf6CqURDL0MW+XjaTsu1yv/+57o2oqB2KfUR1XrTskIm6mUBDw8CQdXTHl0uOoVINrOvc+BPf7QLkxw1WLX6cU2DLVAJQ45NykjkLeZcAevzL8y9H8neRkzpc5a6Ob9XW27uYqrQGUee9zYbrdyUKECvm0DsSHeyYZiqBFnX/hp5bXMd8ZMjlc1j6R2iDG3+3yjFwYqgk8fNVG4O0kRJAfrr5hxLVvnP7nm3pVL0w6BYM3vqFtq9Q02jz0HrcPbP9S5h6Z3LD5r+IDnKSmEd86/ceQPwe3NbTihslIshUWmOeMPIT4ae3df1ReFsQM+gfOhyv5b/zZTfOxO8r5HXmEbF28wewo7exRM3wcPsbOxBRJ9/GlvFeY+Lf9ger0Qc/9AmpGy72nVwdQMZJKnN2InCzrj0Czbg0OpWFc6Ipd5jJrD8e5ZotILnFz/HvG/drzqwf3yIWkag9XN7jDT1t6CM+3sxxqm22Xu6ib5vxxRH8ZjrZB8ibY7Tbu3Z2ZsgXfQzBsXGtW+gel9x5So/OlJX+kVPJ61wti3GSxVJDEtgmNRJv7+a7AQ7MV6tsWD/2y1okeqvrmMTL8K0uypr6JinrdcEf5ku11AqnakY0nztc6WnMpfbaaLjRIZdcsTwDeU6rhn8pj46dGdOoq/Xd1Z3fqQcHsWmg/uzVYFmrfvs18/dj4ZM11DHxKZ5XOaHxz2qd9VqQwC/rj0ENVur6+SQhFuBsOqo1/1M91jy5q/Gimue1uEblm4tZpb3XeCDiVvCdAfvI2CCNH6S1lj+6EE1wu90phIuhuWqefHqeNn3reQ9EjuOvsQWSAIEjs4e153st+W4de6J7Sk83vrOT1NOH9eJT7TfzRNi/zA9In5xpuvje3AXVLnd3CjVGzLfjU98n27pFy1blepv1Tdox1p6/i4mtn8553d0rVPlaYvTi7tty7PhM9cYvWnXPx1z3w3V+wmfaccCQx5tacfyle45BXva3xliOZD1C9UkcaG9f2lef88nfkce/uMdbXRJ96Q6l51vjIZ2q7tvHh1stboEYW0DikMztKdtj+PDY1aXK+Ojlxl98zzKQE+NV+J4NCENLC8Q09UtSUSXDsNPWSoQ9oSeE16x9WYoT80i1ss/PikI/cxnb6nskGktDOErnyVUUd8dv0OdBCtL7JC3IiV/MtViQDOXrokxFKFG8rgllRYyGE6pq6CHy90h3OdbAQ/uCdfiC0BWF6YrqAmhjLg82/+M0uww4co+gfiYuf05sW4FZn80NaO8vPstAkAJdPwiGSO5HwPwxIH8/+LrA3CKvg0H3a8RgmoBdiJ7TUjBkZVG0lGRVCm7MMotwSg/T6J/3l5fJKnvf0IEIfIVAoQnfVh5ZPWmonglolWQ7/GyhwMhX6XR0IJbyfam1lnNTnxM0OcorxqHoHf+dpxHXM9ZE+UVPREogFwNbYMMg7Y+bBqpxwcjdinG/Lf3fX9/A29uOP/2ARJth5Och9CRCzRPvTBJ8wPlI0HMpNQ7ta/ohInRtTRMgTjJnpnEm3KhLlXWgxTFJmIjO0vPTRtYcpvgb6cV/1bQVW+DhpS+jVmdfyXRNFNXIgvSWLFlHjiWQSu75GJZyc0MVA4iVRiIoS4ObL+nPv0pO/ETyvZMOe/SnKneBERPrumaWsSYWL9hTR/aTc7fmbNGHu72fiGZ0pDWM4i1GE0VS8rSiLOhZZqMQLuS/TayUUvCFJsYWI68QSCQyR2+twxJ1/fTG7kjHX93H7QwTkNzKcPDAbDcWPiHtZBpSir1dT/Zop97sd9ZdY6+99zxo8Ar0o8w1cO1Jk7dHx3w4zXKjjs3CHX96rfn/fhXa8/c7PxV2J6kncRLp7MCseE0TkGIUX7pXFdUZ9EpxMaaIcbSJ/vH2dJVZ/tvm4X22vLdROY6YI3p0pn6bEZSUuswV7bETmhjZkDReSkXqGdvgiG+SXRbAjCPNzGlijgb9uMGJHg0vfaVZM25f3X5flm19d5OfPqb1H8kKP/KNHzPLbLDzl0jHXx9joET6gT3YoMDAaJUY7RxipiJXylyS/FHLSJljeWdq12tq/KJ3Bdc5w5uE2PetRn7s5MTTUG5orkQ7sezcy6hpKyZ7vKa2y6dyZMcGMQ+gz8WY5f4Hn6r1+EEVC+hvPV2Tz9UaBvizT9f2x79Oq/d8iP7p3pVBkK+6t/NnqpsqRu6of0P/E7fzP0/92jft0DxJMg/BiU1b4yMJq92+H97Ku2yaulyaJvXXRBs1N0tI8/YBHKVYphJXxb0XeXLf9vOZ9O3z6Ss8o6AIcJruZl97bVZ/z6Xr/PArM9s/EAjODC0enac/L9OWAvxBsdhW2A8k8fmquTWtadv1jCvK1rh/DS/AaFGWJuQEXZUvFojFpQ1DKNU9AR2JSO0fvxL437sda87vB29D+srNUJF4/+q1BSHDkPBLVJVAM4Qv5QHkJ2Y/P/Ze6Mh+6+U4/rYcp89FpLmXASg4hHS3GpJi3ixzG2pA6RSCtkggGWdWrxDMaeaXped3ikDR566vgqF6kfftA8gh71hy1SzvWj5/n9Pt+2Hxl6IPopt29/x1OeZvyh5tMvuJ5HEJoPeOB7S/YW9ur835Qe2+rx//X3n3T73Nnv323//yPwEAAP//2s6/QQ==")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f + ": " + err.Error())
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
