// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by elastic-agent/internals/dev-tools/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/elastic-agent/internal/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// internal/spec/apm-server.yml
	// internal/spec/endpoint.yml
	// internal/spec/filebeat.yml
	// internal/spec/fleet-server.yml
	// internal/spec/heartbeat.yml
	// internal/spec/metricbeat.yml
	// internal/spec/osquerybeat.yml
	// internal/spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f + ": " + err.Error())
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
