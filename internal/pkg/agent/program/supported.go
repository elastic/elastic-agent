// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by elastic-agent/internals/dev-tools/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/elastic-agent/internal/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// internal/spec/apm-server.yml
	// internal/spec/auditbeat.yml
	// internal/spec/cloudbeat.yml
	// internal/spec/endpoint.yml
	// internal/spec/filebeat.yml
	// internal/spec/fleet-server.yml
	// internal/spec/heartbeat.yml
	// internal/spec/metricbeat.yml
	// internal/spec/osquerybeat.yml
	// internal/spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f + ": " + err.Error())
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
