// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by elastic-agent/internals/dev-tools/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/elastic-agent/internal/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// internal/spec/apm-server.yml
	// internal/spec/auditbeat.yml
	// internal/spec/endpoint.yml
	// internal/spec/filebeat.yml
	// internal/spec/fleet-server.yml
	// internal/spec/heartbeat.yml
	// internal/spec/metricbeat.yml
	// internal/spec/osquerybeat.yml
	// internal/spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f + ": " + err.Error())
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
