// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

package kubernetes

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/elastic/elastic-agent-autodiscover/kubernetes"
	"github.com/elastic/elastic-agent-autodiscover/kubernetes/metadata"
	"github.com/elastic/elastic-agent-libs/mapstr"

	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

const uid = "005f3b90-4b9d-12f8-acf0-31020a840133"

func TestGenerateNodeData(t *testing.T) {
	node := &kubernetes.Node{
		ObjectMeta: kubernetes.ObjectMeta{
			Name: "testnode",
			UID:  types.UID(uid),
			Labels: map[string]string{
				"foo":        "bar",
				"with-dash":  "dash-value",
				"with/slash": "some/path",
			},
			Annotations: map[string]string{
				"baz": "ban",
			},
		},
		TypeMeta: metav1.TypeMeta{
			Kind:       "Node",
			APIVersion: "v1",
		},
		Status: v1.NodeStatus{
			Conditions: []v1.NodeCondition{{Type: v1.NodeReady, Status: v1.ConditionTrue}},
			Addresses:  []v1.NodeAddress{{Type: v1.NodeHostName, Address: "node1"}},
		},
	}

	data := generateNodeData(node, &nodeMeta{})

	mapping := map[string]interface{}{
		"node": mapstr.M{
			"uid":  string(node.GetUID()),
			"name": node.GetName(),
			"ip":   "node1",
		},
		"annotations": mapstr.M{
			"baz": "ban",
		},
		"labels": mapstr.M{
			"foo":        "bar",
			"with-dash":  "dash-value",
			"with/slash": "some/path",
		},
	}

	processors := map[string]interface{}{
		"orchestrator": mapstr.M{
			"cluster": mapstr.M{
				"name": "devcluster",
				"url":  "8.8.8.8:9090"},
		}, "kubernetes": mapstr.M{
			"labels": mapstr.M{
				"foo":        "bar",
				"with-dash":  "dash-value",
				"with/slash": "some/path",
			},
			"annotations": mapstr.M{"baz": "ban"},
			"node": mapstr.M{
				"ip":   "node1",
				"name": "testnode",
				"uid":  uid},
		},
	}
	assert.Equal(t, node, data.node)
	assert.Equal(t, mapping, data.mapping)
	for _, v := range data.processors {
		k, _ := v["add_fields"].(map[string]interface{})
		target, _ := k["target"].(string)
		fields := k["fields"]
		assert.Equal(t, processors[target], fields)
	}
}

type nodeMeta struct{}

// Generate generates node metadata from a resource object
// All Kubernetes fields that need to be stored under kubernetes. prefix are populated by
// GenerateK8s method while fields that are part of ECS are generated by GenerateECS method
func (n *nodeMeta) Generate(obj kubernetes.Resource, opts ...metadata.FieldOptions) mapstr.M {
	ecsFields := n.GenerateECS(obj)
	meta := mapstr.M{
		"kubernetes": n.GenerateK8s(obj, opts...),
	}
	meta.DeepUpdate(ecsFields)
	return meta
}

// GenerateECS generates node ECS metadata from a resource object
func (n *nodeMeta) GenerateECS(obj kubernetes.Resource) mapstr.M {
	return mapstr.M{
		"orchestrator": mapstr.M{
			"cluster": mapstr.M{
				"name": "devcluster",
				"url":  "8.8.8.8:9090",
			},
		},
	}
}

// GenerateK8s generates node metadata from a resource object
func (n *nodeMeta) GenerateK8s(obj kubernetes.Resource, opts ...metadata.FieldOptions) mapstr.M {
	k8sNode, _ := obj.(*kubernetes.Node)
	return mapstr.M{
		"node": mapstr.M{
			"uid":  string(k8sNode.GetUID()),
			"name": k8sNode.GetName(),
			"ip":   "node1",
		},
		"labels": mapstr.M{
			"foo":        "bar",
			"with-dash":  "dash-value",
			"with/slash": "some/path",
		},
		"annotations": mapstr.M{
			"baz": "ban",
		},
	}
}

// GenerateFromName generates node metadata from a node name
func (n *nodeMeta) GenerateFromName(name string, opts ...metadata.FieldOptions) mapstr.M {
	return nil
}
