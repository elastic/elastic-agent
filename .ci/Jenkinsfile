#!/usr/bin/env groovy

@Library('apm@feature/use-internal-ci') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "elastic-agent-poc"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
    EXTERNAL = true
    SNAPSHOT = true
  }
  options {
    timeout(time: 2, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Lint'){
      steps {
        withGithubNotify(context: "Lint") {
          withMageEnv(){
           dir("${BASE_DIR}"){
              cmd(label: 'check license, lint', script: 'mage check')
              cmd(label: 'update', script: 'mage update')
            }
            dir("${BASE_DIR}"){
              cmd(label: 'check no changes', script: 'make check-no-changes')
            }
          }
        }
      }
    }
    stage('Test') {
      failFast false
      matrix {
        agent {label "${PLATFORM}"}
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'PLATFORM'
            values 'macosx && x86_64', 'ubuntu-20.04 && immutable', 'aarch64', 'windows-2019 && windows-immutable'
          }
        }
        stages {
          stage('build'){
            steps {
              withGithubNotify(context: "Build-${PLATFORM}") {
                deleteDir()
                unstash 'source'
                withMageEnv(){
                  dir("${BASE_DIR}"){
                    cmd(label: 'Go build', script: 'mage build')
                  }
                }
              }
            }
          }
          stage('Test') {
            steps {
              withGithubNotify(context: "Test-${PLATFORM}") {
                withMageEnv(){
                  dir("${BASE_DIR}"){
                    cmd(label: 'Go unitTest', script: 'mage unitTest')
                  }
                }
              }
            }
            post {
              always {
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: '**/junit-report.xml')
              }
            }
          }
        }
      }
    }
    stage('Package') {
      failFast false
      matrix {
        agent {label "${PLATFORM}"}
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'PLATFORM'
            // TODO: 'macosx && x86_64' doesn't work since docker is not available in the internal-ci macosx workers
            values 'ubuntu-20.04 && immutable', 'aarch64'
          }
        }
        stages {
          stage('Package'){
            steps {
              withGithubNotify(context: "Package ${PLATFORM}") {
                deleteDir()
                unstash 'source'
                withMageEnv(){
                  dir("${BASE_DIR}"){
                    withPackageEnv("${PLATFORM}") {
                      cmd(label: 'Go package', script: 'mage package')
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def withPackageEnv(platform, Closure body) {
  if (isUnix()) {
    if (platform.contains('macosx')) {
      withPackageDarwinEnv() {
        body()
      }
    } else {
      if (isArm()) {
        withPackageArmEnv() {
          body()
        }
      } else {
        withPackageLinuxEnv() {
          body()
        }
      }
    }
  } else {
    error 'withPackageEnv: unsupported platform'
  }
}

def withPackageLinuxEnv(Closure body) {
  // Copied from https://github.com/elastic/beats/blob/e6e65aa92fe355c95789691ebf5a3bcecaf5b4ea/.ci/packaging.groovy#L126-L142
  def PLATFORMS = [ '+all',
                    'linux/amd64',
                    'linux/386',
                    //'linux/arm64',
                    // armv7 packaging isn't working, and we don't currently
                    // need it for release. Do not re-enable it without
                    // confirming it is fixed, you will break the packaging
                    // pipeline!
                    //'linux/armv7',
                    // The platforms above are disabled temporarly as crossbuild images are
                    // not available. See: https://github.com/elastic/golang-crossbuild/issues/71
                    //'linux/ppc64le',
                    //'linux/mips64',
                    //'linux/s390x',
                    'windows/amd64',
                    'windows/386'
  ].join(' ')
  withEnv([
    "PLATFORMS=${PLATFORMS}"
  ]) {
    body()
  }
}

def withPackageArmEnv(Closure body) {
  // Copied from https://github.com/elastic/beats/blob/e6e65aa92fe355c95789691ebf5a3bcecaf5b4ea/.ci/packaging.groovy#L126-L142
  def PLATFORMS = [ 'linux/arm64' ].join(' ')
  withEnv([
    "PLATFORMS=${PLATFORMS}",
    "PACKAGES=docker"
  ]) {
    body()
  }
}

def withPackageDarwinEnv(Closure body) {
  // Copied from https://github.com/elastic/beats/blob/e6e65aa92fe355c95789691ebf5a3bcecaf5b4ea/.ci/packaging.groovy#L126-L142
  def PLATFORMS = [ '+all',
                    'darwin/amd64'
  ].join(' ')
  withEnv([
    "PLATFORMS=${PLATFORMS}"
  ]) {
    body()
  }
}
