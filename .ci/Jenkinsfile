#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "elastic-agent"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
    SNAPSHOT = true
    JOB_GCS_CREDENTIALS = 'fleet-ci-gcs-plugin'  // Support stash/unstash v2
    JOB_GCS_BUCKET = 'fleet-ci-temp'             // Support stash/unstash v2
    JOB_GCS_EXT_BUCKET = 'fleet-ci-artifacts'    // Support uploadPackagesToGoogleBucket
    JOB_GCS_EXT_CREDENTIALS = 'fleet-ci-gcs-plugin-file-credentials'  // Support uploadPackagesToGoogleBucket
    DOCKER_ELASTIC_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    DOCKER_REGISTRY = 'docker.elastic.co'
  }
  options {
    timeout(time: 2, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("(${obltGitHubComments()}|^run (integration|end-to-end) tests|/package)")
  }
  parameters {
    // disabled by default, but required for merge, there are two GH checks:
    // opt-in with 'ci:integration'
    booleanParam(name: 'integration_tests_ci', defaultValue: false, description: 'Enable Integration tests')

    // disabled by default, but required for merge:
    // opt-in with 'ci:end-to-end' tag on PR
    booleanParam(name: 'end_to_end_tests_ci', defaultValue: false, description: 'Enable End-to-End tests')
  }
  stages {
    stage('Checkout') {
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stashV2(name: 'source', bucket: "${JOB_GCS_BUCKET}", credentialsId: "${JOB_GCS_CREDENTIALS}")
        dir("${BASE_DIR}"){
          setEnvVar('ONLY_DOCS', isGitRegionMatch(patterns: [ '.*\\.(asciidoc|md)' ], shouldMatchAll: true).toString())
          setEnvVar('PACKAGING_CHANGES', isGitRegionMatch(patterns: [ '(^dev-tools/packaging/.*|.ci/Jenkinsfile)' ], shouldMatchAll: false).toString())
          setEnvVar('K8S_CHANGES', isGitRegionMatch(patterns: [ '(^deploy/kubernetes/.*|^version/docs/version.asciidoc)' ], shouldMatchAll: false).toString())
        }
      }
    }
    stage('Check'){
      steps {
        withGithubNotify(context: "Check") {
          withMageEnv(){
           dir("${BASE_DIR}"){
              setEnvVar('BEAT_VERSION', sh(label: 'Get beat version', script: 'make get-version', returnStdout: true)?.trim())
              log(level: 'INFO', text: "env.BEAT_VERSION=${env.BEAT_VERSION}")
              cmd(label: 'check', script: 'make check-ci')
            }
          }
        }
      }
    }
    stage('Test') {
      when {
        beforeAgent true
        expression { return env.ONLY_DOCS == "false" }
      }
      failFast false
      matrix {
        agent {label "${PLATFORM}"}
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'PLATFORM'
            // TODO: 'macosx && x86_64' to be added once macosx is available in fleet-ci
            //       for the time being we use macos
            values 'ubuntu-20.04 && immutable', 'aarch64', 'windows-2016 && windows-immutable', 'windows-2022 && windows-immutable'
          }
        }
        stages {
          stage('build'){
            steps {
              withGithubNotify(context: "Build-${PLATFORM}") {
                deleteDir()
                unstashV2(name: 'source', bucket: "${JOB_GCS_BUCKET}", credentialsId: "${JOB_GCS_CREDENTIALS}")
                withMageEnv(){
                  dir("${BASE_DIR}"){
                    cmd(label: 'Go build', script: 'mage build')
                  }
                }
              }
            }
          }
          stage('Test') {
            steps {
              withGithubNotify(context: "Test-${PLATFORM}") {
                withMageEnv(){
                  dir("${BASE_DIR}"){
                    cmd(label: 'Go unitTest', script: 'mage unitTest')
                  }
                }
              }
            }
            post {
              always {
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: '**/junit-report.xml')
              }
            }
          }
          stage('Integration tests') {
            when {
              // Always when running builds on branches/tags
              // Enable if integration test related changes.
              beforeAgent true
              anyOf {
                not { changeRequest() }
                expression { return params.integration_tests_ci }
                expression { return env.GITHUB_COMMENT?.contains('integration tests') }
                expression { matchesPrLabel(label: 'ci:integration') }
              }
            }
            steps {
              echo 'TBD'
            }
          }
          stage('K8s') {
            when {
              beforeAgent true
              // Always when running builds on branches/tags
              // Enable if k8s related changes.
              allOf {
                expression { return env.PLATFORM == 'ubuntu-20.04 && immutable' }
                anyOf {
                  not { changeRequest() }                           // If no PR
                  expression { return env.K8S_CHANGES == "true" }
                }
              }
            }
            steps {
              runK8s(k8sVersion: 'v1.23.0', kindVersion: 'v0.11.1', context: "K8s-${PLATFORM}")
            }
          }
          stage('Package') {
            when {
              beforeAgent true
              allOf {
                anyOf {
                  expression { return isE2eEnabled() }
                  expression { return isPackageEnabled() }
                  not { changeRequest() }
                }
                // Run packaging only for the linux specific arch
                expression { return (PLATFORM.contains('ubuntu') || PLATFORM.contains('aarch64')) }
              }
            }
            environment {
              ARCH = "${PLATFORM.equals('aarch64') ? 'arm64' : 'amd64'}"
              DEV = true
              EXTERNAL = true
            }
            steps {
              withGithubNotify(context: "Package ${PLATFORM}") {
                deleteDir()
                unstashV2(name: 'source', bucket: "${JOB_GCS_BUCKET}", credentialsId: "${JOB_GCS_CREDENTIALS}")
                withMageEnv(){
                  dir("${BASE_DIR}"){
                    withPackageEnv("${PLATFORM}") {
                      cmd(label: 'Go package', script: 'mage package')
                      uploadPackagesToGoogleBucket(
                        credentialsId: env.JOB_GCS_EXT_CREDENTIALS,
                        repo: env.REPO,
                        bucket: env.JOB_GCS_EXT_BUCKET,
                        pattern: "build/distributions/**/*")
                      pushDockerImages(
                        registry: env.DOCKER_REGISTRY,
                        secret: env.DOCKER_ELASTIC_SECRET,
                        snapshot: env.SNAPSHOT,
                        version: env.BEAT_VERSION,
                        images: [
                          [ source: "beats/elastic-agent", arch: env.ARCH, target: "observability-ci/elastic-agent"],
                          [ source: "beats/elastic-agent-oss", arch: env.ARCH, target: "observability-ci/elastic-agent-oss"],
                          [ source: "beats/elastic-agent-ubi8", arch: env.ARCH, target: "observability-ci/elastic-agent-ubi8"],
                          [ source: "beats/elastic-agent-complete", arch: env.ARCH, target: "observability-ci/elastic-agent-complete"],
                          [ source: "beats-ci/elastic-agent-cloud", arch: env.ARCH, target: "observability-ci/elastic-agent-cloud"]
                        ]
                      )
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    stage('Full K8s') {
      when {
        // Always when running builds on branches/tags
        // Enable if k8s related changes.
        anyOf {
          not { changeRequest() }                           // If no PR
          expression { return env.K8S_CHANGES == "true" }   // If k8s changes
        }
      }
      failFast false
      matrix {
        agent {label 'ubuntu-20.04 && immutable'}
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'K8S_VERSION'
            values "v1.23.0", "v1.22.0", "v1.21.1", "v1.20.7", "v1.19.11", "v1.18.19"
          }
        }
        stages {
          stage('K8s') {
            steps {
              deleteDir()
              unstashV2(name: 'source', bucket: "${JOB_GCS_BUCKET}", credentialsId: "${JOB_GCS_CREDENTIALS}")
              runK8s(k8sVersion: K8S_VERSION, kindVersion: 'v0.11.1', context: "K8s-${K8S_VERSION}")
            }
          }
        }
      }
    }
    stage('e2e tests') {
      when {
        // Always when running builds on branches/tags
        // Enable if e2e related changes.
        beforeAgent true
        anyOf {
          not { changeRequest() }
          expression { return isE2eEnabled() }
        }
      }
      steps {
        // TODO: what's the testMatrixFile to be used if any
        runE2E(testMatrixFile: '',
               beatVersion: "${env.BEAT_VERSION}-SNAPSHOT",
               elasticAgentVersion: "${env.BEAT_VERSION}-SNAPSHOT",
               gitHubCheckName: "e2e-tests",
               gitHubCheckRepo: env.REPO,
               gitHubCheckSha1: env.GIT_BASE_COMMIT)
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def withPackageEnv(platform, Closure body) {
  if (isUnix()) {
    if (platform.contains('macosx')) {
      withPackageDarwinEnv() {
        body()
      }
    } else {
      if (isArm()) {
        withPackageArmEnv() {
          body()
        }
      } else {
        withPackageLinuxEnv() {
          body()
        }
      }
    }
  } else {
    error 'withPackageEnv: unsupported platform'
  }
}

def withPackageLinuxEnv(Closure body) {
  // Copied from https://github.com/elastic/beats/blob/e6e65aa92fe355c95789691ebf5a3bcecaf5b4ea/.ci/packaging.groovy#L126-L142
  def PLATFORMS = [ '+all',
                    'linux/amd64',
                    'linux/386',
                    'linux/arm64',
                    // armv7 packaging isn't working, and we don't currently
                    // need it for release. Do not re-enable it without
                    // confirming it is fixed, you will break the packaging
                    // pipeline!
                    //'linux/armv7',
                    // The platforms above are disabled temporarly as crossbuild images are
                    // not available. See: https://github.com/elastic/golang-crossbuild/issues/71
                    //'linux/ppc64le',
                    //'linux/mips64',
                    //'linux/s390x',
                    'windows/amd64',
                    'windows/386'
  ].join(' ')
  withEnv([
    "PLATFORMS=${PLATFORMS}"
  ]) {
    body()
  }
}

def withPackageArmEnv(Closure body) {
  // Copied from https://github.com/elastic/beats/blob/e6e65aa92fe355c95789691ebf5a3bcecaf5b4ea/.ci/packaging.groovy#L126-L142
  def PLATFORMS = [ 'linux/arm64' ].join(' ')
  withEnv([
    "PLATFORMS=${PLATFORMS}",
    "PACKAGES=docker"
  ]) {
    body()
  }
}

def withPackageDarwinEnv(Closure body) {
  // Copied from https://github.com/elastic/beats/blob/e6e65aa92fe355c95789691ebf5a3bcecaf5b4ea/.ci/packaging.groovy#L126-L142
  def PLATFORMS = [ '+all',
                    'darwin/amd64'
  ].join(' ')
  withEnv([
    "PLATFORMS=${PLATFORMS}"
  ]) {
    body()
  }
}

def runK8s(Map args=[:]) {
  withGithubNotify(context: args.context) {
    withMageEnv(){
      withKindEnv(args) {
        dir("${BASE_DIR}"){
          sh(label: "Deploy to kubernetes",script: "make -C deploy/kubernetes test")
        }
      }
    }
  }
}

/**
* Wrapper to know if the build should enalbe the e2e stage
*/
def isE2eEnabled() {
  return params.end_to_end_tests_ci || env.GITHUB_COMMENT?.contains('e2e tests') || matchesPrLabel(label: 'ci:end-to-end')
}

/**
* Wrapper to know if the build should enalbe the package stage
*/
def isPackageEnabled() {
  return env.PACKAGING_CHANGES == "true" || env.GITHUB_COMMENT?.contains('package') || matchesPrLabel(label: 'ci:package')
}
