# update-cli configuration for automated go updates
---
name: Bump golang-version to latest version

scms:
  githubConfig:
    kind: github
    spec:
      user: '{{ requiredEnv "GITHUB_ACTOR" }}'
      username: '{{ requiredEnv "GITHUB_ACTOR" }}'
      owner: '{{ .scm.owner }}'
      repository: '{{ .scm.repository }}'
      token: '{{ requiredEnv "GITHUB_TOKEN" }}'
      commitusingapi: true
      branch: main

actions:
  elastic-agent:
    kind: github/pullrequest
    scmid: githubConfig
    sourceid: latestGoVersion
    spec:
      automerge: false
      labels:
        - dependencies
        - backport-skip
      title: '[Automation] Bump Golang version to {{ source "latestGoVersion" }}'
      description: |
        It requires the version to be bumped first in golang-crossbuild project, then a new release will be added to:
        https://github.com/elastic/golang-crossbuild/releases/tag/v{{ source "latestGoVersion" }}.
        Otherwise it will fail until the docker images are available.

sources:
  minor:
    name: Get minor version in .go-version
    kind: shell
    transformers:
      - findsubmatch:
          pattern: '^\d+.(\d+).\d+$'
          captureindex: 1
    spec:
      command: cat .go-version

  latestGoVersion:
    name: Get Latest Go Release
    kind: githubrelease
    dependson:
      - minor
    transformers:
      - trimprefix: go
    spec:
      owner: golang
      repository: go
      token: '{{ requiredEnv "GITHUB_TOKEN" }}'
      username: '{{ requiredEnv "GITHUB_ACTOR" }}'
      versionfilter:
        kind: regex
        pattern: go1\.{{ source "minor" }}\.(\d*)$

  gomod:
    dependson:
      - latestGoVersion
    name: Get version in go.mod format
    kind: shell
    transformers:
      - findsubmatch:
          pattern: '^(\d+.\d+).\d+'
          captureindex: 1
    spec:
      command: echo {{ source "latestGoVersion" }}

conditions:
  dockerTag:
    name: Is docker image golang:{{ source "latestGoVersion" }} published
    kind: dockerimage
    spec:
      image: golang
      tag: '{{ source "latestGoVersion" }}'
    sourceid: latestGoVersion

  goDefaultVersion-check:
    name: Check if defined golang version differs
    kind: shell
    sourceid: latestGoVersion
    spec:
      command: 'grep -v -q {{ source "latestGoVersion" }} .go-version #'

targets:
  update-go-version:
    name: "Update .go-version"
    sourceid: latestGoVersion
    scmid: githubConfig
    kind: file
    spec:
      content: '{{ source "latestGoVersion" }}'
      file: .go-version
      matchpattern: '\d+.\d+.\d+'
  update-golang.ci:
    name: "Update .golangci.yml"
    sourceid: latestGoVersion
    scmid: githubConfig
    kind: file
    spec:
      content: '{{ source "latestGoVersion" }}'
      file: .golangci.yml
      matchpattern: '\d+.\d+.\d+'
  update-version.asciidoc:
    name: "Update version.asciidoc"
    sourceid: latestGoVersion
    scmid: githubConfig
    kind: file
    spec:
      content: ':go-version: {{ source "latestGoVersion" }}'
      file: version/docs/version.asciidoc
      matchpattern: ':go-version: \d+.\d+.\d+'
  update-dockerfiles:
    name: "Update from dockerfiles"
    sourceid: latestGoVersion
    scmid: githubConfig
    kind: file
    spec:
      content: 'ARG GO_VERSION={{ source "latestGoVersion" }}'
      files:
        - Dockerfile
        - Dockerfile.skaffold
      matchpattern: 'ARG GO_VERSION=\d+.\d+.\d+'
  update-gomod-minor-version:
    name: "Update go.mod minor version"
    sourceid: gomod
    scmid: githubConfig
    kind: file
    spec:
      content: 'go {{ source "gomod" }}'
      file: go.mod
      matchpattern: 'go \d+.\d+'
  update-gomod-toolchain-version:
    name: "Update go.mod toolchain version"
    sourceid: latestGoVersion
    scmid: githubConfig
    kind: file
    spec:
      content: 'toolchain go{{ source "latestGoVersion" }}'
      file: go.mod
      matchpattern: 'toolchain go\d+.\d+.\d+'
