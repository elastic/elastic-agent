/*
 * fleet-server API
 *
 * The fleet-server API that is used by agents when enrolled with fleet.  Note that the current implementations in the fleet-server and elastic-agent may have some difference specifically when it comes to some objects. This is most notable when comparing the `Action` implementations. Fleet-server uses a general template for all actions and the elastic-agent will have more specific representations.  The implementation of fleet-server by default also includes a connection count limiter, as well as limiters for request body sizes. If an agent attempts to make request but there are no remaining connections, the attempt will be blocked and the agent will get an error. If an agent tries to send a body that is too large the fleet-server will respond with a 400 status code. 
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// EnrollMetadata - Metadata associated with the agent that is enrolling to fleet.
type EnrollMetadata struct {

	// An embedded JSON object that holds user-provided meta-data values. Defined in fleet-server as a `json.RawMessage`. fleet-server does not use these values on enrollment of an agent. Defined in the elastic-agent as a `map[string]interface{}` with no way to specify any values. 
	UserProvided string `json:"user_provided"`

	// An embedded JSON object that holds meta-data values. Defined in fleet-server as a `json.RawMessage`, defined as an object in the elastic-agent. elastic-agent will populate the object with information from the binary and host/system environment. If not empty fleet-server will update the value of `local[\"elastic\"][\"agent\"][\"id\"]` to the agent ID (assuming the keys exist). The (possibly updated) value is sent by fleet-server when creating the record for a new agent. 
	Local string `json:"local"`

	// User provided tags for the agent. fleet-server will pass the tags to the agent record on enrollment. 
	Tags []string `json:"tags"`
}

// AssertEnrollMetadataRequired checks if the required fields are not zero-ed
func AssertEnrollMetadataRequired(obj EnrollMetadata) error {
	elements := map[string]interface{}{
		"user_provided": obj.UserProvided,
		"local": obj.Local,
		"tags": obj.Tags,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseEnrollMetadataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EnrollMetadata (e.g. [][]EnrollMetadata), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEnrollMetadataRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEnrollMetadata, ok := obj.(EnrollMetadata)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEnrollMetadataRequired(aEnrollMetadata)
	})
}
