/*
 * fleet-server API
 *
 * The fleet-server API that is used by agents when enrolled with fleet.  Note that the current implementations in the fleet-server and elastic-agent may have some difference specifically when it comes to some objects. This is most notable when comparing the `Action` implementations. Fleet-server uses a general template for all actions and the elastic-agent will have more specific representations.  The implementation of fleet-server by default also includes a connection count limiter, as well as limiters for request body sizes. If an agent attempts to make request but there are no remaining connections, the attempt will be blocked and the agent will get an error. If an agent tries to send a body that is too large the fleet-server will respond with a 400 status code. 
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// EnrollResponseItem - Response to a successful enrollment of an agent into fleet.
type EnrollResponseItem struct {

	// The agent ID
	Id string `json:"id"`

	// If the agent is active in fleet. Will be set to true upon enrollment.
	Active bool `json:"active"`

	// The policy ID that the agent is enrolled with. Decoded from the API key used in the request.
	PolicyId string `json:"policy_id"`

	// The enrollment request type.
	Type string `json:"type"`

	// The RFC3339 timestamp that the agent was enrolled at.
	EnrolledAt string `json:"enrolled_at"`

	// A copy of the user provided metadata from the enrollment request. Currently will be empty.
	UserProvidedMetadata string `json:"user_provided_metadata"`

	// A copy of the (updated) local metadata provided in the enrollment request.
	LocalMetadata string `json:"local_metadata"`

	// Defined in fleet-server and elastic-agent as `[]interface{}` but never used.
	Actions []map[string]interface{} `json:"actions"`

	// The id of the ApiKey that fleet-server has generated for the enrolling agent.
	AccessApiKeyId string `json:"access_api_key_id"`

	// The ApiKey token that fleet-server has generated for the enrolling agent.
	AccessApiKey string `json:"access_api_key"`

	// Agent status from fleet-server. fleet-ui may differ.
	Status string `json:"status"`

	// A copy of the tags that were sent with the enrollment request.
	Tags []string `json:"tags"`
}

// AssertEnrollResponseItemRequired checks if the required fields are not zero-ed
func AssertEnrollResponseItemRequired(obj EnrollResponseItem) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"active": obj.Active,
		"policy_id": obj.PolicyId,
		"type": obj.Type,
		"enrolled_at": obj.EnrolledAt,
		"user_provided_metadata": obj.UserProvidedMetadata,
		"local_metadata": obj.LocalMetadata,
		"actions": obj.Actions,
		"access_api_key_id": obj.AccessApiKeyId,
		"access_api_key": obj.AccessApiKey,
		"status": obj.Status,
		"tags": obj.Tags,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseEnrollResponseItemRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EnrollResponseItem (e.g. [][]EnrollResponseItem), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEnrollResponseItemRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEnrollResponseItem, ok := obj.(EnrollResponseItem)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEnrollResponseItemRequired(aEnrollResponseItem)
	})
}
