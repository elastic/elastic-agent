/*
 * fleet-server API
 *
 * The fleet-server API that is used by agents when enrolled with fleet.  Note that the current implementations in the fleet-server and elastic-agent may have some difference specifically when it comes to some objects. This is most notable when comparing the `Action` implementations. Fleet-server uses a general template for all actions and the elastic-agent will have more specific representations.  The implementation of fleet-server by default also includes a connection count limiter, as well as limiters for request body sizes. If an agent attempts to make request but there are no remaining connections, the attempt will be blocked and the agent will get an error. If an agent tries to send a body that is too large the fleet-server will respond with a 400 status code.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"os"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"AgentAcks",
			http.MethodPost,
			"/api/fleet/agents/{id}/acks",
			c.AgentAcks,
		},
		{
			"AgentCheckin",
			http.MethodPost,
			"/api/fleet/agents/{id}/checkin",
			c.AgentCheckin,
		},
		{
			"AgentEnroll",
			http.MethodPost,
			"/api/fleet/agents/{id}",
			c.AgentEnroll,
		},
		{
			"Artifact",
			http.MethodGet,
			"/api/fleet/artifacts/{id}/{sha2}",
			c.Artifact,
		},
		{
			"Status",
			http.MethodGet,
			"/api/status",
			c.Status,
		},
		{
			"UploadBegin",
			http.MethodPost,
			"/api/fleet/uploads",
			c.UploadBegin,
		},
		{
			"UploadChunk",
			http.MethodPut,
			"/api/fleet/uploads/{id}/{chunkNum}",
			c.UploadChunk,
		},
		{
			"UploadComplete",
			http.MethodPost,
			"/api/fleet/uploads/{id}",
			c.UploadComplete,
		},
	}
}

// AgentAcks -
func (c *DefaultApiController) AgentAcks(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	xRequestIDParam := r.Header.Get("X-Request-ID")
	ackRequestParam := AckRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ackRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAckRequestRequired(ackRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AgentAcks(r.Context(), idParam, xRequestIDParam, ackRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AgentCheckin -
func (c *DefaultApiController) AgentCheckin(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	userAgentParam := r.Header.Get("User-Agent")
	acceptEncodingParam := r.Header.Get("Accept-Encoding")
	xRequestIDParam := r.Header.Get("X-Request-ID")
	checkinRequestParam := CheckinRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&checkinRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCheckinRequestRequired(checkinRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AgentCheckin(r.Context(), idParam, userAgentParam, acceptEncodingParam, xRequestIDParam, checkinRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AgentEnroll -
func (c *DefaultApiController) AgentEnroll(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	userAgentParam := r.Header.Get("User-Agent")
	xRequestIDParam := r.Header.Get("X-Request-ID")
	enrollRequestParam := EnrollRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&enrollRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertEnrollRequestRequired(enrollRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AgentEnroll(r.Context(), idParam, userAgentParam, xRequestIDParam, enrollRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Artifact -
func (c *DefaultApiController) Artifact(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	sha2Param := params["sha2"]
	xRequestIDParam := r.Header.Get("X-Request-ID")
	result, err := c.service.Artifact(r.Context(), idParam, sha2Param, xRequestIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Status -
func (c *DefaultApiController) Status(w http.ResponseWriter, r *http.Request) {
	xRequestIDParam := r.Header.Get("X-Request-ID")
	result, err := c.service.Status(r.Context(), xRequestIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UploadBegin - Initiate a file upload process
func (c *DefaultApiController) UploadBegin(w http.ResponseWriter, r *http.Request) {
	requestBodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xRequestIDParam := r.Header.Get("X-Request-ID")
	result, err := c.service.UploadBegin(r.Context(), requestBodyParam, xRequestIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UploadChunk - Upload a section of file data
func (c *DefaultApiController) UploadChunk(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	chunkNumParam, err := parseInt32Parameter(params["chunkNum"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xChunkSHA2Param := r.Header.Get("X-Chunk-SHA2")
	bodyParam := os.File{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xRequestIDParam := r.Header.Get("X-Request-ID")
	result, err := c.service.UploadChunk(r.Context(), idParam, chunkNumParam, xChunkSHA2Param, &bodyParam, xRequestIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UploadComplete - Complete a file upload process
func (c *DefaultApiController) UploadComplete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	uploadCompleteRequestParam := UploadCompleteRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&uploadCompleteRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUploadCompleteRequestRequired(uploadCompleteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	xRequestIDParam := r.Header.Get("X-Request-ID")
	result, err := c.service.UploadComplete(r.Context(), idParam, uploadCompleteRequestParam, xRequestIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
