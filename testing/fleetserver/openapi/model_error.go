/*
 * fleet-server API
 *
 * The fleet-server API that is used by agents when enrolled with fleet.  Note that the current implementations in the fleet-server and elastic-agent may have some difference specifically when it comes to some objects. This is most notable when comparing the `Action` implementations. Fleet-server uses a general template for all actions and the elastic-agent will have more specific representations.  The implementation of fleet-server by default also includes a connection count limiter, as well as limiters for request body sizes. If an agent attempts to make request but there are no remaining connections, the attempt will be blocked and the agent will get an error. If an agent tries to send a body that is too large the fleet-server will respond with a 400 status code.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// ModelError - Error processing request.
type ModelError struct {

	// The HTTP status code of the error.
	StatusCode int `json:"statusCode"`

	// Error type.
	Error string `json:"error"`

	// (optional) Error message.
	Message string `json:"message,omitempty"`
}

// AssertModelErrorRequired checks if the required fields are not zero-ed
func AssertModelErrorRequired(obj ModelError) error {
	elements := map[string]interface{}{
		"statusCode": obj.StatusCode,
		"error":      obj.Error,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseModelErrorRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ModelError (e.g. [][]ModelError), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseModelErrorRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aModelError, ok := obj.(ModelError)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertModelErrorRequired(aModelError)
	})
}
