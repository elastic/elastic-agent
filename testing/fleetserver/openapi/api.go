/*
 * fleet-server API
 *
 * The fleet-server API that is used by agents when enrolled with fleet.  Note that the current implementations in the fleet-server and elastic-agent may have some difference specifically when it comes to some objects. This is most notable when comparing the `Action` implementations. Fleet-server uses a general template for all actions and the elastic-agent will have more specific representations.  The implementation of fleet-server by default also includes a connection count limiter, as well as limiters for request body sizes. If an agent attempts to make request but there are no remaining connections, the attempt will be blocked and the agent will get an error. If an agent tries to send a body that is too large the fleet-server will respond with a 400 status code.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"os"
)

// DefaultApiRouter defines the required methods for binding the api requests to a responses for the DefaultApi
// The DefaultApiRouter implementation should parse necessary information from the http request,
// pass the data to a DefaultApiServicer to perform the required actions, then write the service results to the http response.
type DefaultApiRouter interface {
	AgentAcks(http.ResponseWriter, *http.Request)
	AgentCheckin(http.ResponseWriter, *http.Request)
	AgentEnroll(http.ResponseWriter, *http.Request)
	Artifact(http.ResponseWriter, *http.Request)
	Status(http.ResponseWriter, *http.Request)
	UploadBegin(http.ResponseWriter, *http.Request)
	UploadChunk(http.ResponseWriter, *http.Request)
	UploadComplete(http.ResponseWriter, *http.Request)
}

// DefaultApiServicer defines the api actions for the DefaultApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DefaultApiServicer interface {
	AgentAcks(context.Context, string, string, AckRequest) (ImplResponse, error)
	AgentCheckin(context.Context, string, string, string, string, CheckinRequest) (ImplResponse, error)
	AgentEnroll(context.Context, string, string, string, EnrollRequest) (ImplResponse, error)
	Artifact(context.Context, string, string, string) (ImplResponse, error)
	Status(context.Context, string) (ImplResponse, error)
	UploadBegin(context.Context, map[string]interface{}, string) (ImplResponse, error)
	UploadChunk(context.Context, string, int32, string, *os.File, string) (ImplResponse, error)
	UploadComplete(context.Context, string, UploadCompleteRequest, string) (ImplResponse, error)
}
