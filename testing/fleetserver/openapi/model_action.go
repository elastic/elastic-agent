/*
 * fleet-server API
 *
 * The fleet-server API that is used by agents when enrolled with fleet.  Note that the current implementations in the fleet-server and elastic-agent may have some difference specifically when it comes to some objects. This is most notable when comparing the `Action` implementations. Fleet-server uses a general template for all actions and the elastic-agent will have more specific representations.  The implementation of fleet-server by default also includes a connection count limiter, as well as limiters for request body sizes. If an agent attempts to make request but there are no remaining connections, the attempt will be blocked and the agent will get an error. If an agent tries to send a body that is too large the fleet-server will respond with a 400 status code. 
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Action - An action for an elastic-agent. The actions are defined in generic terms on the fleet-server. The elastic-agent will have additional details for what is expected when a specific action-type is recieved. Many attributes in this schema also contain yaml tags so the elastic-agent may serialize them. The structure of the `data` attribute will vary between action types.  An additional consideration is Scheduled Actions. Scheduled actions are currently defined as actions that have non-empty values for both the `start_time` and `expiration` attributes. 
type Action struct {

	// The agent ID.
	AgentId string `json:"agent_id"`

	// Time when the action was created.
	CreatedAt string `json:"created_at"`

	// The earliest execution time for the action. Agent will not execute the action before this time. Used for scheduled actions.
	StartTime string `json:"start_time,omitempty" yaml:"start_time"`

	// The latest start time for the action. Actions will be dropped by the agent if execution has not started by this time. Used for scheduled actions.
	Expiration string `json:"expiration,omitempty" yaml:"expiration"`

	// An embedded action-specific object.
	Data *interface{} `json:"data" yaml:"data"`

	// The action ID.
	Id string `json:"id" yaml:"action_id"`

	// APM traceparent for the action.
	Traceparent string `json:"traceparent,omitempty" yaml:"traceparent"`

	// The action type.
	Type string `json:"type" yaml:"type"`

	// The input type of the action for actions with type `INPUT_ACTION`.
	InputType string `json:"input_type" yaml:"input_type"`

	// The timeout value (in seconds) for actions with type `INPUT_ACTION`.
	Timeout int64 `json:"timeout,omitempty" yaml:"timeout"`

	Signed ActionSignature `json:"signed,omitempty" yaml:"signed"`
}

// AssertActionRequired checks if the required fields are not zero-ed
func AssertActionRequired(obj Action) error {
	elements := map[string]interface{}{
		"agent_id": obj.AgentId,
		"created_at": obj.CreatedAt,
		"data": obj.Data,
		"id": obj.Id,
		"type": obj.Type,
		"input_type": obj.InputType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertActionSignatureRequired(obj.Signed); err != nil {
		return err
	}
	return nil
}

// AssertRecurseActionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Action (e.g. [][]Action), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseActionRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAction, ok := obj.(Action)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertActionRequired(aAction)
	})
}
