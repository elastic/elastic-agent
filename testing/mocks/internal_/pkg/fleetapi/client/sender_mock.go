// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery v2.51.1. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// Sender is an autogenerated mock type for the Sender type
type Sender struct {
	mock.Mock
}

type Sender_Expecter struct {
	mock *mock.Mock
}

func (_m *Sender) EXPECT() *Sender_Expecter {
	return &Sender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, method, path, params, headers, body
func (_m *Sender) Send(ctx context.Context, method string, path string, params url.Values, headers http.Header, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, method, path, params, headers, body)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, url.Values, http.Header, io.Reader) (*http.Response, error)); ok {
		return rf(ctx, method, path, params, headers, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, url.Values, http.Header, io.Reader) *http.Response); ok {
		r0 = rf(ctx, method, path, params, headers, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, url.Values, http.Header, io.Reader) error); ok {
		r1 = rf(ctx, method, path, params, headers, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Sender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - path string
//   - params url.Values
//   - headers http.Header
//   - body io.Reader
func (_e *Sender_Expecter) Send(ctx interface{}, method interface{}, path interface{}, params interface{}, headers interface{}, body interface{}) *Sender_Send_Call {
	return &Sender_Send_Call{Call: _e.mock.On("Send", ctx, method, path, params, headers, body)}
}

func (_c *Sender_Send_Call) Run(run func(ctx context.Context, method string, path string, params url.Values, headers http.Header, body io.Reader)) *Sender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(url.Values), args[4].(http.Header), args[5].(io.Reader))
	})
	return _c
}

func (_c *Sender_Send_Call) Return(_a0 *http.Response, _a1 error) *Sender_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Sender_Send_Call) RunAndReturn(run func(context.Context, string, string, url.Values, http.Header, io.Reader) (*http.Response, error)) *Sender_Send_Call {
	_c.Call.Return(run)
	return _c
}

// URI provides a mock function with no fields
func (_m *Sender) URI() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for URI")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Sender_URI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URI'
type Sender_URI_Call struct {
	*mock.Call
}

// URI is a helper method to define mock.On call
func (_e *Sender_Expecter) URI() *Sender_URI_Call {
	return &Sender_URI_Call{Call: _e.mock.On("URI")}
}

func (_c *Sender_URI_Call) Run(run func()) *Sender_URI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sender_URI_Call) Return(_a0 string) *Sender_URI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sender_URI_Call) RunAndReturn(run func() string) *Sender_URI_Call {
	_c.Call.Return(run)
	return _c
}

// NewSender creates a new instance of Sender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sender {
	mock := &Sender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
