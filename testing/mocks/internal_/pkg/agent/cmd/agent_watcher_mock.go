// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package cmd

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	logp "github.com/elastic/elastic-agent-libs/logp"

	time "time"
)

// AgentWatcher is an autogenerated mock type for the agentWatcher type
type AgentWatcher struct {
	mock.Mock
}

type AgentWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentWatcher) EXPECT() *AgentWatcher_Expecter {
	return &AgentWatcher_Expecter{mock: &_m.Mock}
}

// Watch provides a mock function with given fields: ctx, tilGrace, errorCheckInterval, log
func (_m *AgentWatcher) Watch(ctx context.Context, tilGrace time.Duration, errorCheckInterval time.Duration, log *logp.Logger) error {
	ret := _m.Called(ctx, tilGrace, errorCheckInterval, log)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, time.Duration, *logp.Logger) error); ok {
		r0 = rf(ctx, tilGrace, errorCheckInterval, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentWatcher_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type AgentWatcher_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - tilGrace time.Duration
//   - errorCheckInterval time.Duration
//   - log *logp.Logger
func (_e *AgentWatcher_Expecter) Watch(ctx interface{}, tilGrace interface{}, errorCheckInterval interface{}, log interface{}) *AgentWatcher_Watch_Call {
	return &AgentWatcher_Watch_Call{Call: _e.mock.On("Watch", ctx, tilGrace, errorCheckInterval, log)}
}

func (_c *AgentWatcher_Watch_Call) Run(run func(ctx context.Context, tilGrace time.Duration, errorCheckInterval time.Duration, log *logp.Logger)) *AgentWatcher_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(time.Duration), args[3].(*logp.Logger))
	})
	return _c
}

func (_c *AgentWatcher_Watch_Call) Return(_a0 error) *AgentWatcher_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AgentWatcher_Watch_Call) RunAndReturn(run func(context.Context, time.Duration, time.Duration, *logp.Logger) error) *AgentWatcher_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewAgentWatcher creates a new instance of AgentWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentWatcher {
	mock := &AgentWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
