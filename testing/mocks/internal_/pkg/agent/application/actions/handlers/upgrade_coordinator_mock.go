// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package handlers

import (
	context "context"

	component "github.com/elastic/elastic-agent/pkg/component"

	coordinator "github.com/elastic/elastic-agent/internal/pkg/agent/application/coordinator"

	fleetapi "github.com/elastic/elastic-agent/internal/pkg/fleetapi"

	mock "github.com/stretchr/testify/mock"
)

// UpgradeCoordinator is an autogenerated mock type for the upgradeCoordinator type
type UpgradeCoordinator struct {
	mock.Mock
}

type UpgradeCoordinator_Expecter struct {
	mock *mock.Mock
}

func (_m *UpgradeCoordinator) EXPECT() *UpgradeCoordinator_Expecter {
	return &UpgradeCoordinator_Expecter{mock: &_m.Mock}
}

// PerformAction provides a mock function with given fields: ctx, comp, unit, name, params
func (_m *UpgradeCoordinator) PerformAction(ctx context.Context, comp component.Component, unit component.Unit, name string, params map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(ctx, comp, unit, name, params)

	if len(ret) == 0 {
		panic("no return value specified for PerformAction")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, component.Component, component.Unit, string, map[string]interface{}) (map[string]interface{}, error)); ok {
		return rf(ctx, comp, unit, name, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, component.Component, component.Unit, string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ctx, comp, unit, name, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, component.Component, component.Unit, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, comp, unit, name, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeCoordinator_PerformAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformAction'
type UpgradeCoordinator_PerformAction_Call struct {
	*mock.Call
}

// PerformAction is a helper method to define mock.On call
//   - ctx context.Context
//   - comp component.Component
//   - unit component.Unit
//   - name string
//   - params map[string]interface{}
func (_e *UpgradeCoordinator_Expecter) PerformAction(ctx interface{}, comp interface{}, unit interface{}, name interface{}, params interface{}) *UpgradeCoordinator_PerformAction_Call {
	return &UpgradeCoordinator_PerformAction_Call{Call: _e.mock.On("PerformAction", ctx, comp, unit, name, params)}
}

func (_c *UpgradeCoordinator_PerformAction_Call) Run(run func(ctx context.Context, comp component.Component, unit component.Unit, name string, params map[string]interface{})) *UpgradeCoordinator_PerformAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(component.Component), args[2].(component.Unit), args[3].(string), args[4].(map[string]interface{}))
	})
	return _c
}

func (_c *UpgradeCoordinator_PerformAction_Call) Return(_a0 map[string]interface{}, _a1 error) *UpgradeCoordinator_PerformAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UpgradeCoordinator_PerformAction_Call) RunAndReturn(run func(context.Context, component.Component, component.Unit, string, map[string]interface{}) (map[string]interface{}, error)) *UpgradeCoordinator_PerformAction_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with no fields
func (_m *UpgradeCoordinator) State() coordinator.State {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 coordinator.State
	if rf, ok := ret.Get(0).(func() coordinator.State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(coordinator.State)
	}

	return r0
}

// UpgradeCoordinator_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type UpgradeCoordinator_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *UpgradeCoordinator_Expecter) State() *UpgradeCoordinator_State_Call {
	return &UpgradeCoordinator_State_Call{Call: _e.mock.On("State")}
}

func (_c *UpgradeCoordinator_State_Call) Run(run func()) *UpgradeCoordinator_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UpgradeCoordinator_State_Call) Return(_a0 coordinator.State) *UpgradeCoordinator_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UpgradeCoordinator_State_Call) RunAndReturn(run func() coordinator.State) *UpgradeCoordinator_State_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function with given fields: ctx, version, sourceURI, action, opts
func (_m *UpgradeCoordinator) Upgrade(ctx context.Context, version string, sourceURI string, action *fleetapi.ActionUpgrade, opts ...coordinator.UpgradeOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, version, sourceURI, action)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *fleetapi.ActionUpgrade, ...coordinator.UpgradeOpt) error); ok {
		r0 = rf(ctx, version, sourceURI, action, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpgradeCoordinator_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type UpgradeCoordinator_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - version string
//   - sourceURI string
//   - action *fleetapi.ActionUpgrade
//   - opts ...coordinator.UpgradeOpt
func (_e *UpgradeCoordinator_Expecter) Upgrade(ctx interface{}, version interface{}, sourceURI interface{}, action interface{}, opts ...interface{}) *UpgradeCoordinator_Upgrade_Call {
	return &UpgradeCoordinator_Upgrade_Call{Call: _e.mock.On("Upgrade",
		append([]interface{}{ctx, version, sourceURI, action}, opts...)...)}
}

func (_c *UpgradeCoordinator_Upgrade_Call) Run(run func(ctx context.Context, version string, sourceURI string, action *fleetapi.ActionUpgrade, opts ...coordinator.UpgradeOpt)) *UpgradeCoordinator_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]coordinator.UpgradeOpt, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(coordinator.UpgradeOpt)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*fleetapi.ActionUpgrade), variadicArgs...)
	})
	return _c
}

func (_c *UpgradeCoordinator_Upgrade_Call) Return(_a0 error) *UpgradeCoordinator_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UpgradeCoordinator_Upgrade_Call) RunAndReturn(run func(context.Context, string, string, *fleetapi.ActionUpgrade, ...coordinator.UpgradeOpt) error) *UpgradeCoordinator_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

// NewUpgradeCoordinator creates a new instance of UpgradeCoordinator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpgradeCoordinator(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpgradeCoordinator {
	mock := &UpgradeCoordinator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
