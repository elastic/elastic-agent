// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by mockery v2.42.2. DO NOT EDIT.

package client

import (
	context "context"

	client "github.com/elastic/elastic-agent/pkg/control/v2/client"

	cproto "github.com/elastic/elastic-agent/pkg/control/v2/cproto"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Configure provides a mock function with given fields: ctx, config
func (_m *Client) Configure(ctx context.Context, config string) error {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Configure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Configure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configure'
type Client_Configure_Call struct {
	*mock.Call
}

// Configure is a helper method to define mock.On call
//   - ctx context.Context
//   - config string
func (_e *Client_Expecter) Configure(ctx interface{}, config interface{}) *Client_Configure_Call {
	return &Client_Configure_Call{Call: _e.mock.On("Configure", ctx, config)}
}

func (_c *Client_Configure_Call) Run(run func(ctx context.Context, config string)) *Client_Configure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_Configure_Call) Return(_a0 error) *Client_Configure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Configure_Call) RunAndReturn(run func(context.Context, string) error) *Client_Configure_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with given fields: ctx, opts
func (_m *Client) Connect(ctx context.Context, opts ...grpc.DialOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.DialOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Client_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.DialOption
func (_e *Client_Expecter) Connect(ctx interface{}, opts ...interface{}) *Client_Connect_Call {
	return &Client_Connect_Call{Call: _e.mock.On("Connect",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *Client_Connect_Call) Run(run func(ctx context.Context, opts ...grpc.DialOption)) *Client_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.DialOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.DialOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Client_Connect_Call) Return(_a0 error) *Client_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Connect_Call) RunAndReturn(run func(context.Context, ...grpc.DialOption) error) *Client_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// DiagnosticAgent provides a mock function with given fields: ctx, additionalDiags
func (_m *Client) DiagnosticAgent(ctx context.Context, additionalDiags []cproto.AdditionalDiagnosticRequest) ([]client.DiagnosticFileResult, error) {
	ret := _m.Called(ctx, additionalDiags)

	if len(ret) == 0 {
		panic("no return value specified for DiagnosticAgent")
	}

	var r0 []client.DiagnosticFileResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []cproto.AdditionalDiagnosticRequest) ([]client.DiagnosticFileResult, error)); ok {
		return rf(ctx, additionalDiags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []cproto.AdditionalDiagnosticRequest) []client.DiagnosticFileResult); ok {
		r0 = rf(ctx, additionalDiags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.DiagnosticFileResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []cproto.AdditionalDiagnosticRequest) error); ok {
		r1 = rf(ctx, additionalDiags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_DiagnosticAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnosticAgent'
type Client_DiagnosticAgent_Call struct {
	*mock.Call
}

// DiagnosticAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - additionalDiags []cproto.AdditionalDiagnosticRequest
func (_e *Client_Expecter) DiagnosticAgent(ctx interface{}, additionalDiags interface{}) *Client_DiagnosticAgent_Call {
	return &Client_DiagnosticAgent_Call{Call: _e.mock.On("DiagnosticAgent", ctx, additionalDiags)}
}

func (_c *Client_DiagnosticAgent_Call) Run(run func(ctx context.Context, additionalDiags []cproto.AdditionalDiagnosticRequest)) *Client_DiagnosticAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]cproto.AdditionalDiagnosticRequest))
	})
	return _c
}

func (_c *Client_DiagnosticAgent_Call) Return(_a0 []client.DiagnosticFileResult, _a1 error) *Client_DiagnosticAgent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_DiagnosticAgent_Call) RunAndReturn(run func(context.Context, []cproto.AdditionalDiagnosticRequest) ([]client.DiagnosticFileResult, error)) *Client_DiagnosticAgent_Call {
	_c.Call.Return(run)
	return _c
}

// DiagnosticComponents provides a mock function with given fields: ctx, additionalDiags, components
func (_m *Client) DiagnosticComponents(ctx context.Context, additionalDiags []cproto.AdditionalDiagnosticRequest, components ...client.DiagnosticComponentRequest) ([]client.DiagnosticComponentResult, error) {
	_va := make([]interface{}, len(components))
	for _i := range components {
		_va[_i] = components[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, additionalDiags)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiagnosticComponents")
	}

	var r0 []client.DiagnosticComponentResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []cproto.AdditionalDiagnosticRequest, ...client.DiagnosticComponentRequest) ([]client.DiagnosticComponentResult, error)); ok {
		return rf(ctx, additionalDiags, components...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []cproto.AdditionalDiagnosticRequest, ...client.DiagnosticComponentRequest) []client.DiagnosticComponentResult); ok {
		r0 = rf(ctx, additionalDiags, components...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.DiagnosticComponentResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []cproto.AdditionalDiagnosticRequest, ...client.DiagnosticComponentRequest) error); ok {
		r1 = rf(ctx, additionalDiags, components...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_DiagnosticComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnosticComponents'
type Client_DiagnosticComponents_Call struct {
	*mock.Call
}

// DiagnosticComponents is a helper method to define mock.On call
//   - ctx context.Context
//   - additionalDiags []cproto.AdditionalDiagnosticRequest
//   - components ...client.DiagnosticComponentRequest
func (_e *Client_Expecter) DiagnosticComponents(ctx interface{}, additionalDiags interface{}, components ...interface{}) *Client_DiagnosticComponents_Call {
	return &Client_DiagnosticComponents_Call{Call: _e.mock.On("DiagnosticComponents",
		append([]interface{}{ctx, additionalDiags}, components...)...)}
}

func (_c *Client_DiagnosticComponents_Call) Run(run func(ctx context.Context, additionalDiags []cproto.AdditionalDiagnosticRequest, components ...client.DiagnosticComponentRequest)) *Client_DiagnosticComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.DiagnosticComponentRequest, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.DiagnosticComponentRequest)
			}
		}
		run(args[0].(context.Context), args[1].([]cproto.AdditionalDiagnosticRequest), variadicArgs...)
	})
	return _c
}

func (_c *Client_DiagnosticComponents_Call) Return(_a0 []client.DiagnosticComponentResult, _a1 error) *Client_DiagnosticComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_DiagnosticComponents_Call) RunAndReturn(run func(context.Context, []cproto.AdditionalDiagnosticRequest, ...client.DiagnosticComponentRequest) ([]client.DiagnosticComponentResult, error)) *Client_DiagnosticComponents_Call {
	_c.Call.Return(run)
	return _c
}

// DiagnosticUnits provides a mock function with given fields: ctx, units
func (_m *Client) DiagnosticUnits(ctx context.Context, units ...client.DiagnosticUnitRequest) ([]client.DiagnosticUnitResult, error) {
	_va := make([]interface{}, len(units))
	for _i := range units {
		_va[_i] = units[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiagnosticUnits")
	}

	var r0 []client.DiagnosticUnitResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DiagnosticUnitRequest) ([]client.DiagnosticUnitResult, error)); ok {
		return rf(ctx, units...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DiagnosticUnitRequest) []client.DiagnosticUnitResult); ok {
		r0 = rf(ctx, units...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.DiagnosticUnitResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.DiagnosticUnitRequest) error); ok {
		r1 = rf(ctx, units...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_DiagnosticUnits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnosticUnits'
type Client_DiagnosticUnits_Call struct {
	*mock.Call
}

// DiagnosticUnits is a helper method to define mock.On call
//   - ctx context.Context
//   - units ...client.DiagnosticUnitRequest
func (_e *Client_Expecter) DiagnosticUnits(ctx interface{}, units ...interface{}) *Client_DiagnosticUnits_Call {
	return &Client_DiagnosticUnits_Call{Call: _e.mock.On("DiagnosticUnits",
		append([]interface{}{ctx}, units...)...)}
}

func (_c *Client_DiagnosticUnits_Call) Run(run func(ctx context.Context, units ...client.DiagnosticUnitRequest)) *Client_DiagnosticUnits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.DiagnosticUnitRequest, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(client.DiagnosticUnitRequest)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Client_DiagnosticUnits_Call) Return(_a0 []client.DiagnosticUnitResult, _a1 error) *Client_DiagnosticUnits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_DiagnosticUnits_Call) RunAndReturn(run func(context.Context, ...client.DiagnosticUnitRequest) ([]client.DiagnosticUnitResult, error)) *Client_DiagnosticUnits_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields:
func (_m *Client) Disconnect() {
	_m.Called()
}

// Client_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type Client_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *Client_Expecter) Disconnect() *Client_Disconnect_Call {
	return &Client_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *Client_Disconnect_Call) Run(run func()) *Client_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Disconnect_Call) Return() *Client_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *Client_Disconnect_Call) RunAndReturn(run func()) *Client_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Restart provides a mock function with given fields: ctx
func (_m *Client) Restart(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type Client_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) Restart(ctx interface{}) *Client_Restart_Call {
	return &Client_Restart_Call{Call: _e.mock.On("Restart", ctx)}
}

func (_c *Client_Restart_Call) Run(run func(ctx context.Context)) *Client_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_Restart_Call) Return(_a0 error) *Client_Restart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Restart_Call) RunAndReturn(run func(context.Context) error) *Client_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with given fields: ctx
func (_m *Client) State(ctx context.Context) (*client.AgentState, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 *client.AgentState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.AgentState, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.AgentState); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AgentState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type Client_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) State(ctx interface{}) *Client_State_Call {
	return &Client_State_Call{Call: _e.mock.On("State", ctx)}
}

func (_c *Client_State_Call) Run(run func(ctx context.Context)) *Client_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_State_Call) Return(_a0 *client.AgentState, _a1 error) *Client_State_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_State_Call) RunAndReturn(run func(context.Context) (*client.AgentState, error)) *Client_State_Call {
	_c.Call.Return(run)
	return _c
}

// StateWatch provides a mock function with given fields: ctx
func (_m *Client) StateWatch(ctx context.Context) (client.ClientStateWatch, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StateWatch")
	}

	var r0 client.ClientStateWatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (client.ClientStateWatch, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) client.ClientStateWatch); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.ClientStateWatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_StateWatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateWatch'
type Client_StateWatch_Call struct {
	*mock.Call
}

// StateWatch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) StateWatch(ctx interface{}) *Client_StateWatch_Call {
	return &Client_StateWatch_Call{Call: _e.mock.On("StateWatch", ctx)}
}

func (_c *Client_StateWatch_Call) Run(run func(ctx context.Context)) *Client_StateWatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_StateWatch_Call) Return(_a0 client.ClientStateWatch, _a1 error) *Client_StateWatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_StateWatch_Call) RunAndReturn(run func(context.Context) (client.ClientStateWatch, error)) *Client_StateWatch_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function with given fields: ctx, version, sourceURI, skipVerify, skipDefaultPgp, pgpBytes
func (_m *Client) Upgrade(ctx context.Context, version string, sourceURI string, skipVerify bool, skipDefaultPgp bool, pgpBytes ...string) (string, error) {
	_va := make([]interface{}, len(pgpBytes))
	for _i := range pgpBytes {
		_va[_i] = pgpBytes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, version, sourceURI, skipVerify, skipDefaultPgp)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool, ...string) (string, error)); ok {
		return rf(ctx, version, sourceURI, skipVerify, skipDefaultPgp, pgpBytes...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool, ...string) string); ok {
		r0 = rf(ctx, version, sourceURI, skipVerify, skipDefaultPgp, pgpBytes...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, bool, ...string) error); ok {
		r1 = rf(ctx, version, sourceURI, skipVerify, skipDefaultPgp, pgpBytes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type Client_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - version string
//   - sourceURI string
//   - skipVerify bool
//   - skipDefaultPgp bool
//   - pgpBytes ...string
func (_e *Client_Expecter) Upgrade(ctx interface{}, version interface{}, sourceURI interface{}, skipVerify interface{}, skipDefaultPgp interface{}, pgpBytes ...interface{}) *Client_Upgrade_Call {
	return &Client_Upgrade_Call{Call: _e.mock.On("Upgrade",
		append([]interface{}{ctx, version, sourceURI, skipVerify, skipDefaultPgp}, pgpBytes...)...)}
}

func (_c *Client_Upgrade_Call) Run(run func(ctx context.Context, version string, sourceURI string, skipVerify bool, skipDefaultPgp bool, pgpBytes ...string)) *Client_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool), args[4].(bool), variadicArgs...)
	})
	return _c
}

func (_c *Client_Upgrade_Call) Return(_a0 string, _a1 error) *Client_Upgrade_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Upgrade_Call) RunAndReturn(run func(context.Context, string, string, bool, bool, ...string) (string, error)) *Client_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields: ctx
func (_m *Client) Version(ctx context.Context) (client.Version, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 client.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (client.Version, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) client.Version); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.Version)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type Client_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) Version(ctx interface{}) *Client_Version_Call {
	return &Client_Version_Call{Call: _e.mock.On("Version", ctx)}
}

func (_c *Client_Version_Call) Run(run func(ctx context.Context)) *Client_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_Version_Call) Return(_a0 client.Version, _a1 error) *Client_Version_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Version_Call) RunAndReturn(run func(context.Context) (client.Version, error)) *Client_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
