// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pkg/component/fake/common/event.proto

package common

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FakeEventProtocolClient is the client API for FakeEventProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FakeEventProtocolClient interface {
	// SendEvent sends an event over the protocol.
	SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventResponse, error)
}

type fakeEventProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewFakeEventProtocolClient(cc grpc.ClientConnInterface) FakeEventProtocolClient {
	return &fakeEventProtocolClient{cc}
}

func (c *fakeEventProtocolClient) SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/common.FakeEventProtocol/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FakeEventProtocolServer is the server API for FakeEventProtocol service.
// All implementations must embed UnimplementedFakeEventProtocolServer
// for forward compatibility
type FakeEventProtocolServer interface {
	// SendEvent sends an event over the protocol.
	SendEvent(context.Context, *Event) (*EventResponse, error)
	mustEmbedUnimplementedFakeEventProtocolServer()
}

// UnimplementedFakeEventProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedFakeEventProtocolServer struct {
}

func (UnimplementedFakeEventProtocolServer) SendEvent(context.Context, *Event) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedFakeEventProtocolServer) mustEmbedUnimplementedFakeEventProtocolServer() {}

// UnsafeFakeEventProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FakeEventProtocolServer will
// result in compilation errors.
type UnsafeFakeEventProtocolServer interface {
	mustEmbedUnimplementedFakeEventProtocolServer()
}

func RegisterFakeEventProtocolServer(s grpc.ServiceRegistrar, srv FakeEventProtocolServer) {
	s.RegisterService(&FakeEventProtocol_ServiceDesc, srv)
}

func _FakeEventProtocol_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FakeEventProtocolServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.FakeEventProtocol/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FakeEventProtocolServer).SendEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// FakeEventProtocol_ServiceDesc is the grpc.ServiceDesc for FakeEventProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FakeEventProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.FakeEventProtocol",
	HandlerType: (*FakeEventProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _FakeEventProtocol_SendEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/component/fake/common/event.proto",
}
