// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Configure provides a mock function for the type MockClient
func (_mock *MockClient) Configure(ctx context.Context, config string) error {
	ret := _mock.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Configure")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Configure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configure'
type MockClient_Configure_Call struct {
	*mock.Call
}

// Configure is a helper method to define mock.On call
//   - ctx context.Context
//   - config string
func (_e *MockClient_Expecter) Configure(ctx interface{}, config interface{}) *MockClient_Configure_Call {
	return &MockClient_Configure_Call{Call: _e.mock.On("Configure", ctx, config)}
}

func (_c *MockClient_Configure_Call) Run(run func(ctx context.Context, config string)) *MockClient_Configure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_Configure_Call) Return(err error) *MockClient_Configure_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Configure_Call) RunAndReturn(run func(ctx context.Context, config string) error) *MockClient_Configure_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function for the type MockClient
func (_mock *MockClient) Connect(ctx context.Context, opts ...grpc.DialOption) error {
	// grpc.DialOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...grpc.DialOption) error); ok {
		r0 = returnFunc(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.DialOption
func (_e *MockClient_Expecter) Connect(ctx interface{}, opts ...interface{}) *MockClient_Connect_Call {
	return &MockClient_Connect_Call{Call: _e.mock.On("Connect",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockClient_Connect_Call) Run(run func(ctx context.Context, opts ...grpc.DialOption)) *MockClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []grpc.DialOption
		variadicArgs := make([]grpc.DialOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.DialOption)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockClient_Connect_Call) Return(err error) *MockClient_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Connect_Call) RunAndReturn(run func(ctx context.Context, opts ...grpc.DialOption) error) *MockClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// DiagnosticAgent provides a mock function for the type MockClient
func (_mock *MockClient) DiagnosticAgent(ctx context.Context, additionalDiags []AdditionalMetrics) ([]DiagnosticFileResult, error) {
	ret := _mock.Called(ctx, additionalDiags)

	if len(ret) == 0 {
		panic("no return value specified for DiagnosticAgent")
	}

	var r0 []DiagnosticFileResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []AdditionalMetrics) ([]DiagnosticFileResult, error)); ok {
		return returnFunc(ctx, additionalDiags)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []AdditionalMetrics) []DiagnosticFileResult); ok {
		r0 = returnFunc(ctx, additionalDiags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DiagnosticFileResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []AdditionalMetrics) error); ok {
		r1 = returnFunc(ctx, additionalDiags)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DiagnosticAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnosticAgent'
type MockClient_DiagnosticAgent_Call struct {
	*mock.Call
}

// DiagnosticAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - additionalDiags []AdditionalMetrics
func (_e *MockClient_Expecter) DiagnosticAgent(ctx interface{}, additionalDiags interface{}) *MockClient_DiagnosticAgent_Call {
	return &MockClient_DiagnosticAgent_Call{Call: _e.mock.On("DiagnosticAgent", ctx, additionalDiags)}
}

func (_c *MockClient_DiagnosticAgent_Call) Run(run func(ctx context.Context, additionalDiags []AdditionalMetrics)) *MockClient_DiagnosticAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []AdditionalMetrics
		if args[1] != nil {
			arg1 = args[1].([]AdditionalMetrics)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_DiagnosticAgent_Call) Return(diagnosticFileResults []DiagnosticFileResult, err error) *MockClient_DiagnosticAgent_Call {
	_c.Call.Return(diagnosticFileResults, err)
	return _c
}

func (_c *MockClient_DiagnosticAgent_Call) RunAndReturn(run func(ctx context.Context, additionalDiags []AdditionalMetrics) ([]DiagnosticFileResult, error)) *MockClient_DiagnosticAgent_Call {
	_c.Call.Return(run)
	return _c
}

// DiagnosticComponents provides a mock function for the type MockClient
func (_mock *MockClient) DiagnosticComponents(ctx context.Context, additionalDiags []AdditionalMetrics, components ...DiagnosticComponentRequest) ([]DiagnosticComponentResult, error) {
	// DiagnosticComponentRequest
	_va := make([]interface{}, len(components))
	for _i := range components {
		_va[_i] = components[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, additionalDiags)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiagnosticComponents")
	}

	var r0 []DiagnosticComponentResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []AdditionalMetrics, ...DiagnosticComponentRequest) ([]DiagnosticComponentResult, error)); ok {
		return returnFunc(ctx, additionalDiags, components...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []AdditionalMetrics, ...DiagnosticComponentRequest) []DiagnosticComponentResult); ok {
		r0 = returnFunc(ctx, additionalDiags, components...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DiagnosticComponentResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []AdditionalMetrics, ...DiagnosticComponentRequest) error); ok {
		r1 = returnFunc(ctx, additionalDiags, components...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DiagnosticComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnosticComponents'
type MockClient_DiagnosticComponents_Call struct {
	*mock.Call
}

// DiagnosticComponents is a helper method to define mock.On call
//   - ctx context.Context
//   - additionalDiags []AdditionalMetrics
//   - components ...DiagnosticComponentRequest
func (_e *MockClient_Expecter) DiagnosticComponents(ctx interface{}, additionalDiags interface{}, components ...interface{}) *MockClient_DiagnosticComponents_Call {
	return &MockClient_DiagnosticComponents_Call{Call: _e.mock.On("DiagnosticComponents",
		append([]interface{}{ctx, additionalDiags}, components...)...)}
}

func (_c *MockClient_DiagnosticComponents_Call) Run(run func(ctx context.Context, additionalDiags []AdditionalMetrics, components ...DiagnosticComponentRequest)) *MockClient_DiagnosticComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []AdditionalMetrics
		if args[1] != nil {
			arg1 = args[1].([]AdditionalMetrics)
		}
		var arg2 []DiagnosticComponentRequest
		variadicArgs := make([]DiagnosticComponentRequest, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(DiagnosticComponentRequest)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DiagnosticComponents_Call) Return(diagnosticComponentResults []DiagnosticComponentResult, err error) *MockClient_DiagnosticComponents_Call {
	_c.Call.Return(diagnosticComponentResults, err)
	return _c
}

func (_c *MockClient_DiagnosticComponents_Call) RunAndReturn(run func(ctx context.Context, additionalDiags []AdditionalMetrics, components ...DiagnosticComponentRequest) ([]DiagnosticComponentResult, error)) *MockClient_DiagnosticComponents_Call {
	_c.Call.Return(run)
	return _c
}

// DiagnosticUnits provides a mock function for the type MockClient
func (_mock *MockClient) DiagnosticUnits(ctx context.Context, units ...DiagnosticUnitRequest) ([]DiagnosticUnitResult, error) {
	// DiagnosticUnitRequest
	_va := make([]interface{}, len(units))
	for _i := range units {
		_va[_i] = units[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiagnosticUnits")
	}

	var r0 []DiagnosticUnitResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...DiagnosticUnitRequest) ([]DiagnosticUnitResult, error)); ok {
		return returnFunc(ctx, units...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...DiagnosticUnitRequest) []DiagnosticUnitResult); ok {
		r0 = returnFunc(ctx, units...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DiagnosticUnitResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...DiagnosticUnitRequest) error); ok {
		r1 = returnFunc(ctx, units...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DiagnosticUnits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiagnosticUnits'
type MockClient_DiagnosticUnits_Call struct {
	*mock.Call
}

// DiagnosticUnits is a helper method to define mock.On call
//   - ctx context.Context
//   - units ...DiagnosticUnitRequest
func (_e *MockClient_Expecter) DiagnosticUnits(ctx interface{}, units ...interface{}) *MockClient_DiagnosticUnits_Call {
	return &MockClient_DiagnosticUnits_Call{Call: _e.mock.On("DiagnosticUnits",
		append([]interface{}{ctx}, units...)...)}
}

func (_c *MockClient_DiagnosticUnits_Call) Run(run func(ctx context.Context, units ...DiagnosticUnitRequest)) *MockClient_DiagnosticUnits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []DiagnosticUnitRequest
		variadicArgs := make([]DiagnosticUnitRequest, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(DiagnosticUnitRequest)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockClient_DiagnosticUnits_Call) Return(diagnosticUnitResults []DiagnosticUnitResult, err error) *MockClient_DiagnosticUnits_Call {
	_c.Call.Return(diagnosticUnitResults, err)
	return _c
}

func (_c *MockClient_DiagnosticUnits_Call) RunAndReturn(run func(ctx context.Context, units ...DiagnosticUnitRequest) ([]DiagnosticUnitResult, error)) *MockClient_DiagnosticUnits_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type MockClient
func (_mock *MockClient) Disconnect() {
	_mock.Called()
	return
}

// MockClient_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockClient_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *MockClient_Expecter) Disconnect() *MockClient_Disconnect_Call {
	return &MockClient_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *MockClient_Disconnect_Call) Run(run func()) *MockClient_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Disconnect_Call) Return() *MockClient_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_Disconnect_Call) RunAndReturn(run func()) *MockClient_Disconnect_Call {
	_c.Run(run)
	return _c
}

// Restart provides a mock function for the type MockClient
func (_mock *MockClient) Restart(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type MockClient_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Restart(ctx interface{}) *MockClient_Restart_Call {
	return &MockClient_Restart_Call{Call: _e.mock.On("Restart", ctx)}
}

func (_c *MockClient_Restart_Call) Run(run func(ctx context.Context)) *MockClient_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Restart_Call) Return(err error) *MockClient_Restart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Restart_Call) RunAndReturn(run func(ctx context.Context) error) *MockClient_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function for the type MockClient
func (_mock *MockClient) State(ctx context.Context) (*AgentState, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 *AgentState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*AgentState, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *AgentState); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AgentState)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type MockClient_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) State(ctx interface{}) *MockClient_State_Call {
	return &MockClient_State_Call{Call: _e.mock.On("State", ctx)}
}

func (_c *MockClient_State_Call) Run(run func(ctx context.Context)) *MockClient_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_State_Call) Return(agentState *AgentState, err error) *MockClient_State_Call {
	_c.Call.Return(agentState, err)
	return _c
}

func (_c *MockClient_State_Call) RunAndReturn(run func(ctx context.Context) (*AgentState, error)) *MockClient_State_Call {
	_c.Call.Return(run)
	return _c
}

// StateWatch provides a mock function for the type MockClient
func (_mock *MockClient) StateWatch(ctx context.Context) (ClientStateWatch, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StateWatch")
	}

	var r0 ClientStateWatch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (ClientStateWatch, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) ClientStateWatch); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClientStateWatch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_StateWatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateWatch'
type MockClient_StateWatch_Call struct {
	*mock.Call
}

// StateWatch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) StateWatch(ctx interface{}) *MockClient_StateWatch_Call {
	return &MockClient_StateWatch_Call{Call: _e.mock.On("StateWatch", ctx)}
}

func (_c *MockClient_StateWatch_Call) Run(run func(ctx context.Context)) *MockClient_StateWatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_StateWatch_Call) Return(clientStateWatch ClientStateWatch, err error) *MockClient_StateWatch_Call {
	_c.Call.Return(clientStateWatch, err)
	return _c
}

func (_c *MockClient_StateWatch_Call) RunAndReturn(run func(ctx context.Context) (ClientStateWatch, error)) *MockClient_StateWatch_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function for the type MockClient
func (_mock *MockClient) Upgrade(ctx context.Context, version string, rollback bool, sourceURI string, skipVerify bool, skipDefaultPgp bool, pgpBytes ...string) (string, error) {
	// string
	_va := make([]interface{}, len(pgpBytes))
	for _i := range pgpBytes {
		_va[_i] = pgpBytes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, version, rollback, sourceURI, skipVerify, skipDefaultPgp)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool, string, bool, bool, ...string) (string, error)); ok {
		return returnFunc(ctx, version, rollback, sourceURI, skipVerify, skipDefaultPgp, pgpBytes...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool, string, bool, bool, ...string) string); ok {
		r0 = returnFunc(ctx, version, rollback, sourceURI, skipVerify, skipDefaultPgp, pgpBytes...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool, string, bool, bool, ...string) error); ok {
		r1 = returnFunc(ctx, version, rollback, sourceURI, skipVerify, skipDefaultPgp, pgpBytes...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type MockClient_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - version string
//   - rollback bool
//   - sourceURI string
//   - skipVerify bool
//   - skipDefaultPgp bool
//   - pgpBytes ...string
func (_e *MockClient_Expecter) Upgrade(ctx interface{}, version interface{}, rollback interface{}, sourceURI interface{}, skipVerify interface{}, skipDefaultPgp interface{}, pgpBytes ...interface{}) *MockClient_Upgrade_Call {
	return &MockClient_Upgrade_Call{Call: _e.mock.On("Upgrade",
		append([]interface{}{ctx, version, rollback, sourceURI, skipVerify, skipDefaultPgp}, pgpBytes...)...)}
}

func (_c *MockClient_Upgrade_Call) Run(run func(ctx context.Context, version string, rollback bool, sourceURI string, skipVerify bool, skipDefaultPgp bool, pgpBytes ...string)) *MockClient_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		var arg5 bool
		if args[5] != nil {
			arg5 = args[5].(bool)
		}
		var arg6 []string
		variadicArgs := make([]string, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg6 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6...,
		)
	})
	return _c
}

func (_c *MockClient_Upgrade_Call) Return(s string, err error) *MockClient_Upgrade_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockClient_Upgrade_Call) RunAndReturn(run func(ctx context.Context, version string, rollback bool, sourceURI string, skipVerify bool, skipDefaultPgp bool, pgpBytes ...string) (string, error)) *MockClient_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockClient
func (_mock *MockClient) Version(ctx context.Context) (Version, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 Version
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (Version, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) Version); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(Version)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockClient_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Version(ctx interface{}) *MockClient_Version_Call {
	return &MockClient_Version_Call{Call: _e.mock.On("Version", ctx)}
}

func (_c *MockClient_Version_Call) Run(run func(ctx context.Context)) *MockClient_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Version_Call) Return(version Version, err error) *MockClient_Version_Call {
	_c.Call.Return(version, err)
	return _c
}

func (_c *MockClient_Version_Call) RunAndReturn(run func(ctx context.Context) (Version, error)) *MockClient_Version_Call {
	_c.Call.Return(run)
	return _c
}
