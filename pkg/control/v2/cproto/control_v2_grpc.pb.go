// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: control_v2.proto

package cproto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ElasticAgentControl_Version_FullMethodName              = "/cproto.ElasticAgentControl/Version"
	ElasticAgentControl_State_FullMethodName                = "/cproto.ElasticAgentControl/State"
	ElasticAgentControl_StateWatch_FullMethodName           = "/cproto.ElasticAgentControl/StateWatch"
	ElasticAgentControl_Restart_FullMethodName              = "/cproto.ElasticAgentControl/Restart"
	ElasticAgentControl_Upgrade_FullMethodName              = "/cproto.ElasticAgentControl/Upgrade"
	ElasticAgentControl_DiagnosticAgent_FullMethodName      = "/cproto.ElasticAgentControl/DiagnosticAgent"
	ElasticAgentControl_DiagnosticUnits_FullMethodName      = "/cproto.ElasticAgentControl/DiagnosticUnits"
	ElasticAgentControl_DiagnosticComponents_FullMethodName = "/cproto.ElasticAgentControl/DiagnosticComponents"
	ElasticAgentControl_Configure_FullMethodName            = "/cproto.ElasticAgentControl/Configure"
)

// ElasticAgentControlClient is the client API for ElasticAgentControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElasticAgentControlClient interface {
	// Fetches the currently running version of the Elastic Agent.
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Fetches the currently states of the Elastic Agent.
	State(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StateResponse, error)
	// Streams the current state of the Elastic Agent to the client.
	//
	// Client will continue to get updated StateResponse when any state
	// of the Elastic Agent has changed.
	StateWatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateResponse], error)
	// Restart restarts the current running Elastic Agent.
	Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestartResponse, error)
	// Upgrade starts the upgrade process of Elastic Agent.
	Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error)
	// Gather diagnostic information for the running Elastic Agent.
	DiagnosticAgent(ctx context.Context, in *DiagnosticAgentRequest, opts ...grpc.CallOption) (*DiagnosticAgentResponse, error)
	// Gather diagnostic information for the running units.
	DiagnosticUnits(ctx context.Context, in *DiagnosticUnitsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiagnosticUnitResponse], error)
	// Gather diagnostic information for the running components.
	DiagnosticComponents(ctx context.Context, in *DiagnosticComponentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiagnosticComponentResponse], error)
	// Configure adjusts the running Elastic Agent configuration with the configuration
	// provided over the RPC.
	//
	// This is only allowed if the Elastic Agent is spawned in TESTING_MODE. Calling this
	// on any Elastic Agent that is not in TESTING_MODE will result in an error being
	// returned and nothing occurring.
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*Empty, error)
}

type elasticAgentControlClient struct {
	cc grpc.ClientConnInterface
}

func NewElasticAgentControlClient(cc grpc.ClientConnInterface) ElasticAgentControlClient {
	return &elasticAgentControlClient{cc}
}

func (c *elasticAgentControlClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, ElasticAgentControl_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticAgentControlClient) State(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, ElasticAgentControl_State_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticAgentControlClient) StateWatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ElasticAgentControl_ServiceDesc.Streams[0], ElasticAgentControl_StateWatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, StateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElasticAgentControl_StateWatchClient = grpc.ServerStreamingClient[StateResponse]

func (c *elasticAgentControlClient) Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartResponse)
	err := c.cc.Invoke(ctx, ElasticAgentControl_Restart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticAgentControlClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResponse)
	err := c.cc.Invoke(ctx, ElasticAgentControl_Upgrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticAgentControlClient) DiagnosticAgent(ctx context.Context, in *DiagnosticAgentRequest, opts ...grpc.CallOption) (*DiagnosticAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiagnosticAgentResponse)
	err := c.cc.Invoke(ctx, ElasticAgentControl_DiagnosticAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticAgentControlClient) DiagnosticUnits(ctx context.Context, in *DiagnosticUnitsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiagnosticUnitResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ElasticAgentControl_ServiceDesc.Streams[1], ElasticAgentControl_DiagnosticUnits_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DiagnosticUnitsRequest, DiagnosticUnitResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElasticAgentControl_DiagnosticUnitsClient = grpc.ServerStreamingClient[DiagnosticUnitResponse]

func (c *elasticAgentControlClient) DiagnosticComponents(ctx context.Context, in *DiagnosticComponentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DiagnosticComponentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ElasticAgentControl_ServiceDesc.Streams[2], ElasticAgentControl_DiagnosticComponents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DiagnosticComponentsRequest, DiagnosticComponentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElasticAgentControl_DiagnosticComponentsClient = grpc.ServerStreamingClient[DiagnosticComponentResponse]

func (c *elasticAgentControlClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ElasticAgentControl_Configure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElasticAgentControlServer is the server API for ElasticAgentControl service.
// All implementations must embed UnimplementedElasticAgentControlServer
// for forward compatibility.
type ElasticAgentControlServer interface {
	// Fetches the currently running version of the Elastic Agent.
	Version(context.Context, *Empty) (*VersionResponse, error)
	// Fetches the currently states of the Elastic Agent.
	State(context.Context, *Empty) (*StateResponse, error)
	// Streams the current state of the Elastic Agent to the client.
	//
	// Client will continue to get updated StateResponse when any state
	// of the Elastic Agent has changed.
	StateWatch(*Empty, grpc.ServerStreamingServer[StateResponse]) error
	// Restart restarts the current running Elastic Agent.
	Restart(context.Context, *Empty) (*RestartResponse, error)
	// Upgrade starts the upgrade process of Elastic Agent.
	Upgrade(context.Context, *UpgradeRequest) (*UpgradeResponse, error)
	// Gather diagnostic information for the running Elastic Agent.
	DiagnosticAgent(context.Context, *DiagnosticAgentRequest) (*DiagnosticAgentResponse, error)
	// Gather diagnostic information for the running units.
	DiagnosticUnits(*DiagnosticUnitsRequest, grpc.ServerStreamingServer[DiagnosticUnitResponse]) error
	// Gather diagnostic information for the running components.
	DiagnosticComponents(*DiagnosticComponentsRequest, grpc.ServerStreamingServer[DiagnosticComponentResponse]) error
	// Configure adjusts the running Elastic Agent configuration with the configuration
	// provided over the RPC.
	//
	// This is only allowed if the Elastic Agent is spawned in TESTING_MODE. Calling this
	// on any Elastic Agent that is not in TESTING_MODE will result in an error being
	// returned and nothing occurring.
	Configure(context.Context, *ConfigureRequest) (*Empty, error)
	mustEmbedUnimplementedElasticAgentControlServer()
}

// UnimplementedElasticAgentControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElasticAgentControlServer struct{}

func (UnimplementedElasticAgentControlServer) Version(context.Context, *Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedElasticAgentControlServer) State(context.Context, *Empty) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedElasticAgentControlServer) StateWatch(*Empty, grpc.ServerStreamingServer[StateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StateWatch not implemented")
}
func (UnimplementedElasticAgentControlServer) Restart(context.Context, *Empty) (*RestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedElasticAgentControlServer) Upgrade(context.Context, *UpgradeRequest) (*UpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (UnimplementedElasticAgentControlServer) DiagnosticAgent(context.Context, *DiagnosticAgentRequest) (*DiagnosticAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiagnosticAgent not implemented")
}
func (UnimplementedElasticAgentControlServer) DiagnosticUnits(*DiagnosticUnitsRequest, grpc.ServerStreamingServer[DiagnosticUnitResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DiagnosticUnits not implemented")
}
func (UnimplementedElasticAgentControlServer) DiagnosticComponents(*DiagnosticComponentsRequest, grpc.ServerStreamingServer[DiagnosticComponentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DiagnosticComponents not implemented")
}
func (UnimplementedElasticAgentControlServer) Configure(context.Context, *ConfigureRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedElasticAgentControlServer) mustEmbedUnimplementedElasticAgentControlServer() {}
func (UnimplementedElasticAgentControlServer) testEmbeddedByValue()                             {}

// UnsafeElasticAgentControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElasticAgentControlServer will
// result in compilation errors.
type UnsafeElasticAgentControlServer interface {
	mustEmbedUnimplementedElasticAgentControlServer()
}

func RegisterElasticAgentControlServer(s grpc.ServiceRegistrar, srv ElasticAgentControlServer) {
	// If the following call pancis, it indicates UnimplementedElasticAgentControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ElasticAgentControl_ServiceDesc, srv)
}

func _ElasticAgentControl_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticAgentControlServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElasticAgentControl_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticAgentControlServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElasticAgentControl_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticAgentControlServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElasticAgentControl_State_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticAgentControlServer).State(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElasticAgentControl_StateWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElasticAgentControlServer).StateWatch(m, &grpc.GenericServerStream[Empty, StateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElasticAgentControl_StateWatchServer = grpc.ServerStreamingServer[StateResponse]

func _ElasticAgentControl_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticAgentControlServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElasticAgentControl_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticAgentControlServer).Restart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElasticAgentControl_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticAgentControlServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElasticAgentControl_Upgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticAgentControlServer).Upgrade(ctx, req.(*UpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElasticAgentControl_DiagnosticAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnosticAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticAgentControlServer).DiagnosticAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElasticAgentControl_DiagnosticAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticAgentControlServer).DiagnosticAgent(ctx, req.(*DiagnosticAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElasticAgentControl_DiagnosticUnits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiagnosticUnitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElasticAgentControlServer).DiagnosticUnits(m, &grpc.GenericServerStream[DiagnosticUnitsRequest, DiagnosticUnitResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElasticAgentControl_DiagnosticUnitsServer = grpc.ServerStreamingServer[DiagnosticUnitResponse]

func _ElasticAgentControl_DiagnosticComponents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiagnosticComponentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElasticAgentControlServer).DiagnosticComponents(m, &grpc.GenericServerStream[DiagnosticComponentsRequest, DiagnosticComponentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElasticAgentControl_DiagnosticComponentsServer = grpc.ServerStreamingServer[DiagnosticComponentResponse]

func _ElasticAgentControl_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticAgentControlServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElasticAgentControl_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticAgentControlServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ElasticAgentControl_ServiceDesc is the grpc.ServiceDesc for ElasticAgentControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElasticAgentControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cproto.ElasticAgentControl",
	HandlerType: (*ElasticAgentControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ElasticAgentControl_Version_Handler,
		},
		{
			MethodName: "State",
			Handler:    _ElasticAgentControl_State_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _ElasticAgentControl_Restart_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _ElasticAgentControl_Upgrade_Handler,
		},
		{
			MethodName: "DiagnosticAgent",
			Handler:    _ElasticAgentControl_DiagnosticAgent_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ElasticAgentControl_Configure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StateWatch",
			Handler:       _ElasticAgentControl_StateWatch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DiagnosticUnits",
			Handler:       _ElasticAgentControl_DiagnosticUnits_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DiagnosticComponents",
			Handler:       _ElasticAgentControl_DiagnosticComponents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "control_v2.proto",
}
