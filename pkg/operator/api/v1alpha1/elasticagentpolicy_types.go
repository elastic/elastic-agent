// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"crypto/sha256"
	"encoding/json"
	"fmt"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// ElasticAgentPolicySpec defines the desired state of ElasticAgentPolicy
type ElasticAgentPolicySpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Foo is an example field of ElasticAgentPolicy. Edit elasticagentpolicy_types.go to remove/update
	Policy *AgentPolicy `json:"policy,omitempty"`
}

// ElasticAgentPolicyStatus defines the observed state of ElasticAgentPolicy
type ElasticAgentPolicyStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// ElasticAgentPolicy is the Schema for the elasticagentpolicies API
type ElasticAgentPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ElasticAgentPolicySpec   `json:"spec,omitempty"`
	Status ElasticAgentPolicyStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// ElasticAgentPolicyList contains a list of ElasticAgentPolicy
type ElasticAgentPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElasticAgentPolicy `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ElasticAgentPolicy{}, &ElasticAgentPolicyList{})
}

type AgentPolicy struct {
	// Data holds the configuration keys and values.
	// This field exists to work around https://github.com/kubernetes-sigs/kubebuilder/issues/528
	Data map[string]interface{} `json:"-"`
}

// NewConfig constructs a Config with the given unstructured configuration data.
func NewConfig(cfg map[string]interface{}) AgentPolicy {
	return AgentPolicy{Data: cfg}
}

// MarshalJSON implements the Marshaler interface.
func (c AgentPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Data)
}

// UnmarshalJSON implements the Unmarshaler interface.
func (c *AgentPolicy) UnmarshalJSON(data []byte) error {
	var out map[string]interface{}
	err := json.Unmarshal(data, &out)
	if err != nil {
		return err
	}
	c.Data = out
	return nil
}

// DeepCopyInto is an ~autogenerated~ deepcopy function, copying the receiver, writing into out. in must be non-nil.
// This exists here to work around https://github.com/kubernetes/code-generator/issues/50
func (c *AgentPolicy) DeepCopyInto(out *AgentPolicy) {
	bytes, err := json.Marshal(c.Data)
	if err != nil {
		// we assume that it marshals cleanly because otherwise the resource would not have been
		// created in the API server
		panic(err)
	}
	var clone map[string]interface{}
	err = json.Unmarshal(bytes, &clone)
	if err != nil {
		// we assume again optimistically because we just marshalled that the round trip works as well
		panic(err)
	}
	out.Data = clone
}

func (c *AgentPolicy) Hash() (string, error) {
	bytes, err := c.MarshalJSON()
	if err != nil {
		return "", err
	}
	policyHash := sha256.New()

	if _, err := policyHash.Write(bytes); err != nil {
		return "", err
	}

	return fmt.Sprintf("%x", policyHash.Sum(nil)), nil
}
